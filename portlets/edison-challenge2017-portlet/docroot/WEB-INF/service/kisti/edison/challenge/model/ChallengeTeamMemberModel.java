/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedGroupedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ChallengeTeamMember service. Represents a row in the &quot;challenge_ChallengeTeamMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link kisti.edison.challenge.model.impl.ChallengeTeamMemberModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link kisti.edison.challenge.model.impl.ChallengeTeamMemberImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChallengeTeamMember
 * @see kisti.edison.challenge.model.impl.ChallengeTeamMemberImpl
 * @see kisti.edison.challenge.model.impl.ChallengeTeamMemberModelImpl
 * @generated
 */
public interface ChallengeTeamMemberModel extends BaseModel<ChallengeTeamMember>,
	StagedGroupedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a challenge team member model instance should use the {@link ChallengeTeamMember} interface instead.
	 */

	/**
	 * Returns the primary key of this challenge team member.
	 *
	 * @return the primary key of this challenge team member
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this challenge team member.
	 *
	 * @param primaryKey the primary key of this challenge team member
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this challenge team member.
	 *
	 * @return the uuid of this challenge team member
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this challenge team member.
	 *
	 * @param uuid the uuid of this challenge team member
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the challenge team member ID of this challenge team member.
	 *
	 * @return the challenge team member ID of this challenge team member
	 */
	public long getChallengeTeamMemberId();

	/**
	 * Sets the challenge team member ID of this challenge team member.
	 *
	 * @param challengeTeamMemberId the challenge team member ID of this challenge team member
	 */
	public void setChallengeTeamMemberId(long challengeTeamMemberId);

	/**
	 * Returns the group ID of this challenge team member.
	 *
	 * @return the group ID of this challenge team member
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this challenge team member.
	 *
	 * @param groupId the group ID of this challenge team member
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this challenge team member.
	 *
	 * @return the company ID of this challenge team member
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this challenge team member.
	 *
	 * @param companyId the company ID of this challenge team member
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this challenge team member.
	 *
	 * @return the user ID of this challenge team member
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this challenge team member.
	 *
	 * @param userId the user ID of this challenge team member
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this challenge team member.
	 *
	 * @return the user uuid of this challenge team member
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this challenge team member.
	 *
	 * @param userUuid the user uuid of this challenge team member
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this challenge team member.
	 *
	 * @return the user name of this challenge team member
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this challenge team member.
	 *
	 * @param userName the user name of this challenge team member
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this challenge team member.
	 *
	 * @return the create date of this challenge team member
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this challenge team member.
	 *
	 * @param createDate the create date of this challenge team member
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this challenge team member.
	 *
	 * @return the modified date of this challenge team member
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this challenge team member.
	 *
	 * @param modifiedDate the modified date of this challenge team member
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this challenge team member.
	 *
	 * @return the status of this challenge team member
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this challenge team member.
	 *
	 * @param status the status of this challenge team member
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this challenge team member.
	 *
	 * @return the status by user ID of this challenge team member
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this challenge team member.
	 *
	 * @param statusByUserId the status by user ID of this challenge team member
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this challenge team member.
	 *
	 * @return the status by user uuid of this challenge team member
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this challenge team member.
	 *
	 * @param statusByUserUuid the status by user uuid of this challenge team member
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this challenge team member.
	 *
	 * @return the status by user name of this challenge team member
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this challenge team member.
	 *
	 * @param statusByUserName the status by user name of this challenge team member
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this challenge team member.
	 *
	 * @return the status date of this challenge team member
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this challenge team member.
	 *
	 * @param statusDate the status date of this challenge team member
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the apply user ID of this challenge team member.
	 *
	 * @return the apply user ID of this challenge team member
	 */
	public long getApplyUserId();

	/**
	 * Sets the apply user ID of this challenge team member.
	 *
	 * @param applyUserId the apply user ID of this challenge team member
	 */
	public void setApplyUserId(long applyUserId);

	/**
	 * Returns the apply user uuid of this challenge team member.
	 *
	 * @return the apply user uuid of this challenge team member
	 * @throws SystemException if a system exception occurred
	 */
	public String getApplyUserUuid() throws SystemException;

	/**
	 * Sets the apply user uuid of this challenge team member.
	 *
	 * @param applyUserUuid the apply user uuid of this challenge team member
	 */
	public void setApplyUserUuid(String applyUserUuid);

	/**
	 * Returns the apply user name of this challenge team member.
	 *
	 * @return the apply user name of this challenge team member
	 */
	@AutoEscape
	public String getApplyUserName();

	/**
	 * Sets the apply user name of this challenge team member.
	 *
	 * @param applyUserName the apply user name of this challenge team member
	 */
	public void setApplyUserName(String applyUserName);

	/**
	 * Returns the email of this challenge team member.
	 *
	 * @return the email of this challenge team member
	 */
	@AutoEscape
	public String getEmail();

	/**
	 * Sets the email of this challenge team member.
	 *
	 * @param email the email of this challenge team member
	 */
	public void setEmail(String email);

	/**
	 * Returns the institute of this challenge team member.
	 *
	 * @return the institute of this challenge team member
	 */
	public String getInstitute();

	/**
	 * Returns the localized institute of this challenge team member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized institute of this challenge team member
	 */
	@AutoEscape
	public String getInstitute(Locale locale);

	/**
	 * Returns the localized institute of this challenge team member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized institute of this challenge team member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getInstitute(Locale locale, boolean useDefault);

	/**
	 * Returns the localized institute of this challenge team member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized institute of this challenge team member
	 */
	@AutoEscape
	public String getInstitute(String languageId);

	/**
	 * Returns the localized institute of this challenge team member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized institute of this challenge team member
	 */
	@AutoEscape
	public String getInstitute(String languageId, boolean useDefault);

	@AutoEscape
	public String getInstituteCurrentLanguageId();

	@AutoEscape
	public String getInstituteCurrentValue();

	/**
	 * Returns a map of the locales and localized institutes of this challenge team member.
	 *
	 * @return the locales and localized institutes of this challenge team member
	 */
	public Map<Locale, String> getInstituteMap();

	/**
	 * Sets the institute of this challenge team member.
	 *
	 * @param institute the institute of this challenge team member
	 */
	public void setInstitute(String institute);

	/**
	 * Sets the localized institute of this challenge team member in the language.
	 *
	 * @param institute the localized institute of this challenge team member
	 * @param locale the locale of the language
	 */
	public void setInstitute(String institute, Locale locale);

	/**
	 * Sets the localized institute of this challenge team member in the language, and sets the default locale.
	 *
	 * @param institute the localized institute of this challenge team member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setInstitute(String institute, Locale locale,
		Locale defaultLocale);

	public void setInstituteCurrentLanguageId(String languageId);

	/**
	 * Sets the localized institutes of this challenge team member from the map of locales and localized institutes.
	 *
	 * @param instituteMap the locales and localized institutes of this challenge team member
	 */
	public void setInstituteMap(Map<Locale, String> instituteMap);

	/**
	 * Sets the localized institutes of this challenge team member from the map of locales and localized institutes, and sets the default locale.
	 *
	 * @param instituteMap the locales and localized institutes of this challenge team member
	 * @param defaultLocale the default locale
	 */
	public void setInstituteMap(Map<Locale, String> instituteMap,
		Locale defaultLocale);

	/**
	 * Returns the major of this challenge team member.
	 *
	 * @return the major of this challenge team member
	 */
	public String getMajor();

	/**
	 * Returns the localized major of this challenge team member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized major of this challenge team member
	 */
	@AutoEscape
	public String getMajor(Locale locale);

	/**
	 * Returns the localized major of this challenge team member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized major of this challenge team member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getMajor(Locale locale, boolean useDefault);

	/**
	 * Returns the localized major of this challenge team member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized major of this challenge team member
	 */
	@AutoEscape
	public String getMajor(String languageId);

	/**
	 * Returns the localized major of this challenge team member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized major of this challenge team member
	 */
	@AutoEscape
	public String getMajor(String languageId, boolean useDefault);

	@AutoEscape
	public String getMajorCurrentLanguageId();

	@AutoEscape
	public String getMajorCurrentValue();

	/**
	 * Returns a map of the locales and localized majors of this challenge team member.
	 *
	 * @return the locales and localized majors of this challenge team member
	 */
	public Map<Locale, String> getMajorMap();

	/**
	 * Sets the major of this challenge team member.
	 *
	 * @param major the major of this challenge team member
	 */
	public void setMajor(String major);

	/**
	 * Sets the localized major of this challenge team member in the language.
	 *
	 * @param major the localized major of this challenge team member
	 * @param locale the locale of the language
	 */
	public void setMajor(String major, Locale locale);

	/**
	 * Sets the localized major of this challenge team member in the language, and sets the default locale.
	 *
	 * @param major the localized major of this challenge team member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setMajor(String major, Locale locale, Locale defaultLocale);

	public void setMajorCurrentLanguageId(String languageId);

	/**
	 * Sets the localized majors of this challenge team member from the map of locales and localized majors.
	 *
	 * @param majorMap the locales and localized majors of this challenge team member
	 */
	public void setMajorMap(Map<Locale, String> majorMap);

	/**
	 * Sets the localized majors of this challenge team member from the map of locales and localized majors, and sets the default locale.
	 *
	 * @param majorMap the locales and localized majors of this challenge team member
	 * @param defaultLocale the default locale
	 */
	public void setMajorMap(Map<Locale, String> majorMap, Locale defaultLocale);

	/**
	 * Returns the grade of this challenge team member.
	 *
	 * @return the grade of this challenge team member
	 */
	@AutoEscape
	public String getGrade();

	/**
	 * Sets the grade of this challenge team member.
	 *
	 * @param grade the grade of this challenge team member
	 */
	public void setGrade(String grade);

	/**
	 * Returns the phone of this challenge team member.
	 *
	 * @return the phone of this challenge team member
	 */
	@AutoEscape
	public String getPhone();

	/**
	 * Sets the phone of this challenge team member.
	 *
	 * @param phone the phone of this challenge team member
	 */
	public void setPhone(String phone);

	/**
	 * Returns the leader of this challenge team member.
	 *
	 * @return the leader of this challenge team member
	 */
	public boolean getLeader();

	/**
	 * Returns <code>true</code> if this challenge team member is leader.
	 *
	 * @return <code>true</code> if this challenge team member is leader; <code>false</code> otherwise
	 */
	public boolean isLeader();

	/**
	 * Sets whether this challenge team member is leader.
	 *
	 * @param leader the leader of this challenge team member
	 */
	public void setLeader(boolean leader);

	/**
	 * Returns the challenge team ID of this challenge team member.
	 *
	 * @return the challenge team ID of this challenge team member
	 */
	public long getChallengeTeamId();

	/**
	 * Sets the challenge team ID of this challenge team member.
	 *
	 * @param challengeTeamId the challenge team ID of this challenge team member
	 */
	public void setChallengeTeamId(long challengeTeamId);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this challenge team member is approved.
	 *
	 * @return <code>true</code> if this challenge team member is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this challenge team member is denied.
	 *
	 * @return <code>true</code> if this challenge team member is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this challenge team member is a draft.
	 *
	 * @return <code>true</code> if this challenge team member is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this challenge team member is expired.
	 *
	 * @return <code>true</code> if this challenge team member is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this challenge team member is inactive.
	 *
	 * @return <code>true</code> if this challenge team member is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this challenge team member is incomplete.
	 *
	 * @return <code>true</code> if this challenge team member is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this challenge team member is pending.
	 *
	 * @return <code>true</code> if this challenge team member is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this challenge team member is scheduled.
	 *
	 * @return <code>true</code> if this challenge team member is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		kisti.edison.challenge.model.ChallengeTeamMember challengeTeamMember);

	@Override
	public int hashCode();

	@Override
	public CacheModel<kisti.edison.challenge.model.ChallengeTeamMember> toCacheModel();

	@Override
	public kisti.edison.challenge.model.ChallengeTeamMember toEscapedModel();

	@Override
	public kisti.edison.challenge.model.ChallengeTeamMember toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}