/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedGroupedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ChallengeTeam service. Represents a row in the &quot;challenge_ChallengeTeam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link kisti.edison.challenge.model.impl.ChallengeTeamModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link kisti.edison.challenge.model.impl.ChallengeTeamImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChallengeTeam
 * @see kisti.edison.challenge.model.impl.ChallengeTeamImpl
 * @see kisti.edison.challenge.model.impl.ChallengeTeamModelImpl
 * @generated
 */
public interface ChallengeTeamModel extends BaseModel<ChallengeTeam>,
	StagedGroupedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a challenge team model instance should use the {@link ChallengeTeam} interface instead.
	 */

	/**
	 * Returns the primary key of this challenge team.
	 *
	 * @return the primary key of this challenge team
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this challenge team.
	 *
	 * @param primaryKey the primary key of this challenge team
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this challenge team.
	 *
	 * @return the uuid of this challenge team
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this challenge team.
	 *
	 * @param uuid the uuid of this challenge team
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the challenge team ID of this challenge team.
	 *
	 * @return the challenge team ID of this challenge team
	 */
	public long getChallengeTeamId();

	/**
	 * Sets the challenge team ID of this challenge team.
	 *
	 * @param challengeTeamId the challenge team ID of this challenge team
	 */
	public void setChallengeTeamId(long challengeTeamId);

	/**
	 * Returns the group ID of this challenge team.
	 *
	 * @return the group ID of this challenge team
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this challenge team.
	 *
	 * @param groupId the group ID of this challenge team
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this challenge team.
	 *
	 * @return the company ID of this challenge team
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this challenge team.
	 *
	 * @param companyId the company ID of this challenge team
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this challenge team.
	 *
	 * @return the user ID of this challenge team
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this challenge team.
	 *
	 * @param userId the user ID of this challenge team
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this challenge team.
	 *
	 * @return the user uuid of this challenge team
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this challenge team.
	 *
	 * @param userUuid the user uuid of this challenge team
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this challenge team.
	 *
	 * @return the user name of this challenge team
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this challenge team.
	 *
	 * @param userName the user name of this challenge team
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this challenge team.
	 *
	 * @return the create date of this challenge team
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this challenge team.
	 *
	 * @param createDate the create date of this challenge team
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this challenge team.
	 *
	 * @return the modified date of this challenge team
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this challenge team.
	 *
	 * @param modifiedDate the modified date of this challenge team
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this challenge team.
	 *
	 * @return the status of this challenge team
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this challenge team.
	 *
	 * @param status the status of this challenge team
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this challenge team.
	 *
	 * @return the status by user ID of this challenge team
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this challenge team.
	 *
	 * @param statusByUserId the status by user ID of this challenge team
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this challenge team.
	 *
	 * @return the status by user uuid of this challenge team
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this challenge team.
	 *
	 * @param statusByUserUuid the status by user uuid of this challenge team
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this challenge team.
	 *
	 * @return the status by user name of this challenge team
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this challenge team.
	 *
	 * @param statusByUserName the status by user name of this challenge team
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this challenge team.
	 *
	 * @return the status date of this challenge team
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this challenge team.
	 *
	 * @param statusDate the status date of this challenge team
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the team name of this challenge team.
	 *
	 * @return the team name of this challenge team
	 */
	@AutoEscape
	public String getTeamName();

	/**
	 * Sets the team name of this challenge team.
	 *
	 * @param teamName the team name of this challenge team
	 */
	public void setTeamName(String teamName);

	/**
	 * Returns the subject of this challenge team.
	 *
	 * @return the subject of this challenge team
	 */
	public String getSubject();

	/**
	 * Returns the localized subject of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized subject of this challenge team
	 */
	@AutoEscape
	public String getSubject(Locale locale);

	/**
	 * Returns the localized subject of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subject of this challenge team. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSubject(Locale locale, boolean useDefault);

	/**
	 * Returns the localized subject of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized subject of this challenge team
	 */
	@AutoEscape
	public String getSubject(String languageId);

	/**
	 * Returns the localized subject of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subject of this challenge team
	 */
	@AutoEscape
	public String getSubject(String languageId, boolean useDefault);

	@AutoEscape
	public String getSubjectCurrentLanguageId();

	@AutoEscape
	public String getSubjectCurrentValue();

	/**
	 * Returns a map of the locales and localized subjects of this challenge team.
	 *
	 * @return the locales and localized subjects of this challenge team
	 */
	public Map<Locale, String> getSubjectMap();

	/**
	 * Sets the subject of this challenge team.
	 *
	 * @param subject the subject of this challenge team
	 */
	public void setSubject(String subject);

	/**
	 * Sets the localized subject of this challenge team in the language.
	 *
	 * @param subject the localized subject of this challenge team
	 * @param locale the locale of the language
	 */
	public void setSubject(String subject, Locale locale);

	/**
	 * Sets the localized subject of this challenge team in the language, and sets the default locale.
	 *
	 * @param subject the localized subject of this challenge team
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSubject(String subject, Locale locale, Locale defaultLocale);

	public void setSubjectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized subjects of this challenge team from the map of locales and localized subjects.
	 *
	 * @param subjectMap the locales and localized subjects of this challenge team
	 */
	public void setSubjectMap(Map<Locale, String> subjectMap);

	/**
	 * Sets the localized subjects of this challenge team from the map of locales and localized subjects, and sets the default locale.
	 *
	 * @param subjectMap the locales and localized subjects of this challenge team
	 * @param defaultLocale the default locale
	 */
	public void setSubjectMap(Map<Locale, String> subjectMap,
		Locale defaultLocale);

	/**
	 * Returns the paper name of this challenge team.
	 *
	 * @return the paper name of this challenge team
	 */
	public String getPaperName();

	/**
	 * Returns the localized paper name of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized paper name of this challenge team
	 */
	@AutoEscape
	public String getPaperName(Locale locale);

	/**
	 * Returns the localized paper name of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper name of this challenge team. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPaperName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized paper name of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized paper name of this challenge team
	 */
	@AutoEscape
	public String getPaperName(String languageId);

	/**
	 * Returns the localized paper name of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper name of this challenge team
	 */
	@AutoEscape
	public String getPaperName(String languageId, boolean useDefault);

	@AutoEscape
	public String getPaperNameCurrentLanguageId();

	@AutoEscape
	public String getPaperNameCurrentValue();

	/**
	 * Returns a map of the locales and localized paper names of this challenge team.
	 *
	 * @return the locales and localized paper names of this challenge team
	 */
	public Map<Locale, String> getPaperNameMap();

	/**
	 * Sets the paper name of this challenge team.
	 *
	 * @param paperName the paper name of this challenge team
	 */
	public void setPaperName(String paperName);

	/**
	 * Sets the localized paper name of this challenge team in the language.
	 *
	 * @param paperName the localized paper name of this challenge team
	 * @param locale the locale of the language
	 */
	public void setPaperName(String paperName, Locale locale);

	/**
	 * Sets the localized paper name of this challenge team in the language, and sets the default locale.
	 *
	 * @param paperName the localized paper name of this challenge team
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPaperName(String paperName, Locale locale,
		Locale defaultLocale);

	public void setPaperNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized paper names of this challenge team from the map of locales and localized paper names.
	 *
	 * @param paperNameMap the locales and localized paper names of this challenge team
	 */
	public void setPaperNameMap(Map<Locale, String> paperNameMap);

	/**
	 * Sets the localized paper names of this challenge team from the map of locales and localized paper names, and sets the default locale.
	 *
	 * @param paperNameMap the locales and localized paper names of this challenge team
	 * @param defaultLocale the default locale
	 */
	public void setPaperNameMap(Map<Locale, String> paperNameMap,
		Locale defaultLocale);

	/**
	 * Returns the paper abstract of this challenge team.
	 *
	 * @return the paper abstract of this challenge team
	 */
	public String getPaperAbstract();

	/**
	 * Returns the localized paper abstract of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized paper abstract of this challenge team
	 */
	@AutoEscape
	public String getPaperAbstract(Locale locale);

	/**
	 * Returns the localized paper abstract of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper abstract of this challenge team. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPaperAbstract(Locale locale, boolean useDefault);

	/**
	 * Returns the localized paper abstract of this challenge team in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized paper abstract of this challenge team
	 */
	@AutoEscape
	public String getPaperAbstract(String languageId);

	/**
	 * Returns the localized paper abstract of this challenge team in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper abstract of this challenge team
	 */
	@AutoEscape
	public String getPaperAbstract(String languageId, boolean useDefault);

	@AutoEscape
	public String getPaperAbstractCurrentLanguageId();

	@AutoEscape
	public String getPaperAbstractCurrentValue();

	/**
	 * Returns a map of the locales and localized paper abstracts of this challenge team.
	 *
	 * @return the locales and localized paper abstracts of this challenge team
	 */
	public Map<Locale, String> getPaperAbstractMap();

	/**
	 * Sets the paper abstract of this challenge team.
	 *
	 * @param paperAbstract the paper abstract of this challenge team
	 */
	public void setPaperAbstract(String paperAbstract);

	/**
	 * Sets the localized paper abstract of this challenge team in the language.
	 *
	 * @param paperAbstract the localized paper abstract of this challenge team
	 * @param locale the locale of the language
	 */
	public void setPaperAbstract(String paperAbstract, Locale locale);

	/**
	 * Sets the localized paper abstract of this challenge team in the language, and sets the default locale.
	 *
	 * @param paperAbstract the localized paper abstract of this challenge team
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPaperAbstract(String paperAbstract, Locale locale,
		Locale defaultLocale);

	public void setPaperAbstractCurrentLanguageId(String languageId);

	/**
	 * Sets the localized paper abstracts of this challenge team from the map of locales and localized paper abstracts.
	 *
	 * @param paperAbstractMap the locales and localized paper abstracts of this challenge team
	 */
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap);

	/**
	 * Sets the localized paper abstracts of this challenge team from the map of locales and localized paper abstracts, and sets the default locale.
	 *
	 * @param paperAbstractMap the locales and localized paper abstracts of this challenge team
	 * @param defaultLocale the default locale
	 */
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap,
		Locale defaultLocale);

	/**
	 * Returns the paper file name of this challenge team.
	 *
	 * @return the paper file name of this challenge team
	 */
	@AutoEscape
	public String getPaperFileName();

	/**
	 * Sets the paper file name of this challenge team.
	 *
	 * @param paperFileName the paper file name of this challenge team
	 */
	public void setPaperFileName(String paperFileName);

	/**
	 * Returns the paper submission day of this challenge team.
	 *
	 * @return the paper submission day of this challenge team
	 */
	public Date getPaperSubmissionDay();

	/**
	 * Sets the paper submission day of this challenge team.
	 *
	 * @param paperSubmissionDay the paper submission day of this challenge team
	 */
	public void setPaperSubmissionDay(Date paperSubmissionDay);

	/**
	 * Returns the paper modify day of this challenge team.
	 *
	 * @return the paper modify day of this challenge team
	 */
	public Date getPaperModifyDay();

	/**
	 * Sets the paper modify day of this challenge team.
	 *
	 * @param paperModifyDay the paper modify day of this challenge team
	 */
	public void setPaperModifyDay(Date paperModifyDay);

	/**
	 * Returns the paper status d o c of this challenge team.
	 *
	 * @return the paper status d o c of this challenge team
	 */
	public boolean getPaperStatusDOC();

	/**
	 * Returns <code>true</code> if this challenge team is paper status d o c.
	 *
	 * @return <code>true</code> if this challenge team is paper status d o c; <code>false</code> otherwise
	 */
	public boolean isPaperStatusDOC();

	/**
	 * Sets whether this challenge team is paper status d o c.
	 *
	 * @param paperStatusDOC the paper status d o c of this challenge team
	 */
	public void setPaperStatusDOC(boolean paperStatusDOC);

	/**
	 * Returns the paper p d f file name of this challenge team.
	 *
	 * @return the paper p d f file name of this challenge team
	 */
	@AutoEscape
	public String getPaperPDFFileName();

	/**
	 * Sets the paper p d f file name of this challenge team.
	 *
	 * @param paperPDFFileName the paper p d f file name of this challenge team
	 */
	public void setPaperPDFFileName(String paperPDFFileName);

	/**
	 * Returns the paper p d f submission day of this challenge team.
	 *
	 * @return the paper p d f submission day of this challenge team
	 */
	public Date getPaperPDFSubmissionDay();

	/**
	 * Sets the paper p d f submission day of this challenge team.
	 *
	 * @param paperPDFSubmissionDay the paper p d f submission day of this challenge team
	 */
	public void setPaperPDFSubmissionDay(Date paperPDFSubmissionDay);

	/**
	 * Returns the paper p d f modify day of this challenge team.
	 *
	 * @return the paper p d f modify day of this challenge team
	 */
	public Date getPaperPDFModifyDay();

	/**
	 * Sets the paper p d f modify day of this challenge team.
	 *
	 * @param paperPDFModifyDay the paper p d f modify day of this challenge team
	 */
	public void setPaperPDFModifyDay(Date paperPDFModifyDay);

	/**
	 * Returns the paper status p d f of this challenge team.
	 *
	 * @return the paper status p d f of this challenge team
	 */
	public boolean getPaperStatusPDF();

	/**
	 * Returns <code>true</code> if this challenge team is paper status p d f.
	 *
	 * @return <code>true</code> if this challenge team is paper status p d f; <code>false</code> otherwise
	 */
	public boolean isPaperStatusPDF();

	/**
	 * Sets whether this challenge team is paper status p d f.
	 *
	 * @param paperStatusPDF the paper status p d f of this challenge team
	 */
	public void setPaperStatusPDF(boolean paperStatusPDF);

	/**
	 * Returns the presentation name of this challenge team.
	 *
	 * @return the presentation name of this challenge team
	 */
	@AutoEscape
	public String getPresentationName();

	/**
	 * Sets the presentation name of this challenge team.
	 *
	 * @param presentationName the presentation name of this challenge team
	 */
	public void setPresentationName(String presentationName);

	/**
	 * Returns the presentation file name of this challenge team.
	 *
	 * @return the presentation file name of this challenge team
	 */
	@AutoEscape
	public String getPresentationFileName();

	/**
	 * Sets the presentation file name of this challenge team.
	 *
	 * @param presentationFileName the presentation file name of this challenge team
	 */
	public void setPresentationFileName(String presentationFileName);

	/**
	 * Returns the presentation submission day of this challenge team.
	 *
	 * @return the presentation submission day of this challenge team
	 */
	public Date getPresentationSubmissionDay();

	/**
	 * Sets the presentation submission day of this challenge team.
	 *
	 * @param presentationSubmissionDay the presentation submission day of this challenge team
	 */
	public void setPresentationSubmissionDay(Date presentationSubmissionDay);

	/**
	 * Returns the presentation modify day of this challenge team.
	 *
	 * @return the presentation modify day of this challenge team
	 */
	public Date getPresentationModifyDay();

	/**
	 * Sets the presentation modify day of this challenge team.
	 *
	 * @param presentationModifyDay the presentation modify day of this challenge team
	 */
	public void setPresentationModifyDay(Date presentationModifyDay);

	/**
	 * Returns the presentation status of this challenge team.
	 *
	 * @return the presentation status of this challenge team
	 */
	public boolean getPresentationStatus();

	/**
	 * Returns <code>true</code> if this challenge team is presentation status.
	 *
	 * @return <code>true</code> if this challenge team is presentation status; <code>false</code> otherwise
	 */
	public boolean isPresentationStatus();

	/**
	 * Sets whether this challenge team is presentation status.
	 *
	 * @param presentationStatus the presentation status of this challenge team
	 */
	public void setPresentationStatus(boolean presentationStatus);

	/**
	 * Returns the filepath of this challenge team.
	 *
	 * @return the filepath of this challenge team
	 */
	@AutoEscape
	public String getFilepath();

	/**
	 * Sets the filepath of this challenge team.
	 *
	 * @param filepath the filepath of this challenge team
	 */
	public void setFilepath(String filepath);

	/**
	 * Returns the aggrement of this challenge team.
	 *
	 * @return the aggrement of this challenge team
	 */
	public boolean getAggrement();

	/**
	 * Returns <code>true</code> if this challenge team is aggrement.
	 *
	 * @return <code>true</code> if this challenge team is aggrement; <code>false</code> otherwise
	 */
	public boolean isAggrement();

	/**
	 * Sets whether this challenge team is aggrement.
	 *
	 * @param aggrement the aggrement of this challenge team
	 */
	public void setAggrement(boolean aggrement);

	/**
	 * Returns the child challenge ID of this challenge team.
	 *
	 * @return the child challenge ID of this challenge team
	 */
	public long getChildChallengeId();

	/**
	 * Sets the child challenge ID of this challenge team.
	 *
	 * @param childChallengeId the child challenge ID of this challenge team
	 */
	public void setChildChallengeId(long childChallengeId);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this challenge team is approved.
	 *
	 * @return <code>true</code> if this challenge team is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this challenge team is denied.
	 *
	 * @return <code>true</code> if this challenge team is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this challenge team is a draft.
	 *
	 * @return <code>true</code> if this challenge team is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this challenge team is expired.
	 *
	 * @return <code>true</code> if this challenge team is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this challenge team is inactive.
	 *
	 * @return <code>true</code> if this challenge team is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this challenge team is incomplete.
	 *
	 * @return <code>true</code> if this challenge team is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this challenge team is pending.
	 *
	 * @return <code>true</code> if this challenge team is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this challenge team is scheduled.
	 *
	 * @return <code>true</code> if this challenge team is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		kisti.edison.challenge.model.ChallengeTeam challengeTeam);

	@Override
	public int hashCode();

	@Override
	public CacheModel<kisti.edison.challenge.model.ChallengeTeam> toCacheModel();

	@Override
	public kisti.edison.challenge.model.ChallengeTeam toEscapedModel();

	@Override
	public kisti.edison.challenge.model.ChallengeTeam toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}