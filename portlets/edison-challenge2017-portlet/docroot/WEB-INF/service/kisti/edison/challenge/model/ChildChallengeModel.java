/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedGroupedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ChildChallenge service. Represents a row in the &quot;challenge_ChildChallenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link kisti.edison.challenge.model.impl.ChildChallengeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link kisti.edison.challenge.model.impl.ChildChallengeImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChildChallenge
 * @see kisti.edison.challenge.model.impl.ChildChallengeImpl
 * @see kisti.edison.challenge.model.impl.ChildChallengeModelImpl
 * @generated
 */
public interface ChildChallengeModel extends BaseModel<ChildChallenge>,
	StagedGroupedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a child challenge model instance should use the {@link ChildChallenge} interface instead.
	 */

	/**
	 * Returns the primary key of this child challenge.
	 *
	 * @return the primary key of this child challenge
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this child challenge.
	 *
	 * @param primaryKey the primary key of this child challenge
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this child challenge.
	 *
	 * @return the uuid of this child challenge
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this child challenge.
	 *
	 * @param uuid the uuid of this child challenge
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the child challenge ID of this child challenge.
	 *
	 * @return the child challenge ID of this child challenge
	 */
	public long getChildChallengeId();

	/**
	 * Sets the child challenge ID of this child challenge.
	 *
	 * @param childChallengeId the child challenge ID of this child challenge
	 */
	public void setChildChallengeId(long childChallengeId);

	/**
	 * Returns the group ID of this child challenge.
	 *
	 * @return the group ID of this child challenge
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this child challenge.
	 *
	 * @param groupId the group ID of this child challenge
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this child challenge.
	 *
	 * @return the company ID of this child challenge
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this child challenge.
	 *
	 * @param companyId the company ID of this child challenge
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this child challenge.
	 *
	 * @return the user ID of this child challenge
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this child challenge.
	 *
	 * @param userId the user ID of this child challenge
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this child challenge.
	 *
	 * @return the user uuid of this child challenge
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this child challenge.
	 *
	 * @param userUuid the user uuid of this child challenge
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this child challenge.
	 *
	 * @return the user name of this child challenge
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this child challenge.
	 *
	 * @param userName the user name of this child challenge
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this child challenge.
	 *
	 * @return the create date of this child challenge
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this child challenge.
	 *
	 * @param createDate the create date of this child challenge
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this child challenge.
	 *
	 * @return the modified date of this child challenge
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this child challenge.
	 *
	 * @param modifiedDate the modified date of this child challenge
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this child challenge.
	 *
	 * @return the status of this child challenge
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this child challenge.
	 *
	 * @param status the status of this child challenge
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this child challenge.
	 *
	 * @return the status by user ID of this child challenge
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this child challenge.
	 *
	 * @param statusByUserId the status by user ID of this child challenge
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this child challenge.
	 *
	 * @return the status by user uuid of this child challenge
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this child challenge.
	 *
	 * @param statusByUserUuid the status by user uuid of this child challenge
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this child challenge.
	 *
	 * @return the status by user name of this child challenge
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this child challenge.
	 *
	 * @param statusByUserName the status by user name of this child challenge
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this child challenge.
	 *
	 * @return the status date of this child challenge
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this child challenge.
	 *
	 * @param statusDate the status date of this child challenge
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the number of this child challenge.
	 *
	 * @return the number of this child challenge
	 */
	public int getNumber();

	/**
	 * Sets the number of this child challenge.
	 *
	 * @param number the number of this child challenge
	 */
	public void setNumber(int number);

	/**
	 * Returns the presentation day of this child challenge.
	 *
	 * @return the presentation day of this child challenge
	 */
	public Date getPresentationDay();

	/**
	 * Sets the presentation day of this child challenge.
	 *
	 * @param presentationDay the presentation day of this child challenge
	 */
	public void setPresentationDay(Date presentationDay);

	/**
	 * Returns the paper start day of this child challenge.
	 *
	 * @return the paper start day of this child challenge
	 */
	public Date getPaperStartDay();

	/**
	 * Sets the paper start day of this child challenge.
	 *
	 * @param paperStartDay the paper start day of this child challenge
	 */
	public void setPaperStartDay(Date paperStartDay);

	/**
	 * Returns the paper end day of this child challenge.
	 *
	 * @return the paper end day of this child challenge
	 */
	public Date getPaperEndDay();

	/**
	 * Sets the paper end day of this child challenge.
	 *
	 * @param paperEndDay the paper end day of this child challenge
	 */
	public void setPaperEndDay(Date paperEndDay);

	/**
	 * Returns the evaluation day of this child challenge.
	 *
	 * @return the evaluation day of this child challenge
	 */
	public Date getEvaluationDay();

	/**
	 * Sets the evaluation day of this child challenge.
	 *
	 * @param evaluationDay the evaluation day of this child challenge
	 */
	public void setEvaluationDay(Date evaluationDay);

	/**
	 * Returns the challenge start day of this child challenge.
	 *
	 * @return the challenge start day of this child challenge
	 */
	public Date getChallengeStartDay();

	/**
	 * Sets the challenge start day of this child challenge.
	 *
	 * @param challengeStartDay the challenge start day of this child challenge
	 */
	public void setChallengeStartDay(Date challengeStartDay);

	/**
	 * Returns the challenge end day of this child challenge.
	 *
	 * @return the challenge end day of this child challenge
	 */
	public Date getChallengeEndDay();

	/**
	 * Sets the challenge end day of this child challenge.
	 *
	 * @param challengeEndDay the challenge end day of this child challenge
	 */
	public void setChallengeEndDay(Date challengeEndDay);

	/**
	 * Returns the challenge status of this child challenge.
	 *
	 * @return the challenge status of this child challenge
	 */
	@AutoEscape
	public String getChallengeStatus();

	/**
	 * Sets the challenge status of this child challenge.
	 *
	 * @param challengeStatus the challenge status of this child challenge
	 */
	public void setChallengeStatus(String challengeStatus);

	/**
	 * Returns the challenge ID of this child challenge.
	 *
	 * @return the challenge ID of this child challenge
	 */
	public long getChallengeId();

	/**
	 * Sets the challenge ID of this child challenge.
	 *
	 * @param challengeId the challenge ID of this child challenge
	 */
	public void setChallengeId(long challengeId);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this child challenge is approved.
	 *
	 * @return <code>true</code> if this child challenge is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this child challenge is denied.
	 *
	 * @return <code>true</code> if this child challenge is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this child challenge is a draft.
	 *
	 * @return <code>true</code> if this child challenge is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this child challenge is expired.
	 *
	 * @return <code>true</code> if this child challenge is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this child challenge is inactive.
	 *
	 * @return <code>true</code> if this child challenge is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this child challenge is incomplete.
	 *
	 * @return <code>true</code> if this child challenge is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this child challenge is pending.
	 *
	 * @return <code>true</code> if this child challenge is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this child challenge is scheduled.
	 *
	 * @return <code>true</code> if this child challenge is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		kisti.edison.challenge.model.ChildChallenge childChallenge);

	@Override
	public int hashCode();

	@Override
	public CacheModel<kisti.edison.challenge.model.ChildChallenge> toCacheModel();

	@Override
	public kisti.edison.challenge.model.ChildChallenge toEscapedModel();

	@Override
	public kisti.edison.challenge.model.ChildChallenge toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}