/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import kisti.edison.challenge.model.ChallengeEvaluation;
import kisti.edison.challenge.model.ChallengeEvaluationModel;
import kisti.edison.challenge.model.ChallengeEvaluationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ChallengeEvaluation service. Represents a row in the &quot;challenge_ChallengeEvaluation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link kisti.edison.challenge.model.ChallengeEvaluationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChallengeEvaluationImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChallengeEvaluationImpl
 * @see kisti.edison.challenge.model.ChallengeEvaluation
 * @see kisti.edison.challenge.model.ChallengeEvaluationModel
 * @generated
 */
@JSON(strict = true)
public class ChallengeEvaluationModelImpl extends BaseModelImpl<ChallengeEvaluation>
	implements ChallengeEvaluationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a challenge evaluation model instance should use the {@link kisti.edison.challenge.model.ChallengeEvaluation} interface instead.
	 */
	public static final String TABLE_NAME = "challenge_ChallengeEvaluation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "challengeEvaluationId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "assessmentItem", Types.VARCHAR },
			{ "distribution", Types.DOUBLE },
			{ "score", Types.DOUBLE },
			{ "challengeTeamId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table challenge_ChallengeEvaluation (uuid_ VARCHAR(75) null,challengeEvaluationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,assessmentItem STRING null,distribution DOUBLE,score DOUBLE,challengeTeamId LONG)";
	public static final String TABLE_SQL_DROP = "drop table challenge_ChallengeEvaluation";
	public static final String ORDER_BY_JPQL = " ORDER BY challengeEvaluation.challengeEvaluationId ASC, challengeEvaluation.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY challenge_ChallengeEvaluation.challengeEvaluationId ASC, challenge_ChallengeEvaluation.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.kisti.edison.challenge.model.ChallengeEvaluation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.kisti.edison.challenge.model.ChallengeEvaluation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.kisti.edison.challenge.model.ChallengeEvaluation"),
			true);
	public static long CHALLENGETEAMID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static long CHALLENGEEVALUATIONID_COLUMN_BITMASK = 16L;
	public static long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ChallengeEvaluation toModel(ChallengeEvaluationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChallengeEvaluation model = new ChallengeEvaluationImpl();

		model.setUuid(soapModel.getUuid());
		model.setChallengeEvaluationId(soapModel.getChallengeEvaluationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setAssessmentItem(soapModel.getAssessmentItem());
		model.setDistribution(soapModel.getDistribution());
		model.setScore(soapModel.getScore());
		model.setChallengeTeamId(soapModel.getChallengeTeamId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ChallengeEvaluation> toModels(
		ChallengeEvaluationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChallengeEvaluation> models = new ArrayList<ChallengeEvaluation>(soapModels.length);

		for (ChallengeEvaluationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.kisti.edison.challenge.model.ChallengeEvaluation"));

	public ChallengeEvaluationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _challengeEvaluationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChallengeEvaluationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _challengeEvaluationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChallengeEvaluation.class;
	}

	@Override
	public String getModelClassName() {
		return ChallengeEvaluation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("challengeEvaluationId", getChallengeEvaluationId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("assessmentItem", getAssessmentItem());
		attributes.put("distribution", getDistribution());
		attributes.put("score", getScore());
		attributes.put("challengeTeamId", getChallengeTeamId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long challengeEvaluationId = (Long)attributes.get(
				"challengeEvaluationId");

		if (challengeEvaluationId != null) {
			setChallengeEvaluationId(challengeEvaluationId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String assessmentItem = (String)attributes.get("assessmentItem");

		if (assessmentItem != null) {
			setAssessmentItem(assessmentItem);
		}

		Double distribution = (Double)attributes.get("distribution");

		if (distribution != null) {
			setDistribution(distribution);
		}

		Double score = (Double)attributes.get("score");

		if (score != null) {
			setScore(score);
		}

		Long challengeTeamId = (Long)attributes.get("challengeTeamId");

		if (challengeTeamId != null) {
			setChallengeTeamId(challengeTeamId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getChallengeEvaluationId() {
		return _challengeEvaluationId;
	}

	@Override
	public void setChallengeEvaluationId(long challengeEvaluationId) {
		_columnBitmask = -1L;

		_challengeEvaluationId = challengeEvaluationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getAssessmentItem() {
		if (_assessmentItem == null) {
			return StringPool.BLANK;
		}
		else {
			return _assessmentItem;
		}
	}

	@Override
	public String getAssessmentItem(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAssessmentItem(languageId);
	}

	@Override
	public String getAssessmentItem(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAssessmentItem(languageId, useDefault);
	}

	@Override
	public String getAssessmentItem(String languageId) {
		return LocalizationUtil.getLocalization(getAssessmentItem(), languageId);
	}

	@Override
	public String getAssessmentItem(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getAssessmentItem(),
			languageId, useDefault);
	}

	@Override
	public String getAssessmentItemCurrentLanguageId() {
		return _assessmentItemCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAssessmentItemCurrentValue() {
		Locale locale = getLocale(_assessmentItemCurrentLanguageId);

		return getAssessmentItem(locale);
	}

	@Override
	public Map<Locale, String> getAssessmentItemMap() {
		return LocalizationUtil.getLocalizationMap(getAssessmentItem());
	}

	@Override
	public void setAssessmentItem(String assessmentItem) {
		_assessmentItem = assessmentItem;
	}

	@Override
	public void setAssessmentItem(String assessmentItem, Locale locale) {
		setAssessmentItem(assessmentItem, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAssessmentItem(String assessmentItem, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(assessmentItem)) {
			setAssessmentItem(LocalizationUtil.updateLocalization(
					getAssessmentItem(), "AssessmentItem", assessmentItem,
					languageId, defaultLanguageId));
		}
		else {
			setAssessmentItem(LocalizationUtil.removeLocalization(
					getAssessmentItem(), "AssessmentItem", languageId));
		}
	}

	@Override
	public void setAssessmentItemCurrentLanguageId(String languageId) {
		_assessmentItemCurrentLanguageId = languageId;
	}

	@Override
	public void setAssessmentItemMap(Map<Locale, String> assessmentItemMap) {
		setAssessmentItemMap(assessmentItemMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAssessmentItemMap(Map<Locale, String> assessmentItemMap,
		Locale defaultLocale) {
		if (assessmentItemMap == null) {
			return;
		}

		setAssessmentItem(LocalizationUtil.updateLocalization(
				assessmentItemMap, getAssessmentItem(), "AssessmentItem",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public double getDistribution() {
		return _distribution;
	}

	@Override
	public void setDistribution(double distribution) {
		_distribution = distribution;
	}

	@JSON
	@Override
	public double getScore() {
		return _score;
	}

	@Override
	public void setScore(double score) {
		_score = score;
	}

	@JSON
	@Override
	public long getChallengeTeamId() {
		return _challengeTeamId;
	}

	@Override
	public void setChallengeTeamId(long challengeTeamId) {
		_columnBitmask |= CHALLENGETEAMID_COLUMN_BITMASK;

		if (!_setOriginalChallengeTeamId) {
			_setOriginalChallengeTeamId = true;

			_originalChallengeTeamId = _challengeTeamId;
		}

		_challengeTeamId = challengeTeamId;
	}

	public long getOriginalChallengeTeamId() {
		return _originalChallengeTeamId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ChallengeEvaluation.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ChallengeEvaluation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> assessmentItemMap = getAssessmentItemMap();

		for (Map.Entry<Locale, String> entry : assessmentItemMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getAssessmentItem();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String assessmentItem = getAssessmentItem(defaultLocale);

		if (Validator.isNull(assessmentItem)) {
			setAssessmentItem(getAssessmentItem(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setAssessmentItem(getAssessmentItem(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ChallengeEvaluation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChallengeEvaluation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChallengeEvaluationImpl challengeEvaluationImpl = new ChallengeEvaluationImpl();

		challengeEvaluationImpl.setUuid(getUuid());
		challengeEvaluationImpl.setChallengeEvaluationId(getChallengeEvaluationId());
		challengeEvaluationImpl.setGroupId(getGroupId());
		challengeEvaluationImpl.setCompanyId(getCompanyId());
		challengeEvaluationImpl.setUserId(getUserId());
		challengeEvaluationImpl.setUserName(getUserName());
		challengeEvaluationImpl.setCreateDate(getCreateDate());
		challengeEvaluationImpl.setModifiedDate(getModifiedDate());
		challengeEvaluationImpl.setStatus(getStatus());
		challengeEvaluationImpl.setStatusByUserId(getStatusByUserId());
		challengeEvaluationImpl.setStatusByUserName(getStatusByUserName());
		challengeEvaluationImpl.setStatusDate(getStatusDate());
		challengeEvaluationImpl.setAssessmentItem(getAssessmentItem());
		challengeEvaluationImpl.setDistribution(getDistribution());
		challengeEvaluationImpl.setScore(getScore());
		challengeEvaluationImpl.setChallengeTeamId(getChallengeTeamId());

		challengeEvaluationImpl.resetOriginalValues();

		return challengeEvaluationImpl;
	}

	@Override
	public int compareTo(ChallengeEvaluation challengeEvaluation) {
		int value = 0;

		if (getChallengeEvaluationId() < challengeEvaluation.getChallengeEvaluationId()) {
			value = -1;
		}
		else if (getChallengeEvaluationId() > challengeEvaluation.getChallengeEvaluationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(),
				challengeEvaluation.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChallengeEvaluation)) {
			return false;
		}

		ChallengeEvaluation challengeEvaluation = (ChallengeEvaluation)obj;

		long primaryKey = challengeEvaluation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ChallengeEvaluationModelImpl challengeEvaluationModelImpl = this;

		challengeEvaluationModelImpl._originalUuid = challengeEvaluationModelImpl._uuid;

		challengeEvaluationModelImpl._originalGroupId = challengeEvaluationModelImpl._groupId;

		challengeEvaluationModelImpl._setOriginalGroupId = false;

		challengeEvaluationModelImpl._originalCompanyId = challengeEvaluationModelImpl._companyId;

		challengeEvaluationModelImpl._setOriginalCompanyId = false;

		challengeEvaluationModelImpl._originalChallengeTeamId = challengeEvaluationModelImpl._challengeTeamId;

		challengeEvaluationModelImpl._setOriginalChallengeTeamId = false;

		challengeEvaluationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChallengeEvaluation> toCacheModel() {
		ChallengeEvaluationCacheModel challengeEvaluationCacheModel = new ChallengeEvaluationCacheModel();

		challengeEvaluationCacheModel.uuid = getUuid();

		String uuid = challengeEvaluationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			challengeEvaluationCacheModel.uuid = null;
		}

		challengeEvaluationCacheModel.challengeEvaluationId = getChallengeEvaluationId();

		challengeEvaluationCacheModel.groupId = getGroupId();

		challengeEvaluationCacheModel.companyId = getCompanyId();

		challengeEvaluationCacheModel.userId = getUserId();

		challengeEvaluationCacheModel.userName = getUserName();

		String userName = challengeEvaluationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			challengeEvaluationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			challengeEvaluationCacheModel.createDate = createDate.getTime();
		}
		else {
			challengeEvaluationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			challengeEvaluationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			challengeEvaluationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		challengeEvaluationCacheModel.status = getStatus();

		challengeEvaluationCacheModel.statusByUserId = getStatusByUserId();

		challengeEvaluationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = challengeEvaluationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			challengeEvaluationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			challengeEvaluationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			challengeEvaluationCacheModel.statusDate = Long.MIN_VALUE;
		}

		challengeEvaluationCacheModel.assessmentItem = getAssessmentItem();

		String assessmentItem = challengeEvaluationCacheModel.assessmentItem;

		if ((assessmentItem != null) && (assessmentItem.length() == 0)) {
			challengeEvaluationCacheModel.assessmentItem = null;
		}

		challengeEvaluationCacheModel.distribution = getDistribution();

		challengeEvaluationCacheModel.score = getScore();

		challengeEvaluationCacheModel.challengeTeamId = getChallengeTeamId();

		return challengeEvaluationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", challengeEvaluationId=");
		sb.append(getChallengeEvaluationId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", assessmentItem=");
		sb.append(getAssessmentItem());
		sb.append(", distribution=");
		sb.append(getDistribution());
		sb.append(", score=");
		sb.append(getScore());
		sb.append(", challengeTeamId=");
		sb.append(getChallengeTeamId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("kisti.edison.challenge.model.ChallengeEvaluation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeEvaluationId</column-name><column-value><![CDATA[");
		sb.append(getChallengeEvaluationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessmentItem</column-name><column-value><![CDATA[");
		sb.append(getAssessmentItem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distribution</column-name><column-value><![CDATA[");
		sb.append(getDistribution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeTeamId</column-name><column-value><![CDATA[");
		sb.append(getChallengeTeamId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChallengeEvaluation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChallengeEvaluation.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _challengeEvaluationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _assessmentItem;
	private String _assessmentItemCurrentLanguageId;
	private double _distribution;
	private double _score;
	private long _challengeTeamId;
	private long _originalChallengeTeamId;
	private boolean _setOriginalChallengeTeamId;
	private long _columnBitmask;
	private ChallengeEvaluation _escapedModel;
}