/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import kisti.edison.challenge.model.ChallengeTeam;
import kisti.edison.challenge.model.ChallengeTeamModel;
import kisti.edison.challenge.model.ChallengeTeamSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ChallengeTeam service. Represents a row in the &quot;challenge_ChallengeTeam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link kisti.edison.challenge.model.ChallengeTeamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChallengeTeamImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChallengeTeamImpl
 * @see kisti.edison.challenge.model.ChallengeTeam
 * @see kisti.edison.challenge.model.ChallengeTeamModel
 * @generated
 */
@JSON(strict = true)
public class ChallengeTeamModelImpl extends BaseModelImpl<ChallengeTeam>
	implements ChallengeTeamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a challenge team model instance should use the {@link kisti.edison.challenge.model.ChallengeTeam} interface instead.
	 */
	public static final String TABLE_NAME = "challenge_ChallengeTeam";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "challengeTeamId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "teamName", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "paperName", Types.VARCHAR },
			{ "paperAbstract", Types.VARCHAR },
			{ "paperFileName", Types.VARCHAR },
			{ "paperSubmissionDay", Types.TIMESTAMP },
			{ "paperModifyDay", Types.TIMESTAMP },
			{ "paperStatusDOC", Types.BOOLEAN },
			{ "paperPDFFileName", Types.VARCHAR },
			{ "paperPDFSubmissionDay", Types.TIMESTAMP },
			{ "paperPDFModifyDay", Types.TIMESTAMP },
			{ "paperStatusPDF", Types.BOOLEAN },
			{ "presentationName", Types.VARCHAR },
			{ "presentationFileName", Types.VARCHAR },
			{ "presentationSubmissionDay", Types.TIMESTAMP },
			{ "presentationModifyDay", Types.TIMESTAMP },
			{ "presentationStatus", Types.BOOLEAN },
			{ "filepath", Types.VARCHAR },
			{ "cpuTime", Types.DOUBLE },
			{ "appList", Types.VARCHAR },
			{ "simulationNumber", Types.INTEGER },
			{ "aggrement", Types.BOOLEAN },
			{ "childChallengeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table challenge_ChallengeTeam (uuid_ VARCHAR(75) null,challengeTeamId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,teamName VARCHAR(75) null,subject STRING null,paperName STRING null,paperAbstract STRING null,paperFileName VARCHAR(2000) null,paperSubmissionDay DATE null,paperModifyDay DATE null,paperStatusDOC BOOLEAN,paperPDFFileName VARCHAR(75) null,paperPDFSubmissionDay DATE null,paperPDFModifyDay DATE null,paperStatusPDF BOOLEAN,presentationName VARCHAR(2000) null,presentationFileName VARCHAR(2000) null,presentationSubmissionDay DATE null,presentationModifyDay DATE null,presentationStatus BOOLEAN,filepath TEXT null,cpuTime DOUBLE,appList VARCHAR(75) null,simulationNumber INTEGER,aggrement BOOLEAN,childChallengeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table challenge_ChallengeTeam";
	public static final String ORDER_BY_JPQL = " ORDER BY challengeTeam.challengeTeamId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY challenge_ChallengeTeam.challengeTeamId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.kisti.edison.challenge.model.ChallengeTeam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.kisti.edison.challenge.model.ChallengeTeam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.kisti.edison.challenge.model.ChallengeTeam"),
			true);
	public static long CHILDCHALLENGEID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long CHALLENGETEAMID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ChallengeTeam toModel(ChallengeTeamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChallengeTeam model = new ChallengeTeamImpl();

		model.setUuid(soapModel.getUuid());
		model.setChallengeTeamId(soapModel.getChallengeTeamId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTeamName(soapModel.getTeamName());
		model.setSubject(soapModel.getSubject());
		model.setPaperName(soapModel.getPaperName());
		model.setPaperAbstract(soapModel.getPaperAbstract());
		model.setPaperFileName(soapModel.getPaperFileName());
		model.setPaperSubmissionDay(soapModel.getPaperSubmissionDay());
		model.setPaperModifyDay(soapModel.getPaperModifyDay());
		model.setPaperStatusDOC(soapModel.getPaperStatusDOC());
		model.setPaperPDFFileName(soapModel.getPaperPDFFileName());
		model.setPaperPDFSubmissionDay(soapModel.getPaperPDFSubmissionDay());
		model.setPaperPDFModifyDay(soapModel.getPaperPDFModifyDay());
		model.setPaperStatusPDF(soapModel.getPaperStatusPDF());
		model.setPresentationName(soapModel.getPresentationName());
		model.setPresentationFileName(soapModel.getPresentationFileName());
		model.setPresentationSubmissionDay(soapModel.getPresentationSubmissionDay());
		model.setPresentationModifyDay(soapModel.getPresentationModifyDay());
		model.setPresentationStatus(soapModel.getPresentationStatus());
		model.setFilepath(soapModel.getFilepath());
		model.setCpuTime(soapModel.getCpuTime());
		model.setAppList(soapModel.getAppList());
		model.setSimulationNumber(soapModel.getSimulationNumber());
		model.setAggrement(soapModel.getAggrement());
		model.setChildChallengeId(soapModel.getChildChallengeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ChallengeTeam> toModels(ChallengeTeamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChallengeTeam> models = new ArrayList<ChallengeTeam>(soapModels.length);

		for (ChallengeTeamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.kisti.edison.challenge.model.ChallengeTeam"));

	public ChallengeTeamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _challengeTeamId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChallengeTeamId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _challengeTeamId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChallengeTeam.class;
	}

	@Override
	public String getModelClassName() {
		return ChallengeTeam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("challengeTeamId", getChallengeTeamId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("teamName", getTeamName());
		attributes.put("subject", getSubject());
		attributes.put("paperName", getPaperName());
		attributes.put("paperAbstract", getPaperAbstract());
		attributes.put("paperFileName", getPaperFileName());
		attributes.put("paperSubmissionDay", getPaperSubmissionDay());
		attributes.put("paperModifyDay", getPaperModifyDay());
		attributes.put("paperStatusDOC", getPaperStatusDOC());
		attributes.put("paperPDFFileName", getPaperPDFFileName());
		attributes.put("paperPDFSubmissionDay", getPaperPDFSubmissionDay());
		attributes.put("paperPDFModifyDay", getPaperPDFModifyDay());
		attributes.put("paperStatusPDF", getPaperStatusPDF());
		attributes.put("presentationName", getPresentationName());
		attributes.put("presentationFileName", getPresentationFileName());
		attributes.put("presentationSubmissionDay",
			getPresentationSubmissionDay());
		attributes.put("presentationModifyDay", getPresentationModifyDay());
		attributes.put("presentationStatus", getPresentationStatus());
		attributes.put("filepath", getFilepath());
		attributes.put("cpuTime", getCpuTime());
		attributes.put("appList", getAppList());
		attributes.put("simulationNumber", getSimulationNumber());
		attributes.put("aggrement", getAggrement());
		attributes.put("childChallengeId", getChildChallengeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long challengeTeamId = (Long)attributes.get("challengeTeamId");

		if (challengeTeamId != null) {
			setChallengeTeamId(challengeTeamId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String teamName = (String)attributes.get("teamName");

		if (teamName != null) {
			setTeamName(teamName);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String paperName = (String)attributes.get("paperName");

		if (paperName != null) {
			setPaperName(paperName);
		}

		String paperAbstract = (String)attributes.get("paperAbstract");

		if (paperAbstract != null) {
			setPaperAbstract(paperAbstract);
		}

		String paperFileName = (String)attributes.get("paperFileName");

		if (paperFileName != null) {
			setPaperFileName(paperFileName);
		}

		Date paperSubmissionDay = (Date)attributes.get("paperSubmissionDay");

		if (paperSubmissionDay != null) {
			setPaperSubmissionDay(paperSubmissionDay);
		}

		Date paperModifyDay = (Date)attributes.get("paperModifyDay");

		if (paperModifyDay != null) {
			setPaperModifyDay(paperModifyDay);
		}

		Boolean paperStatusDOC = (Boolean)attributes.get("paperStatusDOC");

		if (paperStatusDOC != null) {
			setPaperStatusDOC(paperStatusDOC);
		}

		String paperPDFFileName = (String)attributes.get("paperPDFFileName");

		if (paperPDFFileName != null) {
			setPaperPDFFileName(paperPDFFileName);
		}

		Date paperPDFSubmissionDay = (Date)attributes.get(
				"paperPDFSubmissionDay");

		if (paperPDFSubmissionDay != null) {
			setPaperPDFSubmissionDay(paperPDFSubmissionDay);
		}

		Date paperPDFModifyDay = (Date)attributes.get("paperPDFModifyDay");

		if (paperPDFModifyDay != null) {
			setPaperPDFModifyDay(paperPDFModifyDay);
		}

		Boolean paperStatusPDF = (Boolean)attributes.get("paperStatusPDF");

		if (paperStatusPDF != null) {
			setPaperStatusPDF(paperStatusPDF);
		}

		String presentationName = (String)attributes.get("presentationName");

		if (presentationName != null) {
			setPresentationName(presentationName);
		}

		String presentationFileName = (String)attributes.get(
				"presentationFileName");

		if (presentationFileName != null) {
			setPresentationFileName(presentationFileName);
		}

		Date presentationSubmissionDay = (Date)attributes.get(
				"presentationSubmissionDay");

		if (presentationSubmissionDay != null) {
			setPresentationSubmissionDay(presentationSubmissionDay);
		}

		Date presentationModifyDay = (Date)attributes.get(
				"presentationModifyDay");

		if (presentationModifyDay != null) {
			setPresentationModifyDay(presentationModifyDay);
		}

		Boolean presentationStatus = (Boolean)attributes.get(
				"presentationStatus");

		if (presentationStatus != null) {
			setPresentationStatus(presentationStatus);
		}

		String filepath = (String)attributes.get("filepath");

		if (filepath != null) {
			setFilepath(filepath);
		}

		Double cpuTime = (Double)attributes.get("cpuTime");

		if (cpuTime != null) {
			setCpuTime(cpuTime);
		}

		String appList = (String)attributes.get("appList");

		if (appList != null) {
			setAppList(appList);
		}

		Integer simulationNumber = (Integer)attributes.get("simulationNumber");

		if (simulationNumber != null) {
			setSimulationNumber(simulationNumber);
		}

		Boolean aggrement = (Boolean)attributes.get("aggrement");

		if (aggrement != null) {
			setAggrement(aggrement);
		}

		Long childChallengeId = (Long)attributes.get("childChallengeId");

		if (childChallengeId != null) {
			setChildChallengeId(childChallengeId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getChallengeTeamId() {
		return _challengeTeamId;
	}

	@Override
	public void setChallengeTeamId(long challengeTeamId) {
		_columnBitmask = -1L;

		_challengeTeamId = challengeTeamId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTeamName() {
		if (_teamName == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamName;
		}
	}

	@Override
	public void setTeamName(String teamName) {
		_teamName = teamName;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public String getSubject(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubject(languageId);
	}

	@Override
	public String getSubject(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubject(languageId, useDefault);
	}

	@Override
	public String getSubject(String languageId) {
		return LocalizationUtil.getLocalization(getSubject(), languageId);
	}

	@Override
	public String getSubject(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSubject(), languageId,
			useDefault);
	}

	@Override
	public String getSubjectCurrentLanguageId() {
		return _subjectCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubjectCurrentValue() {
		Locale locale = getLocale(_subjectCurrentLanguageId);

		return getSubject(locale);
	}

	@Override
	public Map<Locale, String> getSubjectMap() {
		return LocalizationUtil.getLocalizationMap(getSubject());
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public void setSubject(String subject, Locale locale) {
		setSubject(subject, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubject(String subject, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subject)) {
			setSubject(LocalizationUtil.updateLocalization(getSubject(),
					"Subject", subject, languageId, defaultLanguageId));
		}
		else {
			setSubject(LocalizationUtil.removeLocalization(getSubject(),
					"Subject", languageId));
		}
	}

	@Override
	public void setSubjectCurrentLanguageId(String languageId) {
		_subjectCurrentLanguageId = languageId;
	}

	@Override
	public void setSubjectMap(Map<Locale, String> subjectMap) {
		setSubjectMap(subjectMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubjectMap(Map<Locale, String> subjectMap,
		Locale defaultLocale) {
		if (subjectMap == null) {
			return;
		}

		setSubject(LocalizationUtil.updateLocalization(subjectMap,
				getSubject(), "Subject", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaperName() {
		if (_paperName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperName;
		}
	}

	@Override
	public String getPaperName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperName(languageId);
	}

	@Override
	public String getPaperName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperName(languageId, useDefault);
	}

	@Override
	public String getPaperName(String languageId) {
		return LocalizationUtil.getLocalization(getPaperName(), languageId);
	}

	@Override
	public String getPaperName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPaperName(), languageId,
			useDefault);
	}

	@Override
	public String getPaperNameCurrentLanguageId() {
		return _paperNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPaperNameCurrentValue() {
		Locale locale = getLocale(_paperNameCurrentLanguageId);

		return getPaperName(locale);
	}

	@Override
	public Map<Locale, String> getPaperNameMap() {
		return LocalizationUtil.getLocalizationMap(getPaperName());
	}

	@Override
	public void setPaperName(String paperName) {
		_paperName = paperName;
	}

	@Override
	public void setPaperName(String paperName, Locale locale) {
		setPaperName(paperName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPaperName(String paperName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(paperName)) {
			setPaperName(LocalizationUtil.updateLocalization(getPaperName(),
					"PaperName", paperName, languageId, defaultLanguageId));
		}
		else {
			setPaperName(LocalizationUtil.removeLocalization(getPaperName(),
					"PaperName", languageId));
		}
	}

	@Override
	public void setPaperNameCurrentLanguageId(String languageId) {
		_paperNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPaperNameMap(Map<Locale, String> paperNameMap) {
		setPaperNameMap(paperNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPaperNameMap(Map<Locale, String> paperNameMap,
		Locale defaultLocale) {
		if (paperNameMap == null) {
			return;
		}

		setPaperName(LocalizationUtil.updateLocalization(paperNameMap,
				getPaperName(), "PaperName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaperAbstract() {
		if (_paperAbstract == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperAbstract;
		}
	}

	@Override
	public String getPaperAbstract(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperAbstract(languageId);
	}

	@Override
	public String getPaperAbstract(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperAbstract(languageId, useDefault);
	}

	@Override
	public String getPaperAbstract(String languageId) {
		return LocalizationUtil.getLocalization(getPaperAbstract(), languageId);
	}

	@Override
	public String getPaperAbstract(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPaperAbstract(), languageId,
			useDefault);
	}

	@Override
	public String getPaperAbstractCurrentLanguageId() {
		return _paperAbstractCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPaperAbstractCurrentValue() {
		Locale locale = getLocale(_paperAbstractCurrentLanguageId);

		return getPaperAbstract(locale);
	}

	@Override
	public Map<Locale, String> getPaperAbstractMap() {
		return LocalizationUtil.getLocalizationMap(getPaperAbstract());
	}

	@Override
	public void setPaperAbstract(String paperAbstract) {
		_paperAbstract = paperAbstract;
	}

	@Override
	public void setPaperAbstract(String paperAbstract, Locale locale) {
		setPaperAbstract(paperAbstract, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPaperAbstract(String paperAbstract, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(paperAbstract)) {
			setPaperAbstract(LocalizationUtil.updateLocalization(
					getPaperAbstract(), "PaperAbstract", paperAbstract,
					languageId, defaultLanguageId));
		}
		else {
			setPaperAbstract(LocalizationUtil.removeLocalization(
					getPaperAbstract(), "PaperAbstract", languageId));
		}
	}

	@Override
	public void setPaperAbstractCurrentLanguageId(String languageId) {
		_paperAbstractCurrentLanguageId = languageId;
	}

	@Override
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap) {
		setPaperAbstractMap(paperAbstractMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap,
		Locale defaultLocale) {
		if (paperAbstractMap == null) {
			return;
		}

		setPaperAbstract(LocalizationUtil.updateLocalization(paperAbstractMap,
				getPaperAbstract(), "PaperAbstract",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaperFileName() {
		if (_paperFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperFileName;
		}
	}

	@Override
	public void setPaperFileName(String paperFileName) {
		_paperFileName = paperFileName;
	}

	@JSON
	@Override
	public Date getPaperSubmissionDay() {
		return _paperSubmissionDay;
	}

	@Override
	public void setPaperSubmissionDay(Date paperSubmissionDay) {
		_paperSubmissionDay = paperSubmissionDay;
	}

	@JSON
	@Override
	public Date getPaperModifyDay() {
		return _paperModifyDay;
	}

	@Override
	public void setPaperModifyDay(Date paperModifyDay) {
		_paperModifyDay = paperModifyDay;
	}

	@JSON
	@Override
	public boolean getPaperStatusDOC() {
		return _paperStatusDOC;
	}

	@Override
	public boolean isPaperStatusDOC() {
		return _paperStatusDOC;
	}

	@Override
	public void setPaperStatusDOC(boolean paperStatusDOC) {
		_paperStatusDOC = paperStatusDOC;
	}

	@JSON
	@Override
	public String getPaperPDFFileName() {
		if (_paperPDFFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperPDFFileName;
		}
	}

	@Override
	public void setPaperPDFFileName(String paperPDFFileName) {
		_paperPDFFileName = paperPDFFileName;
	}

	@JSON
	@Override
	public Date getPaperPDFSubmissionDay() {
		return _paperPDFSubmissionDay;
	}

	@Override
	public void setPaperPDFSubmissionDay(Date paperPDFSubmissionDay) {
		_paperPDFSubmissionDay = paperPDFSubmissionDay;
	}

	@JSON
	@Override
	public Date getPaperPDFModifyDay() {
		return _paperPDFModifyDay;
	}

	@Override
	public void setPaperPDFModifyDay(Date paperPDFModifyDay) {
		_paperPDFModifyDay = paperPDFModifyDay;
	}

	@JSON
	@Override
	public boolean getPaperStatusPDF() {
		return _paperStatusPDF;
	}

	@Override
	public boolean isPaperStatusPDF() {
		return _paperStatusPDF;
	}

	@Override
	public void setPaperStatusPDF(boolean paperStatusPDF) {
		_paperStatusPDF = paperStatusPDF;
	}

	@JSON
	@Override
	public String getPresentationName() {
		if (_presentationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _presentationName;
		}
	}

	@Override
	public void setPresentationName(String presentationName) {
		_presentationName = presentationName;
	}

	@JSON
	@Override
	public String getPresentationFileName() {
		if (_presentationFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _presentationFileName;
		}
	}

	@Override
	public void setPresentationFileName(String presentationFileName) {
		_presentationFileName = presentationFileName;
	}

	@JSON
	@Override
	public Date getPresentationSubmissionDay() {
		return _presentationSubmissionDay;
	}

	@Override
	public void setPresentationSubmissionDay(Date presentationSubmissionDay) {
		_presentationSubmissionDay = presentationSubmissionDay;
	}

	@JSON
	@Override
	public Date getPresentationModifyDay() {
		return _presentationModifyDay;
	}

	@Override
	public void setPresentationModifyDay(Date presentationModifyDay) {
		_presentationModifyDay = presentationModifyDay;
	}

	@JSON
	@Override
	public boolean getPresentationStatus() {
		return _presentationStatus;
	}

	@Override
	public boolean isPresentationStatus() {
		return _presentationStatus;
	}

	@Override
	public void setPresentationStatus(boolean presentationStatus) {
		_presentationStatus = presentationStatus;
	}

	@JSON
	@Override
	public String getFilepath() {
		if (_filepath == null) {
			return StringPool.BLANK;
		}
		else {
			return _filepath;
		}
	}

	@Override
	public void setFilepath(String filepath) {
		_filepath = filepath;
	}

	@JSON
	@Override
	public double getCpuTime() {
		return _cpuTime;
	}

	@Override
	public void setCpuTime(double cpuTime) {
		_cpuTime = cpuTime;
	}

	@JSON
	@Override
	public String getAppList() {
		if (_appList == null) {
			return StringPool.BLANK;
		}
		else {
			return _appList;
		}
	}

	@Override
	public void setAppList(String appList) {
		_appList = appList;
	}

	@JSON
	@Override
	public int getSimulationNumber() {
		return _simulationNumber;
	}

	@Override
	public void setSimulationNumber(int simulationNumber) {
		_simulationNumber = simulationNumber;
	}

	@JSON
	@Override
	public boolean getAggrement() {
		return _aggrement;
	}

	@Override
	public boolean isAggrement() {
		return _aggrement;
	}

	@Override
	public void setAggrement(boolean aggrement) {
		_aggrement = aggrement;
	}

	@JSON
	@Override
	public long getChildChallengeId() {
		return _childChallengeId;
	}

	@Override
	public void setChildChallengeId(long childChallengeId) {
		_columnBitmask |= CHILDCHALLENGEID_COLUMN_BITMASK;

		if (!_setOriginalChildChallengeId) {
			_setOriginalChildChallengeId = true;

			_originalChildChallengeId = _childChallengeId;
		}

		_childChallengeId = childChallengeId;
	}

	public long getOriginalChildChallengeId() {
		return _originalChildChallengeId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ChallengeTeam.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ChallengeTeam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> subjectMap = getSubjectMap();

		for (Map.Entry<Locale, String> entry : subjectMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> paperNameMap = getPaperNameMap();

		for (Map.Entry<Locale, String> entry : paperNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> paperAbstractMap = getPaperAbstractMap();

		for (Map.Entry<Locale, String> entry : paperAbstractMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSubject();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String subject = getSubject(defaultLocale);

		if (Validator.isNull(subject)) {
			setSubject(getSubject(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubject(getSubject(defaultLocale), defaultLocale, defaultLocale);
		}

		String paperName = getPaperName(defaultLocale);

		if (Validator.isNull(paperName)) {
			setPaperName(getPaperName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPaperName(getPaperName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String paperAbstract = getPaperAbstract(defaultLocale);

		if (Validator.isNull(paperAbstract)) {
			setPaperAbstract(getPaperAbstract(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setPaperAbstract(getPaperAbstract(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ChallengeTeam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChallengeTeam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChallengeTeamImpl challengeTeamImpl = new ChallengeTeamImpl();

		challengeTeamImpl.setUuid(getUuid());
		challengeTeamImpl.setChallengeTeamId(getChallengeTeamId());
		challengeTeamImpl.setGroupId(getGroupId());
		challengeTeamImpl.setCompanyId(getCompanyId());
		challengeTeamImpl.setUserId(getUserId());
		challengeTeamImpl.setUserName(getUserName());
		challengeTeamImpl.setCreateDate(getCreateDate());
		challengeTeamImpl.setModifiedDate(getModifiedDate());
		challengeTeamImpl.setStatus(getStatus());
		challengeTeamImpl.setStatusByUserId(getStatusByUserId());
		challengeTeamImpl.setStatusByUserName(getStatusByUserName());
		challengeTeamImpl.setStatusDate(getStatusDate());
		challengeTeamImpl.setTeamName(getTeamName());
		challengeTeamImpl.setSubject(getSubject());
		challengeTeamImpl.setPaperName(getPaperName());
		challengeTeamImpl.setPaperAbstract(getPaperAbstract());
		challengeTeamImpl.setPaperFileName(getPaperFileName());
		challengeTeamImpl.setPaperSubmissionDay(getPaperSubmissionDay());
		challengeTeamImpl.setPaperModifyDay(getPaperModifyDay());
		challengeTeamImpl.setPaperStatusDOC(getPaperStatusDOC());
		challengeTeamImpl.setPaperPDFFileName(getPaperPDFFileName());
		challengeTeamImpl.setPaperPDFSubmissionDay(getPaperPDFSubmissionDay());
		challengeTeamImpl.setPaperPDFModifyDay(getPaperPDFModifyDay());
		challengeTeamImpl.setPaperStatusPDF(getPaperStatusPDF());
		challengeTeamImpl.setPresentationName(getPresentationName());
		challengeTeamImpl.setPresentationFileName(getPresentationFileName());
		challengeTeamImpl.setPresentationSubmissionDay(getPresentationSubmissionDay());
		challengeTeamImpl.setPresentationModifyDay(getPresentationModifyDay());
		challengeTeamImpl.setPresentationStatus(getPresentationStatus());
		challengeTeamImpl.setFilepath(getFilepath());
		challengeTeamImpl.setCpuTime(getCpuTime());
		challengeTeamImpl.setAppList(getAppList());
		challengeTeamImpl.setSimulationNumber(getSimulationNumber());
		challengeTeamImpl.setAggrement(getAggrement());
		challengeTeamImpl.setChildChallengeId(getChildChallengeId());

		challengeTeamImpl.resetOriginalValues();

		return challengeTeamImpl;
	}

	@Override
	public int compareTo(ChallengeTeam challengeTeam) {
		int value = 0;

		if (getChallengeTeamId() < challengeTeam.getChallengeTeamId()) {
			value = -1;
		}
		else if (getChallengeTeamId() > challengeTeam.getChallengeTeamId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChallengeTeam)) {
			return false;
		}

		ChallengeTeam challengeTeam = (ChallengeTeam)obj;

		long primaryKey = challengeTeam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ChallengeTeamModelImpl challengeTeamModelImpl = this;

		challengeTeamModelImpl._originalUuid = challengeTeamModelImpl._uuid;

		challengeTeamModelImpl._originalGroupId = challengeTeamModelImpl._groupId;

		challengeTeamModelImpl._setOriginalGroupId = false;

		challengeTeamModelImpl._originalCompanyId = challengeTeamModelImpl._companyId;

		challengeTeamModelImpl._setOriginalCompanyId = false;

		challengeTeamModelImpl._originalStatus = challengeTeamModelImpl._status;

		challengeTeamModelImpl._setOriginalStatus = false;

		challengeTeamModelImpl._originalChildChallengeId = challengeTeamModelImpl._childChallengeId;

		challengeTeamModelImpl._setOriginalChildChallengeId = false;

		challengeTeamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChallengeTeam> toCacheModel() {
		ChallengeTeamCacheModel challengeTeamCacheModel = new ChallengeTeamCacheModel();

		challengeTeamCacheModel.uuid = getUuid();

		String uuid = challengeTeamCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			challengeTeamCacheModel.uuid = null;
		}

		challengeTeamCacheModel.challengeTeamId = getChallengeTeamId();

		challengeTeamCacheModel.groupId = getGroupId();

		challengeTeamCacheModel.companyId = getCompanyId();

		challengeTeamCacheModel.userId = getUserId();

		challengeTeamCacheModel.userName = getUserName();

		String userName = challengeTeamCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			challengeTeamCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			challengeTeamCacheModel.createDate = createDate.getTime();
		}
		else {
			challengeTeamCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			challengeTeamCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			challengeTeamCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.status = getStatus();

		challengeTeamCacheModel.statusByUserId = getStatusByUserId();

		challengeTeamCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = challengeTeamCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			challengeTeamCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			challengeTeamCacheModel.statusDate = statusDate.getTime();
		}
		else {
			challengeTeamCacheModel.statusDate = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.teamName = getTeamName();

		String teamName = challengeTeamCacheModel.teamName;

		if ((teamName != null) && (teamName.length() == 0)) {
			challengeTeamCacheModel.teamName = null;
		}

		challengeTeamCacheModel.subject = getSubject();

		String subject = challengeTeamCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			challengeTeamCacheModel.subject = null;
		}

		challengeTeamCacheModel.paperName = getPaperName();

		String paperName = challengeTeamCacheModel.paperName;

		if ((paperName != null) && (paperName.length() == 0)) {
			challengeTeamCacheModel.paperName = null;
		}

		challengeTeamCacheModel.paperAbstract = getPaperAbstract();

		String paperAbstract = challengeTeamCacheModel.paperAbstract;

		if ((paperAbstract != null) && (paperAbstract.length() == 0)) {
			challengeTeamCacheModel.paperAbstract = null;
		}

		challengeTeamCacheModel.paperFileName = getPaperFileName();

		String paperFileName = challengeTeamCacheModel.paperFileName;

		if ((paperFileName != null) && (paperFileName.length() == 0)) {
			challengeTeamCacheModel.paperFileName = null;
		}

		Date paperSubmissionDay = getPaperSubmissionDay();

		if (paperSubmissionDay != null) {
			challengeTeamCacheModel.paperSubmissionDay = paperSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperSubmissionDay = Long.MIN_VALUE;
		}

		Date paperModifyDay = getPaperModifyDay();

		if (paperModifyDay != null) {
			challengeTeamCacheModel.paperModifyDay = paperModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.paperStatusDOC = getPaperStatusDOC();

		challengeTeamCacheModel.paperPDFFileName = getPaperPDFFileName();

		String paperPDFFileName = challengeTeamCacheModel.paperPDFFileName;

		if ((paperPDFFileName != null) && (paperPDFFileName.length() == 0)) {
			challengeTeamCacheModel.paperPDFFileName = null;
		}

		Date paperPDFSubmissionDay = getPaperPDFSubmissionDay();

		if (paperPDFSubmissionDay != null) {
			challengeTeamCacheModel.paperPDFSubmissionDay = paperPDFSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperPDFSubmissionDay = Long.MIN_VALUE;
		}

		Date paperPDFModifyDay = getPaperPDFModifyDay();

		if (paperPDFModifyDay != null) {
			challengeTeamCacheModel.paperPDFModifyDay = paperPDFModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperPDFModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.paperStatusPDF = getPaperStatusPDF();

		challengeTeamCacheModel.presentationName = getPresentationName();

		String presentationName = challengeTeamCacheModel.presentationName;

		if ((presentationName != null) && (presentationName.length() == 0)) {
			challengeTeamCacheModel.presentationName = null;
		}

		challengeTeamCacheModel.presentationFileName = getPresentationFileName();

		String presentationFileName = challengeTeamCacheModel.presentationFileName;

		if ((presentationFileName != null) &&
				(presentationFileName.length() == 0)) {
			challengeTeamCacheModel.presentationFileName = null;
		}

		Date presentationSubmissionDay = getPresentationSubmissionDay();

		if (presentationSubmissionDay != null) {
			challengeTeamCacheModel.presentationSubmissionDay = presentationSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.presentationSubmissionDay = Long.MIN_VALUE;
		}

		Date presentationModifyDay = getPresentationModifyDay();

		if (presentationModifyDay != null) {
			challengeTeamCacheModel.presentationModifyDay = presentationModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.presentationModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.presentationStatus = getPresentationStatus();

		challengeTeamCacheModel.filepath = getFilepath();

		String filepath = challengeTeamCacheModel.filepath;

		if ((filepath != null) && (filepath.length() == 0)) {
			challengeTeamCacheModel.filepath = null;
		}

		challengeTeamCacheModel.cpuTime = getCpuTime();

		challengeTeamCacheModel.appList = getAppList();

		String appList = challengeTeamCacheModel.appList;

		if ((appList != null) && (appList.length() == 0)) {
			challengeTeamCacheModel.appList = null;
		}

		challengeTeamCacheModel.simulationNumber = getSimulationNumber();

		challengeTeamCacheModel.aggrement = getAggrement();

		challengeTeamCacheModel.childChallengeId = getChildChallengeId();

		return challengeTeamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", challengeTeamId=");
		sb.append(getChallengeTeamId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", teamName=");
		sb.append(getTeamName());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", paperName=");
		sb.append(getPaperName());
		sb.append(", paperAbstract=");
		sb.append(getPaperAbstract());
		sb.append(", paperFileName=");
		sb.append(getPaperFileName());
		sb.append(", paperSubmissionDay=");
		sb.append(getPaperSubmissionDay());
		sb.append(", paperModifyDay=");
		sb.append(getPaperModifyDay());
		sb.append(", paperStatusDOC=");
		sb.append(getPaperStatusDOC());
		sb.append(", paperPDFFileName=");
		sb.append(getPaperPDFFileName());
		sb.append(", paperPDFSubmissionDay=");
		sb.append(getPaperPDFSubmissionDay());
		sb.append(", paperPDFModifyDay=");
		sb.append(getPaperPDFModifyDay());
		sb.append(", paperStatusPDF=");
		sb.append(getPaperStatusPDF());
		sb.append(", presentationName=");
		sb.append(getPresentationName());
		sb.append(", presentationFileName=");
		sb.append(getPresentationFileName());
		sb.append(", presentationSubmissionDay=");
		sb.append(getPresentationSubmissionDay());
		sb.append(", presentationModifyDay=");
		sb.append(getPresentationModifyDay());
		sb.append(", presentationStatus=");
		sb.append(getPresentationStatus());
		sb.append(", filepath=");
		sb.append(getFilepath());
		sb.append(", cpuTime=");
		sb.append(getCpuTime());
		sb.append(", appList=");
		sb.append(getAppList());
		sb.append(", simulationNumber=");
		sb.append(getSimulationNumber());
		sb.append(", aggrement=");
		sb.append(getAggrement());
		sb.append(", childChallengeId=");
		sb.append(getChildChallengeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("kisti.edison.challenge.model.ChallengeTeam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeTeamId</column-name><column-value><![CDATA[");
		sb.append(getChallengeTeamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamName</column-name><column-value><![CDATA[");
		sb.append(getTeamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperName</column-name><column-value><![CDATA[");
		sb.append(getPaperName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperAbstract</column-name><column-value><![CDATA[");
		sb.append(getPaperAbstract());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperFileName</column-name><column-value><![CDATA[");
		sb.append(getPaperFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPaperSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPaperModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperStatusDOC</column-name><column-value><![CDATA[");
		sb.append(getPaperStatusDOC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFFileName</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperStatusPDF</column-name><column-value><![CDATA[");
		sb.append(getPaperStatusPDF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationName</column-name><column-value><![CDATA[");
		sb.append(getPresentationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationFileName</column-name><column-value><![CDATA[");
		sb.append(getPresentationFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPresentationSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPresentationModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationStatus</column-name><column-value><![CDATA[");
		sb.append(getPresentationStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filepath</column-name><column-value><![CDATA[");
		sb.append(getFilepath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpuTime</column-name><column-value><![CDATA[");
		sb.append(getCpuTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appList</column-name><column-value><![CDATA[");
		sb.append(getAppList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationNumber</column-name><column-value><![CDATA[");
		sb.append(getSimulationNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aggrement</column-name><column-value><![CDATA[");
		sb.append(getAggrement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>childChallengeId</column-name><column-value><![CDATA[");
		sb.append(getChildChallengeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChallengeTeam.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChallengeTeam.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _challengeTeamId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _teamName;
	private String _subject;
	private String _subjectCurrentLanguageId;
	private String _paperName;
	private String _paperNameCurrentLanguageId;
	private String _paperAbstract;
	private String _paperAbstractCurrentLanguageId;
	private String _paperFileName;
	private Date _paperSubmissionDay;
	private Date _paperModifyDay;
	private boolean _paperStatusDOC;
	private String _paperPDFFileName;
	private Date _paperPDFSubmissionDay;
	private Date _paperPDFModifyDay;
	private boolean _paperStatusPDF;
	private String _presentationName;
	private String _presentationFileName;
	private Date _presentationSubmissionDay;
	private Date _presentationModifyDay;
	private boolean _presentationStatus;
	private String _filepath;
	private double _cpuTime;
	private String _appList;
	private int _simulationNumber;
	private boolean _aggrement;
	private long _childChallengeId;
	private long _originalChildChallengeId;
	private boolean _setOriginalChildChallengeId;
	private long _columnBitmask;
	private ChallengeTeam _escapedModel;
}