/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import kisti.edison.challenge.model.ChallengeEvaluation;
import kisti.edison.challenge.service.ChallengeEvaluationLocalService;
import kisti.edison.challenge.service.persistence.ChallengeEvaluationPersistence;
import kisti.edison.challenge.service.persistence.ChallengePersistence;
import kisti.edison.challenge.service.persistence.ChallengeTeamFinder;
import kisti.edison.challenge.service.persistence.ChallengeTeamMemberPersistence;
import kisti.edison.challenge.service.persistence.ChallengeTeamPersistence;
import kisti.edison.challenge.service.persistence.ChildChallengePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the challenge evaluation local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link kisti.edison.challenge.service.impl.ChallengeEvaluationManagementLocalServiceImpl}.
 * </p>
 *
 * @author KYJ
 * @see kisti.edison.challenge.service.impl.ChallengeEvaluationManagementLocalServiceImpl
 * @see kisti.edison.challenge.service.ChallengeEvaluationLocalServiceUtil
 * @generated
 */
public abstract class ChallengeEvaluationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ChallengeEvaluationLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link kisti.edison.challenge.service.ChallengeEvaluationLocalServiceUtil} to access the challenge evaluation local service.
	 */

	/**
	 * Adds the challenge evaluation to the database. Also notifies the appropriate model listeners.
	 *
	 * @param challengeEvaluation the challenge evaluation
	 * @return the challenge evaluation that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChallengeEvaluation addChallengeEvaluation(
		ChallengeEvaluation challengeEvaluation) throws SystemException {
		challengeEvaluation.setNew(true);

		return challengeEvaluationPersistence.update(challengeEvaluation);
	}

	/**
	 * Creates a new challenge evaluation with the primary key. Does not add the challenge evaluation to the database.
	 *
	 * @param challengeEvaluationId the primary key for the new challenge evaluation
	 * @return the new challenge evaluation
	 */
	@Override
	public ChallengeEvaluation createChallengeEvaluation(
		long challengeEvaluationId) {
		return challengeEvaluationPersistence.create(challengeEvaluationId);
	}

	/**
	 * Deletes the challenge evaluation with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param challengeEvaluationId the primary key of the challenge evaluation
	 * @return the challenge evaluation that was removed
	 * @throws PortalException if a challenge evaluation with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChallengeEvaluation deleteChallengeEvaluation(
		long challengeEvaluationId) throws PortalException, SystemException {
		return challengeEvaluationPersistence.remove(challengeEvaluationId);
	}

	/**
	 * Deletes the challenge evaluation from the database. Also notifies the appropriate model listeners.
	 *
	 * @param challengeEvaluation the challenge evaluation
	 * @return the challenge evaluation that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChallengeEvaluation deleteChallengeEvaluation(
		ChallengeEvaluation challengeEvaluation) throws SystemException {
		return challengeEvaluationPersistence.remove(challengeEvaluation);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ChallengeEvaluation.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return challengeEvaluationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link kisti.edison.challenge.model.impl.ChallengeEvaluationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return challengeEvaluationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link kisti.edison.challenge.model.impl.ChallengeEvaluationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return challengeEvaluationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return challengeEvaluationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return challengeEvaluationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ChallengeEvaluation fetchChallengeEvaluation(
		long challengeEvaluationId) throws SystemException {
		return challengeEvaluationPersistence.fetchByPrimaryKey(challengeEvaluationId);
	}

	/**
	 * Returns the challenge evaluation with the matching UUID and company.
	 *
	 * @param uuid the challenge evaluation's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching challenge evaluation, or <code>null</code> if a matching challenge evaluation could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChallengeEvaluation fetchChallengeEvaluationByUuidAndCompanyId(
		String uuid, long companyId) throws SystemException {
		return challengeEvaluationPersistence.fetchByUuid_C_First(uuid,
			companyId, null);
	}

	/**
	 * Returns the challenge evaluation matching the UUID and group.
	 *
	 * @param uuid the challenge evaluation's UUID
	 * @param groupId the primary key of the group
	 * @return the matching challenge evaluation, or <code>null</code> if a matching challenge evaluation could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChallengeEvaluation fetchChallengeEvaluationByUuidAndGroupId(
		String uuid, long groupId) throws SystemException {
		return challengeEvaluationPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the challenge evaluation with the primary key.
	 *
	 * @param challengeEvaluationId the primary key of the challenge evaluation
	 * @return the challenge evaluation
	 * @throws PortalException if a challenge evaluation with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChallengeEvaluation getChallengeEvaluation(
		long challengeEvaluationId) throws PortalException, SystemException {
		return challengeEvaluationPersistence.findByPrimaryKey(challengeEvaluationId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return challengeEvaluationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the challenge evaluation with the matching UUID and company.
	 *
	 * @param uuid the challenge evaluation's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching challenge evaluation
	 * @throws PortalException if a matching challenge evaluation could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChallengeEvaluation getChallengeEvaluationByUuidAndCompanyId(
		String uuid, long companyId) throws PortalException, SystemException {
		return challengeEvaluationPersistence.findByUuid_C_First(uuid,
			companyId, null);
	}

	/**
	 * Returns the challenge evaluation matching the UUID and group.
	 *
	 * @param uuid the challenge evaluation's UUID
	 * @param groupId the primary key of the group
	 * @return the matching challenge evaluation
	 * @throws PortalException if a matching challenge evaluation could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChallengeEvaluation getChallengeEvaluationByUuidAndGroupId(
		String uuid, long groupId) throws PortalException, SystemException {
		return challengeEvaluationPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the challenge evaluations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link kisti.edison.challenge.model.impl.ChallengeEvaluationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of challenge evaluations
	 * @param end the upper bound of the range of challenge evaluations (not inclusive)
	 * @return the range of challenge evaluations
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ChallengeEvaluation> getChallengeEvaluations(int start, int end)
		throws SystemException {
		return challengeEvaluationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of challenge evaluations.
	 *
	 * @return the number of challenge evaluations
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getChallengeEvaluationsCount() throws SystemException {
		return challengeEvaluationPersistence.countAll();
	}

	/**
	 * Updates the challenge evaluation in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param challengeEvaluation the challenge evaluation
	 * @return the challenge evaluation that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChallengeEvaluation updateChallengeEvaluation(
		ChallengeEvaluation challengeEvaluation) throws SystemException {
		return challengeEvaluationPersistence.update(challengeEvaluation);
	}

	/**
	 * Returns the challenge local service.
	 *
	 * @return the challenge local service
	 */
	public kisti.edison.challenge.service.ChallengeLocalService getChallengeLocalService() {
		return challengeLocalService;
	}

	/**
	 * Sets the challenge local service.
	 *
	 * @param challengeLocalService the challenge local service
	 */
	public void setChallengeLocalService(
		kisti.edison.challenge.service.ChallengeLocalService challengeLocalService) {
		this.challengeLocalService = challengeLocalService;
	}

	/**
	 * Returns the challenge remote service.
	 *
	 * @return the challenge remote service
	 */
	public kisti.edison.challenge.service.ChallengeService getChallengeService() {
		return challengeService;
	}

	/**
	 * Sets the challenge remote service.
	 *
	 * @param challengeService the challenge remote service
	 */
	public void setChallengeService(
		kisti.edison.challenge.service.ChallengeService challengeService) {
		this.challengeService = challengeService;
	}

	/**
	 * Returns the challenge persistence.
	 *
	 * @return the challenge persistence
	 */
	public ChallengePersistence getChallengePersistence() {
		return challengePersistence;
	}

	/**
	 * Sets the challenge persistence.
	 *
	 * @param challengePersistence the challenge persistence
	 */
	public void setChallengePersistence(
		ChallengePersistence challengePersistence) {
		this.challengePersistence = challengePersistence;
	}

	/**
	 * Returns the challenge evaluation local service.
	 *
	 * @return the challenge evaluation local service
	 */
	public kisti.edison.challenge.service.ChallengeEvaluationLocalService getChallengeEvaluationLocalService() {
		return challengeEvaluationLocalService;
	}

	/**
	 * Sets the challenge evaluation local service.
	 *
	 * @param challengeEvaluationLocalService the challenge evaluation local service
	 */
	public void setChallengeEvaluationLocalService(
		kisti.edison.challenge.service.ChallengeEvaluationLocalService challengeEvaluationLocalService) {
		this.challengeEvaluationLocalService = challengeEvaluationLocalService;
	}

	/**
	 * Returns the challenge evaluation remote service.
	 *
	 * @return the challenge evaluation remote service
	 */
	public kisti.edison.challenge.service.ChallengeEvaluationService getChallengeEvaluationService() {
		return challengeEvaluationService;
	}

	/**
	 * Sets the challenge evaluation remote service.
	 *
	 * @param challengeEvaluationService the challenge evaluation remote service
	 */
	public void setChallengeEvaluationService(
		kisti.edison.challenge.service.ChallengeEvaluationService challengeEvaluationService) {
		this.challengeEvaluationService = challengeEvaluationService;
	}

	/**
	 * Returns the challenge evaluation persistence.
	 *
	 * @return the challenge evaluation persistence
	 */
	public ChallengeEvaluationPersistence getChallengeEvaluationPersistence() {
		return challengeEvaluationPersistence;
	}

	/**
	 * Sets the challenge evaluation persistence.
	 *
	 * @param challengeEvaluationPersistence the challenge evaluation persistence
	 */
	public void setChallengeEvaluationPersistence(
		ChallengeEvaluationPersistence challengeEvaluationPersistence) {
		this.challengeEvaluationPersistence = challengeEvaluationPersistence;
	}

	/**
	 * Returns the challenge team local service.
	 *
	 * @return the challenge team local service
	 */
	public kisti.edison.challenge.service.ChallengeTeamLocalService getChallengeTeamLocalService() {
		return challengeTeamLocalService;
	}

	/**
	 * Sets the challenge team local service.
	 *
	 * @param challengeTeamLocalService the challenge team local service
	 */
	public void setChallengeTeamLocalService(
		kisti.edison.challenge.service.ChallengeTeamLocalService challengeTeamLocalService) {
		this.challengeTeamLocalService = challengeTeamLocalService;
	}

	/**
	 * Returns the challenge team remote service.
	 *
	 * @return the challenge team remote service
	 */
	public kisti.edison.challenge.service.ChallengeTeamService getChallengeTeamService() {
		return challengeTeamService;
	}

	/**
	 * Sets the challenge team remote service.
	 *
	 * @param challengeTeamService the challenge team remote service
	 */
	public void setChallengeTeamService(
		kisti.edison.challenge.service.ChallengeTeamService challengeTeamService) {
		this.challengeTeamService = challengeTeamService;
	}

	/**
	 * Returns the challenge team persistence.
	 *
	 * @return the challenge team persistence
	 */
	public ChallengeTeamPersistence getChallengeTeamPersistence() {
		return challengeTeamPersistence;
	}

	/**
	 * Sets the challenge team persistence.
	 *
	 * @param challengeTeamPersistence the challenge team persistence
	 */
	public void setChallengeTeamPersistence(
		ChallengeTeamPersistence challengeTeamPersistence) {
		this.challengeTeamPersistence = challengeTeamPersistence;
	}

	/**
	 * Returns the challenge team finder.
	 *
	 * @return the challenge team finder
	 */
	public ChallengeTeamFinder getChallengeTeamFinder() {
		return challengeTeamFinder;
	}

	/**
	 * Sets the challenge team finder.
	 *
	 * @param challengeTeamFinder the challenge team finder
	 */
	public void setChallengeTeamFinder(ChallengeTeamFinder challengeTeamFinder) {
		this.challengeTeamFinder = challengeTeamFinder;
	}

	/**
	 * Returns the challenge team member local service.
	 *
	 * @return the challenge team member local service
	 */
	public kisti.edison.challenge.service.ChallengeTeamMemberLocalService getChallengeTeamMemberLocalService() {
		return challengeTeamMemberLocalService;
	}

	/**
	 * Sets the challenge team member local service.
	 *
	 * @param challengeTeamMemberLocalService the challenge team member local service
	 */
	public void setChallengeTeamMemberLocalService(
		kisti.edison.challenge.service.ChallengeTeamMemberLocalService challengeTeamMemberLocalService) {
		this.challengeTeamMemberLocalService = challengeTeamMemberLocalService;
	}

	/**
	 * Returns the challenge team member remote service.
	 *
	 * @return the challenge team member remote service
	 */
	public kisti.edison.challenge.service.ChallengeTeamMemberService getChallengeTeamMemberService() {
		return challengeTeamMemberService;
	}

	/**
	 * Sets the challenge team member remote service.
	 *
	 * @param challengeTeamMemberService the challenge team member remote service
	 */
	public void setChallengeTeamMemberService(
		kisti.edison.challenge.service.ChallengeTeamMemberService challengeTeamMemberService) {
		this.challengeTeamMemberService = challengeTeamMemberService;
	}

	/**
	 * Returns the challenge team member persistence.
	 *
	 * @return the challenge team member persistence
	 */
	public ChallengeTeamMemberPersistence getChallengeTeamMemberPersistence() {
		return challengeTeamMemberPersistence;
	}

	/**
	 * Sets the challenge team member persistence.
	 *
	 * @param challengeTeamMemberPersistence the challenge team member persistence
	 */
	public void setChallengeTeamMemberPersistence(
		ChallengeTeamMemberPersistence challengeTeamMemberPersistence) {
		this.challengeTeamMemberPersistence = challengeTeamMemberPersistence;
	}

	/**
	 * Returns the child challenge local service.
	 *
	 * @return the child challenge local service
	 */
	public kisti.edison.challenge.service.ChildChallengeLocalService getChildChallengeLocalService() {
		return childChallengeLocalService;
	}

	/**
	 * Sets the child challenge local service.
	 *
	 * @param childChallengeLocalService the child challenge local service
	 */
	public void setChildChallengeLocalService(
		kisti.edison.challenge.service.ChildChallengeLocalService childChallengeLocalService) {
		this.childChallengeLocalService = childChallengeLocalService;
	}

	/**
	 * Returns the child challenge remote service.
	 *
	 * @return the child challenge remote service
	 */
	public kisti.edison.challenge.service.ChildChallengeService getChildChallengeService() {
		return childChallengeService;
	}

	/**
	 * Sets the child challenge remote service.
	 *
	 * @param childChallengeService the child challenge remote service
	 */
	public void setChildChallengeService(
		kisti.edison.challenge.service.ChildChallengeService childChallengeService) {
		this.childChallengeService = childChallengeService;
	}

	/**
	 * Returns the child challenge persistence.
	 *
	 * @return the child challenge persistence
	 */
	public ChildChallengePersistence getChildChallengePersistence() {
		return childChallengePersistence;
	}

	/**
	 * Sets the child challenge persistence.
	 *
	 * @param childChallengePersistence the child challenge persistence
	 */
	public void setChildChallengePersistence(
		ChildChallengePersistence childChallengePersistence) {
		this.childChallengePersistence = childChallengePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("kisti.edison.challenge.model.ChallengeEvaluation",
			challengeEvaluationLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"kisti.edison.challenge.model.ChallengeEvaluation");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ChallengeEvaluation.class;
	}

	protected String getModelClassName() {
		return ChallengeEvaluation.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = challengeEvaluationPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = kisti.edison.challenge.service.ChallengeLocalService.class)
	protected kisti.edison.challenge.service.ChallengeLocalService challengeLocalService;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeService.class)
	protected kisti.edison.challenge.service.ChallengeService challengeService;
	@BeanReference(type = ChallengePersistence.class)
	protected ChallengePersistence challengePersistence;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeEvaluationLocalService.class)
	protected kisti.edison.challenge.service.ChallengeEvaluationLocalService challengeEvaluationLocalService;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeEvaluationService.class)
	protected kisti.edison.challenge.service.ChallengeEvaluationService challengeEvaluationService;
	@BeanReference(type = ChallengeEvaluationPersistence.class)
	protected ChallengeEvaluationPersistence challengeEvaluationPersistence;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeTeamLocalService.class)
	protected kisti.edison.challenge.service.ChallengeTeamLocalService challengeTeamLocalService;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeTeamService.class)
	protected kisti.edison.challenge.service.ChallengeTeamService challengeTeamService;
	@BeanReference(type = ChallengeTeamPersistence.class)
	protected ChallengeTeamPersistence challengeTeamPersistence;
	@BeanReference(type = ChallengeTeamFinder.class)
	protected ChallengeTeamFinder challengeTeamFinder;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeTeamMemberLocalService.class)
	protected kisti.edison.challenge.service.ChallengeTeamMemberLocalService challengeTeamMemberLocalService;
	@BeanReference(type = kisti.edison.challenge.service.ChallengeTeamMemberService.class)
	protected kisti.edison.challenge.service.ChallengeTeamMemberService challengeTeamMemberService;
	@BeanReference(type = ChallengeTeamMemberPersistence.class)
	protected ChallengeTeamMemberPersistence challengeTeamMemberPersistence;
	@BeanReference(type = kisti.edison.challenge.service.ChildChallengeLocalService.class)
	protected kisti.edison.challenge.service.ChildChallengeLocalService childChallengeLocalService;
	@BeanReference(type = kisti.edison.challenge.service.ChildChallengeService.class)
	protected kisti.edison.challenge.service.ChildChallengeService childChallengeService;
	@BeanReference(type = ChildChallengePersistence.class)
	protected ChildChallengePersistence childChallengePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ChallengeEvaluationLocalServiceClpInvoker _clpInvoker = new ChallengeEvaluationLocalServiceClpInvoker();
}