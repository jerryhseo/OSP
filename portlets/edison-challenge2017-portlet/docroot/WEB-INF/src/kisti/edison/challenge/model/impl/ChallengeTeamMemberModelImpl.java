/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package kisti.edison.challenge.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import kisti.edison.challenge.model.ChallengeTeamMember;
import kisti.edison.challenge.model.ChallengeTeamMemberModel;
import kisti.edison.challenge.model.ChallengeTeamMemberSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ChallengeTeamMember service. Represents a row in the &quot;challenge_ChallengeTeamMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link kisti.edison.challenge.model.ChallengeTeamMemberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChallengeTeamMemberImpl}.
 * </p>
 *
 * @author KYJ
 * @see ChallengeTeamMemberImpl
 * @see kisti.edison.challenge.model.ChallengeTeamMember
 * @see kisti.edison.challenge.model.ChallengeTeamMemberModel
 * @generated
 */
@JSON(strict = true)
public class ChallengeTeamMemberModelImpl extends BaseModelImpl<ChallengeTeamMember>
	implements ChallengeTeamMemberModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a challenge team member model instance should use the {@link kisti.edison.challenge.model.ChallengeTeamMember} interface instead.
	 */
	public static final String TABLE_NAME = "challenge_ChallengeTeamMember";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "challengeTeamMemberId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "applyUserId", Types.BIGINT },
			{ "applyUserName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "institute", Types.VARCHAR },
			{ "major", Types.VARCHAR },
			{ "grade", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "leader", Types.BOOLEAN },
			{ "challengeTeamId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table challenge_ChallengeTeamMember (uuid_ VARCHAR(75) null,challengeTeamMemberId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,applyUserId LONG,applyUserName VARCHAR(75) null,email VARCHAR(75) null,institute STRING null,major STRING null,grade VARCHAR(75) null,phone VARCHAR(75) null,leader BOOLEAN,challengeTeamId LONG)";
	public static final String TABLE_SQL_DROP = "drop table challenge_ChallengeTeamMember";
	public static final String ORDER_BY_JPQL = " ORDER BY challengeTeamMember.challengeTeamId ASC, challengeTeamMember.challengeTeamMemberId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY challenge_ChallengeTeamMember.challengeTeamId ASC, challenge_ChallengeTeamMember.challengeTeamMemberId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.kisti.edison.challenge.model.ChallengeTeamMember"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.kisti.edison.challenge.model.ChallengeTeamMember"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.kisti.edison.challenge.model.ChallengeTeamMember"),
			true);
	public static long APPLYUSERID_COLUMN_BITMASK = 1L;
	public static long CHALLENGETEAMID_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long UUID_COLUMN_BITMASK = 32L;
	public static long CHALLENGETEAMMEMBERID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ChallengeTeamMember toModel(ChallengeTeamMemberSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChallengeTeamMember model = new ChallengeTeamMemberImpl();

		model.setUuid(soapModel.getUuid());
		model.setChallengeTeamMemberId(soapModel.getChallengeTeamMemberId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setApplyUserId(soapModel.getApplyUserId());
		model.setApplyUserName(soapModel.getApplyUserName());
		model.setEmail(soapModel.getEmail());
		model.setInstitute(soapModel.getInstitute());
		model.setMajor(soapModel.getMajor());
		model.setGrade(soapModel.getGrade());
		model.setPhone(soapModel.getPhone());
		model.setLeader(soapModel.getLeader());
		model.setChallengeTeamId(soapModel.getChallengeTeamId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ChallengeTeamMember> toModels(
		ChallengeTeamMemberSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChallengeTeamMember> models = new ArrayList<ChallengeTeamMember>(soapModels.length);

		for (ChallengeTeamMemberSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.kisti.edison.challenge.model.ChallengeTeamMember"));

	public ChallengeTeamMemberModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _challengeTeamMemberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChallengeTeamMemberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _challengeTeamMemberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChallengeTeamMember.class;
	}

	@Override
	public String getModelClassName() {
		return ChallengeTeamMember.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("challengeTeamMemberId", getChallengeTeamMemberId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("applyUserId", getApplyUserId());
		attributes.put("applyUserName", getApplyUserName());
		attributes.put("email", getEmail());
		attributes.put("institute", getInstitute());
		attributes.put("major", getMajor());
		attributes.put("grade", getGrade());
		attributes.put("phone", getPhone());
		attributes.put("leader", getLeader());
		attributes.put("challengeTeamId", getChallengeTeamId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long challengeTeamMemberId = (Long)attributes.get(
				"challengeTeamMemberId");

		if (challengeTeamMemberId != null) {
			setChallengeTeamMemberId(challengeTeamMemberId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long applyUserId = (Long)attributes.get("applyUserId");

		if (applyUserId != null) {
			setApplyUserId(applyUserId);
		}

		String applyUserName = (String)attributes.get("applyUserName");

		if (applyUserName != null) {
			setApplyUserName(applyUserName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String institute = (String)attributes.get("institute");

		if (institute != null) {
			setInstitute(institute);
		}

		String major = (String)attributes.get("major");

		if (major != null) {
			setMajor(major);
		}

		String grade = (String)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		Boolean leader = (Boolean)attributes.get("leader");

		if (leader != null) {
			setLeader(leader);
		}

		Long challengeTeamId = (Long)attributes.get("challengeTeamId");

		if (challengeTeamId != null) {
			setChallengeTeamId(challengeTeamId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getChallengeTeamMemberId() {
		return _challengeTeamMemberId;
	}

	@Override
	public void setChallengeTeamMemberId(long challengeTeamMemberId) {
		_columnBitmask = -1L;

		_challengeTeamMemberId = challengeTeamMemberId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getApplyUserId() {
		return _applyUserId;
	}

	@Override
	public void setApplyUserId(long applyUserId) {
		_columnBitmask |= APPLYUSERID_COLUMN_BITMASK;

		if (!_setOriginalApplyUserId) {
			_setOriginalApplyUserId = true;

			_originalApplyUserId = _applyUserId;
		}

		_applyUserId = applyUserId;
	}

	@Override
	public String getApplyUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getApplyUserId(), "uuid", _applyUserUuid);
	}

	@Override
	public void setApplyUserUuid(String applyUserUuid) {
		_applyUserUuid = applyUserUuid;
	}

	public long getOriginalApplyUserId() {
		return _originalApplyUserId;
	}

	@JSON
	@Override
	public String getApplyUserName() {
		if (_applyUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _applyUserName;
		}
	}

	@Override
	public void setApplyUserName(String applyUserName) {
		_applyUserName = applyUserName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getInstitute() {
		if (_institute == null) {
			return StringPool.BLANK;
		}
		else {
			return _institute;
		}
	}

	@Override
	public String getInstitute(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstitute(languageId);
	}

	@Override
	public String getInstitute(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstitute(languageId, useDefault);
	}

	@Override
	public String getInstitute(String languageId) {
		return LocalizationUtil.getLocalization(getInstitute(), languageId);
	}

	@Override
	public String getInstitute(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getInstitute(), languageId,
			useDefault);
	}

	@Override
	public String getInstituteCurrentLanguageId() {
		return _instituteCurrentLanguageId;
	}

	@JSON
	@Override
	public String getInstituteCurrentValue() {
		Locale locale = getLocale(_instituteCurrentLanguageId);

		return getInstitute(locale);
	}

	@Override
	public Map<Locale, String> getInstituteMap() {
		return LocalizationUtil.getLocalizationMap(getInstitute());
	}

	@Override
	public void setInstitute(String institute) {
		_institute = institute;
	}

	@Override
	public void setInstitute(String institute, Locale locale) {
		setInstitute(institute, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstitute(String institute, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(institute)) {
			setInstitute(LocalizationUtil.updateLocalization(getInstitute(),
					"Institute", institute, languageId, defaultLanguageId));
		}
		else {
			setInstitute(LocalizationUtil.removeLocalization(getInstitute(),
					"Institute", languageId));
		}
	}

	@Override
	public void setInstituteCurrentLanguageId(String languageId) {
		_instituteCurrentLanguageId = languageId;
	}

	@Override
	public void setInstituteMap(Map<Locale, String> instituteMap) {
		setInstituteMap(instituteMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstituteMap(Map<Locale, String> instituteMap,
		Locale defaultLocale) {
		if (instituteMap == null) {
			return;
		}

		setInstitute(LocalizationUtil.updateLocalization(instituteMap,
				getInstitute(), "Institute",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getMajor() {
		if (_major == null) {
			return StringPool.BLANK;
		}
		else {
			return _major;
		}
	}

	@Override
	public String getMajor(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMajor(languageId);
	}

	@Override
	public String getMajor(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMajor(languageId, useDefault);
	}

	@Override
	public String getMajor(String languageId) {
		return LocalizationUtil.getLocalization(getMajor(), languageId);
	}

	@Override
	public String getMajor(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getMajor(), languageId,
			useDefault);
	}

	@Override
	public String getMajorCurrentLanguageId() {
		return _majorCurrentLanguageId;
	}

	@JSON
	@Override
	public String getMajorCurrentValue() {
		Locale locale = getLocale(_majorCurrentLanguageId);

		return getMajor(locale);
	}

	@Override
	public Map<Locale, String> getMajorMap() {
		return LocalizationUtil.getLocalizationMap(getMajor());
	}

	@Override
	public void setMajor(String major) {
		_major = major;
	}

	@Override
	public void setMajor(String major, Locale locale) {
		setMajor(major, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setMajor(String major, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(major)) {
			setMajor(LocalizationUtil.updateLocalization(getMajor(), "Major",
					major, languageId, defaultLanguageId));
		}
		else {
			setMajor(LocalizationUtil.removeLocalization(getMajor(), "Major",
					languageId));
		}
	}

	@Override
	public void setMajorCurrentLanguageId(String languageId) {
		_majorCurrentLanguageId = languageId;
	}

	@Override
	public void setMajorMap(Map<Locale, String> majorMap) {
		setMajorMap(majorMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setMajorMap(Map<Locale, String> majorMap, Locale defaultLocale) {
		if (majorMap == null) {
			return;
		}

		setMajor(LocalizationUtil.updateLocalization(majorMap, getMajor(),
				"Major", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getGrade() {
		if (_grade == null) {
			return StringPool.BLANK;
		}
		else {
			return _grade;
		}
	}

	@Override
	public void setGrade(String grade) {
		_grade = grade;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public boolean getLeader() {
		return _leader;
	}

	@Override
	public boolean isLeader() {
		return _leader;
	}

	@Override
	public void setLeader(boolean leader) {
		_leader = leader;
	}

	@JSON
	@Override
	public long getChallengeTeamId() {
		return _challengeTeamId;
	}

	@Override
	public void setChallengeTeamId(long challengeTeamId) {
		_columnBitmask = -1L;

		if (!_setOriginalChallengeTeamId) {
			_setOriginalChallengeTeamId = true;

			_originalChallengeTeamId = _challengeTeamId;
		}

		_challengeTeamId = challengeTeamId;
	}

	public long getOriginalChallengeTeamId() {
		return _originalChallengeTeamId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ChallengeTeamMember.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ChallengeTeamMember.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> instituteMap = getInstituteMap();

		for (Map.Entry<Locale, String> entry : instituteMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> majorMap = getMajorMap();

		for (Map.Entry<Locale, String> entry : majorMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getInstitute();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String institute = getInstitute(defaultLocale);

		if (Validator.isNull(institute)) {
			setInstitute(getInstitute(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setInstitute(getInstitute(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String major = getMajor(defaultLocale);

		if (Validator.isNull(major)) {
			setMajor(getMajor(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setMajor(getMajor(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ChallengeTeamMember toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChallengeTeamMember)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChallengeTeamMemberImpl challengeTeamMemberImpl = new ChallengeTeamMemberImpl();

		challengeTeamMemberImpl.setUuid(getUuid());
		challengeTeamMemberImpl.setChallengeTeamMemberId(getChallengeTeamMemberId());
		challengeTeamMemberImpl.setGroupId(getGroupId());
		challengeTeamMemberImpl.setCompanyId(getCompanyId());
		challengeTeamMemberImpl.setUserId(getUserId());
		challengeTeamMemberImpl.setUserName(getUserName());
		challengeTeamMemberImpl.setCreateDate(getCreateDate());
		challengeTeamMemberImpl.setModifiedDate(getModifiedDate());
		challengeTeamMemberImpl.setStatus(getStatus());
		challengeTeamMemberImpl.setStatusByUserId(getStatusByUserId());
		challengeTeamMemberImpl.setStatusByUserName(getStatusByUserName());
		challengeTeamMemberImpl.setStatusDate(getStatusDate());
		challengeTeamMemberImpl.setApplyUserId(getApplyUserId());
		challengeTeamMemberImpl.setApplyUserName(getApplyUserName());
		challengeTeamMemberImpl.setEmail(getEmail());
		challengeTeamMemberImpl.setInstitute(getInstitute());
		challengeTeamMemberImpl.setMajor(getMajor());
		challengeTeamMemberImpl.setGrade(getGrade());
		challengeTeamMemberImpl.setPhone(getPhone());
		challengeTeamMemberImpl.setLeader(getLeader());
		challengeTeamMemberImpl.setChallengeTeamId(getChallengeTeamId());

		challengeTeamMemberImpl.resetOriginalValues();

		return challengeTeamMemberImpl;
	}

	@Override
	public int compareTo(ChallengeTeamMember challengeTeamMember) {
		int value = 0;

		if (getChallengeTeamId() < challengeTeamMember.getChallengeTeamId()) {
			value = -1;
		}
		else if (getChallengeTeamId() > challengeTeamMember.getChallengeTeamId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getChallengeTeamMemberId() < challengeTeamMember.getChallengeTeamMemberId()) {
			value = -1;
		}
		else if (getChallengeTeamMemberId() > challengeTeamMember.getChallengeTeamMemberId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChallengeTeamMember)) {
			return false;
		}

		ChallengeTeamMember challengeTeamMember = (ChallengeTeamMember)obj;

		long primaryKey = challengeTeamMember.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ChallengeTeamMemberModelImpl challengeTeamMemberModelImpl = this;

		challengeTeamMemberModelImpl._originalUuid = challengeTeamMemberModelImpl._uuid;

		challengeTeamMemberModelImpl._originalGroupId = challengeTeamMemberModelImpl._groupId;

		challengeTeamMemberModelImpl._setOriginalGroupId = false;

		challengeTeamMemberModelImpl._originalCompanyId = challengeTeamMemberModelImpl._companyId;

		challengeTeamMemberModelImpl._setOriginalCompanyId = false;

		challengeTeamMemberModelImpl._originalStatus = challengeTeamMemberModelImpl._status;

		challengeTeamMemberModelImpl._setOriginalStatus = false;

		challengeTeamMemberModelImpl._originalApplyUserId = challengeTeamMemberModelImpl._applyUserId;

		challengeTeamMemberModelImpl._setOriginalApplyUserId = false;

		challengeTeamMemberModelImpl._originalChallengeTeamId = challengeTeamMemberModelImpl._challengeTeamId;

		challengeTeamMemberModelImpl._setOriginalChallengeTeamId = false;

		challengeTeamMemberModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChallengeTeamMember> toCacheModel() {
		ChallengeTeamMemberCacheModel challengeTeamMemberCacheModel = new ChallengeTeamMemberCacheModel();

		challengeTeamMemberCacheModel.uuid = getUuid();

		String uuid = challengeTeamMemberCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			challengeTeamMemberCacheModel.uuid = null;
		}

		challengeTeamMemberCacheModel.challengeTeamMemberId = getChallengeTeamMemberId();

		challengeTeamMemberCacheModel.groupId = getGroupId();

		challengeTeamMemberCacheModel.companyId = getCompanyId();

		challengeTeamMemberCacheModel.userId = getUserId();

		challengeTeamMemberCacheModel.userName = getUserName();

		String userName = challengeTeamMemberCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			challengeTeamMemberCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			challengeTeamMemberCacheModel.createDate = createDate.getTime();
		}
		else {
			challengeTeamMemberCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			challengeTeamMemberCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			challengeTeamMemberCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		challengeTeamMemberCacheModel.status = getStatus();

		challengeTeamMemberCacheModel.statusByUserId = getStatusByUserId();

		challengeTeamMemberCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = challengeTeamMemberCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			challengeTeamMemberCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			challengeTeamMemberCacheModel.statusDate = statusDate.getTime();
		}
		else {
			challengeTeamMemberCacheModel.statusDate = Long.MIN_VALUE;
		}

		challengeTeamMemberCacheModel.applyUserId = getApplyUserId();

		challengeTeamMemberCacheModel.applyUserName = getApplyUserName();

		String applyUserName = challengeTeamMemberCacheModel.applyUserName;

		if ((applyUserName != null) && (applyUserName.length() == 0)) {
			challengeTeamMemberCacheModel.applyUserName = null;
		}

		challengeTeamMemberCacheModel.email = getEmail();

		String email = challengeTeamMemberCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			challengeTeamMemberCacheModel.email = null;
		}

		challengeTeamMemberCacheModel.institute = getInstitute();

		String institute = challengeTeamMemberCacheModel.institute;

		if ((institute != null) && (institute.length() == 0)) {
			challengeTeamMemberCacheModel.institute = null;
		}

		challengeTeamMemberCacheModel.major = getMajor();

		String major = challengeTeamMemberCacheModel.major;

		if ((major != null) && (major.length() == 0)) {
			challengeTeamMemberCacheModel.major = null;
		}

		challengeTeamMemberCacheModel.grade = getGrade();

		String grade = challengeTeamMemberCacheModel.grade;

		if ((grade != null) && (grade.length() == 0)) {
			challengeTeamMemberCacheModel.grade = null;
		}

		challengeTeamMemberCacheModel.phone = getPhone();

		String phone = challengeTeamMemberCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			challengeTeamMemberCacheModel.phone = null;
		}

		challengeTeamMemberCacheModel.leader = getLeader();

		challengeTeamMemberCacheModel.challengeTeamId = getChallengeTeamId();

		return challengeTeamMemberCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", challengeTeamMemberId=");
		sb.append(getChallengeTeamMemberId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", applyUserId=");
		sb.append(getApplyUserId());
		sb.append(", applyUserName=");
		sb.append(getApplyUserName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", institute=");
		sb.append(getInstitute());
		sb.append(", major=");
		sb.append(getMajor());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", leader=");
		sb.append(getLeader());
		sb.append(", challengeTeamId=");
		sb.append(getChallengeTeamId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("kisti.edison.challenge.model.ChallengeTeamMember");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeTeamMemberId</column-name><column-value><![CDATA[");
		sb.append(getChallengeTeamMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyUserId</column-name><column-value><![CDATA[");
		sb.append(getApplyUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyUserName</column-name><column-value><![CDATA[");
		sb.append(getApplyUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>institute</column-name><column-value><![CDATA[");
		sb.append(getInstitute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>major</column-name><column-value><![CDATA[");
		sb.append(getMajor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leader</column-name><column-value><![CDATA[");
		sb.append(getLeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeTeamId</column-name><column-value><![CDATA[");
		sb.append(getChallengeTeamId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChallengeTeamMember.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChallengeTeamMember.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _challengeTeamMemberId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _applyUserId;
	private String _applyUserUuid;
	private long _originalApplyUserId;
	private boolean _setOriginalApplyUserId;
	private String _applyUserName;
	private String _email;
	private String _institute;
	private String _instituteCurrentLanguageId;
	private String _major;
	private String _majorCurrentLanguageId;
	private String _grade;
	private String _phone;
	private boolean _leader;
	private long _challengeTeamId;
	private long _originalChallengeTeamId;
	private boolean _setOriginalChallengeTeamId;
	private long _columnBitmask;
	private ChallengeTeamMember _escapedModel;
}