/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.model.WorkflowSimulation;
import org.kisti.edison.model.WorkflowSimulationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the WorkflowSimulation service. Represents a row in the &quot;EDWF_WorkflowSimulation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.model.WorkflowSimulationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkflowSimulationImpl}.
 * </p>
 *
 * @author EDISON
 * @see WorkflowSimulationImpl
 * @see org.kisti.edison.model.WorkflowSimulation
 * @see org.kisti.edison.model.WorkflowSimulationModel
 * @generated
 */
public class WorkflowSimulationModelImpl extends BaseModelImpl<WorkflowSimulation>
	implements WorkflowSimulationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a workflow simulation model instance should use the {@link org.kisti.edison.model.WorkflowSimulation} interface instead.
	 */
	public static final String TABLE_NAME = "EDWF_WorkflowSimulation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "simulationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classId", Types.BIGINT },
			{ "customId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "testYn", Types.BOOLEAN },
			{ "workflowId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDWF_WorkflowSimulation (simulationId LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,classId LONG,customId LONG,title VARCHAR(75) null,testYn BOOLEAN,workflowId LONG)";
	public static final String TABLE_SQL_DROP = "drop table EDWF_WorkflowSimulation";
	public static final String ORDER_BY_JPQL = " ORDER BY workflowSimulation.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDWF_WorkflowSimulation.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.model.WorkflowSimulation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.model.WorkflowSimulation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.model.WorkflowSimulation"),
			true);
	public static long TITLE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long WORKFLOWID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;
	public static final String MAPPING_TABLE_EDWF_WORKFLOWSIMULATION_WORKFLOWSIMULATIONJOB_NAME =
		"EDWF_WorkflowSimulation_WorkflowSimulationJob";
	public static final Object[][] MAPPING_TABLE_EDWF_WORKFLOWSIMULATION_WORKFLOWSIMULATIONJOB_COLUMNS =
		{
			{ "simulationId", Types.BIGINT },
			{ "simulationJobId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDWF_WORKFLOWSIMULATION_WORKFLOWSIMULATIONJOB_SQL_CREATE =
		"create table EDWF_WorkflowSimulation_WorkflowSimulationJob (simulationId LONG not null,simulationJobId LONG not null,primary key (simulationId, simulationJobId))";
	public static final boolean FINDER_CACHE_ENABLED_EDWF_WORKFLOWSIMULATION_WORKFLOWSIMULATIONJOB =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.EDWF_WorkflowSimulation_WorkflowSimulationJob"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.model.WorkflowSimulation"));

	public WorkflowSimulationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _simulationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSimulationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _simulationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WorkflowSimulation.class;
	}

	@Override
	public String getModelClassName() {
		return WorkflowSimulation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("simulationId", getSimulationId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classId", getClassId());
		attributes.put("customId", getCustomId());
		attributes.put("title", getTitle());
		attributes.put("testYn", getTestYn());
		attributes.put("workflowId", getWorkflowId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long simulationId = (Long)attributes.get("simulationId");

		if (simulationId != null) {
			setSimulationId(simulationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		Long customId = (Long)attributes.get("customId");

		if (customId != null) {
			setCustomId(customId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Boolean testYn = (Boolean)attributes.get("testYn");

		if (testYn != null) {
			setTestYn(testYn);
		}

		Long workflowId = (Long)attributes.get("workflowId");

		if (workflowId != null) {
			setWorkflowId(workflowId);
		}
	}

	@Override
	public long getSimulationId() {
		return _simulationId;
	}

	@Override
	public void setSimulationId(long simulationId) {
		_simulationId = simulationId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_classId = classId;
	}

	@Override
	public long getCustomId() {
		return _customId;
	}

	@Override
	public void setCustomId(long customId) {
		_customId = customId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@Override
	public boolean getTestYn() {
		return _testYn;
	}

	@Override
	public boolean isTestYn() {
		return _testYn;
	}

	@Override
	public void setTestYn(boolean testYn) {
		_testYn = testYn;
	}

	@Override
	public long getWorkflowId() {
		return _workflowId;
	}

	@Override
	public void setWorkflowId(long workflowId) {
		_columnBitmask |= WORKFLOWID_COLUMN_BITMASK;

		if (!_setOriginalWorkflowId) {
			_setOriginalWorkflowId = true;

			_originalWorkflowId = _workflowId;
		}

		_workflowId = workflowId;
	}

	public long getOriginalWorkflowId() {
		return _originalWorkflowId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WorkflowSimulation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WorkflowSimulation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WorkflowSimulation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkflowSimulationImpl workflowSimulationImpl = new WorkflowSimulationImpl();

		workflowSimulationImpl.setSimulationId(getSimulationId());
		workflowSimulationImpl.setUserId(getUserId());
		workflowSimulationImpl.setCreateDate(getCreateDate());
		workflowSimulationImpl.setModifiedDate(getModifiedDate());
		workflowSimulationImpl.setClassId(getClassId());
		workflowSimulationImpl.setCustomId(getCustomId());
		workflowSimulationImpl.setTitle(getTitle());
		workflowSimulationImpl.setTestYn(getTestYn());
		workflowSimulationImpl.setWorkflowId(getWorkflowId());

		workflowSimulationImpl.resetOriginalValues();

		return workflowSimulationImpl;
	}

	@Override
	public int compareTo(WorkflowSimulation workflowSimulation) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				workflowSimulation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WorkflowSimulation)) {
			return false;
		}

		WorkflowSimulation workflowSimulation = (WorkflowSimulation)obj;

		long primaryKey = workflowSimulation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WorkflowSimulationModelImpl workflowSimulationModelImpl = this;

		workflowSimulationModelImpl._originalUserId = workflowSimulationModelImpl._userId;

		workflowSimulationModelImpl._setOriginalUserId = false;

		workflowSimulationModelImpl._originalTitle = workflowSimulationModelImpl._title;

		workflowSimulationModelImpl._originalWorkflowId = workflowSimulationModelImpl._workflowId;

		workflowSimulationModelImpl._setOriginalWorkflowId = false;

		workflowSimulationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WorkflowSimulation> toCacheModel() {
		WorkflowSimulationCacheModel workflowSimulationCacheModel = new WorkflowSimulationCacheModel();

		workflowSimulationCacheModel.simulationId = getSimulationId();

		workflowSimulationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			workflowSimulationCacheModel.createDate = createDate.getTime();
		}
		else {
			workflowSimulationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			workflowSimulationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			workflowSimulationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		workflowSimulationCacheModel.classId = getClassId();

		workflowSimulationCacheModel.customId = getCustomId();

		workflowSimulationCacheModel.title = getTitle();

		String title = workflowSimulationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			workflowSimulationCacheModel.title = null;
		}

		workflowSimulationCacheModel.testYn = getTestYn();

		workflowSimulationCacheModel.workflowId = getWorkflowId();

		return workflowSimulationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{simulationId=");
		sb.append(getSimulationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", customId=");
		sb.append(getCustomId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", testYn=");
		sb.append(getTestYn());
		sb.append(", workflowId=");
		sb.append(getWorkflowId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.model.WorkflowSimulation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>simulationId</column-name><column-value><![CDATA[");
		sb.append(getSimulationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customId</column-name><column-value><![CDATA[");
		sb.append(getCustomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testYn</column-name><column-value><![CDATA[");
		sb.append(getTestYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WorkflowSimulation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WorkflowSimulation.class
		};
	private long _simulationId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classId;
	private long _customId;
	private String _title;
	private String _originalTitle;
	private boolean _testYn;
	private long _workflowId;
	private long _originalWorkflowId;
	private boolean _setOriginalWorkflowId;
	private long _columnBitmask;
	private WorkflowSimulation _escapedModel;
}