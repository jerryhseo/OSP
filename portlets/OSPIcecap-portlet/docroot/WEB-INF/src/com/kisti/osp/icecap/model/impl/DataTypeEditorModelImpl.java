/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icecap.model.impl;

import com.kisti.osp.icecap.model.DataTypeEditor;
import com.kisti.osp.icecap.model.DataTypeEditorModel;
import com.kisti.osp.icecap.model.DataTypeEditorSoap;
import com.kisti.osp.icecap.service.persistence.DataTypeEditorPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataTypeEditor service. Represents a row in the &quot;icecap_DataTypeEditor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.icecap.model.DataTypeEditorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeEditorImpl}.
 * </p>
 *
 * @author Young-K. Suh and Jerry H. Seo
 * @see DataTypeEditorImpl
 * @see com.kisti.osp.icecap.model.DataTypeEditor
 * @see com.kisti.osp.icecap.model.DataTypeEditorModel
 * @generated
 */
@JSON(strict = true)
public class DataTypeEditorModelImpl extends BaseModelImpl<DataTypeEditor>
	implements DataTypeEditorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type editor model instance should use the {@link com.kisti.osp.icecap.model.DataTypeEditor} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataTypeEditor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "typeId", Types.BIGINT },
			{ "editorId", Types.BIGINT },
			{ "isDefault", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table icecap_DataTypeEditor (typeId LONG not null,editorId LONG not null,isDefault BOOLEAN,primary key (typeId, editorId))";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataTypeEditor";
	public static final String ORDER_BY_JPQL = " ORDER BY dataTypeEditor.id.typeId ASC, dataTypeEditor.id.editorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataTypeEditor.typeId ASC, icecap_DataTypeEditor.editorId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icecap.model.DataTypeEditor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icecap.model.DataTypeEditor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icecap.model.DataTypeEditor"),
			true);
	public static long EDITORID_COLUMN_BITMASK = 1L;
	public static long TYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataTypeEditor toModel(DataTypeEditorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataTypeEditor model = new DataTypeEditorImpl();

		model.setTypeId(soapModel.getTypeId());
		model.setEditorId(soapModel.getEditorId());
		model.setIsDefault(soapModel.getIsDefault());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataTypeEditor> toModels(DataTypeEditorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataTypeEditor> models = new ArrayList<DataTypeEditor>(soapModels.length);

		for (DataTypeEditorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icecap.model.DataTypeEditor"));

	public DataTypeEditorModelImpl() {
	}

	@Override
	public DataTypeEditorPK getPrimaryKey() {
		return new DataTypeEditorPK(_typeId, _editorId);
	}

	@Override
	public void setPrimaryKey(DataTypeEditorPK primaryKey) {
		setTypeId(primaryKey.typeId);
		setEditorId(primaryKey.editorId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DataTypeEditorPK(_typeId, _editorId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DataTypeEditorPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DataTypeEditor.class;
	}

	@Override
	public String getModelClassName() {
		return DataTypeEditor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("typeId", getTypeId());
		attributes.put("editorId", getEditorId());
		attributes.put("isDefault", getIsDefault());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long editorId = (Long)attributes.get("editorId");

		if (editorId != null) {
			setEditorId(editorId);
		}

		Boolean isDefault = (Boolean)attributes.get("isDefault");

		if (isDefault != null) {
			setIsDefault(isDefault);
		}
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getEditorId() {
		return _editorId;
	}

	@Override
	public void setEditorId(long editorId) {
		_columnBitmask |= EDITORID_COLUMN_BITMASK;

		if (!_setOriginalEditorId) {
			_setOriginalEditorId = true;

			_originalEditorId = _editorId;
		}

		_editorId = editorId;
	}

	public long getOriginalEditorId() {
		return _originalEditorId;
	}

	@JSON
	@Override
	public boolean getIsDefault() {
		return _isDefault;
	}

	@Override
	public boolean isIsDefault() {
		return _isDefault;
	}

	@Override
	public void setIsDefault(boolean isDefault) {
		_isDefault = isDefault;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DataTypeEditor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataTypeEditor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeEditorImpl dataTypeEditorImpl = new DataTypeEditorImpl();

		dataTypeEditorImpl.setTypeId(getTypeId());
		dataTypeEditorImpl.setEditorId(getEditorId());
		dataTypeEditorImpl.setIsDefault(getIsDefault());

		dataTypeEditorImpl.resetOriginalValues();

		return dataTypeEditorImpl;
	}

	@Override
	public int compareTo(DataTypeEditor dataTypeEditor) {
		DataTypeEditorPK primaryKey = dataTypeEditor.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataTypeEditor)) {
			return false;
		}

		DataTypeEditor dataTypeEditor = (DataTypeEditor)obj;

		DataTypeEditorPK primaryKey = dataTypeEditor.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DataTypeEditorModelImpl dataTypeEditorModelImpl = this;

		dataTypeEditorModelImpl._originalTypeId = dataTypeEditorModelImpl._typeId;

		dataTypeEditorModelImpl._setOriginalTypeId = false;

		dataTypeEditorModelImpl._originalEditorId = dataTypeEditorModelImpl._editorId;

		dataTypeEditorModelImpl._setOriginalEditorId = false;

		dataTypeEditorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataTypeEditor> toCacheModel() {
		DataTypeEditorCacheModel dataTypeEditorCacheModel = new DataTypeEditorCacheModel();

		dataTypeEditorCacheModel.typeId = getTypeId();

		dataTypeEditorCacheModel.editorId = getEditorId();

		dataTypeEditorCacheModel.isDefault = getIsDefault();

		return dataTypeEditorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{typeId=");
		sb.append(getTypeId());
		sb.append(", editorId=");
		sb.append(getEditorId());
		sb.append(", isDefault=");
		sb.append(getIsDefault());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icecap.model.DataTypeEditor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editorId</column-name><column-value><![CDATA[");
		sb.append(getEditorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDefault</column-name><column-value><![CDATA[");
		sb.append(getIsDefault());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataTypeEditor.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataTypeEditor.class
		};
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _editorId;
	private long _originalEditorId;
	private boolean _setOriginalEditorId;
	private boolean _isDefault;
	private long _columnBitmask;
	private DataTypeEditor _escapedModel;
}