/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icecap.model.impl;

import com.kisti.osp.icecap.model.DataEntryProvenance;
import com.kisti.osp.icecap.model.DataEntryProvenanceModel;
import com.kisti.osp.icecap.model.DataEntryProvenanceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataEntryProvenance service. Represents a row in the &quot;icecap_DataEntryProvenance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.icecap.model.DataEntryProvenanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataEntryProvenanceImpl}.
 * </p>
 *
 * @author Young-K. Suh and Jerry H. Seo
 * @see DataEntryProvenanceImpl
 * @see com.kisti.osp.icecap.model.DataEntryProvenance
 * @see com.kisti.osp.icecap.model.DataEntryProvenanceModel
 * @generated
 */
@JSON(strict = true)
public class DataEntryProvenanceModelImpl extends BaseModelImpl<DataEntryProvenance>
	implements DataEntryProvenanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data entry provenance model instance should use the {@link com.kisti.osp.icecap.model.DataEntryProvenance} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataEntryProvenance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entryId", Types.BIGINT },
			{ "inputData", Types.VARCHAR },
			{ "PROVStructure", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table icecap_DataEntryProvenance (entryId LONG not null primary key,inputData VARCHAR(75) null,PROVStructure VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataEntryProvenance";
	public static final String ORDER_BY_JPQL = " ORDER BY dataEntryProvenance.entryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataEntryProvenance.entryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icecap.model.DataEntryProvenance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icecap.model.DataEntryProvenance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icecap.model.DataEntryProvenance"),
			true);
	public static long PROVSTRUCTURE_COLUMN_BITMASK = 1L;
	public static long INPUTDATA_COLUMN_BITMASK = 2L;
	public static long ENTRYID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataEntryProvenance toModel(DataEntryProvenanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataEntryProvenance model = new DataEntryProvenanceImpl();

		model.setEntryId(soapModel.getEntryId());
		model.setInputData(soapModel.getInputData());
		model.setPROVStructure(soapModel.getPROVStructure());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataEntryProvenance> toModels(
		DataEntryProvenanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataEntryProvenance> models = new ArrayList<DataEntryProvenance>(soapModels.length);

		for (DataEntryProvenanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icecap.model.DataEntryProvenance"));

	public DataEntryProvenanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataEntryProvenance.class;
	}

	@Override
	public String getModelClassName() {
		return DataEntryProvenance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entryId", getEntryId());
		attributes.put("inputData", getInputData());
		attributes.put("PROVStructure", getPROVStructure());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		String inputData = (String)attributes.get("inputData");

		if (inputData != null) {
			setInputData(inputData);
		}

		String PROVStructure = (String)attributes.get("PROVStructure");

		if (PROVStructure != null) {
			setPROVStructure(PROVStructure);
		}
	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	@JSON
	@Override
	public String getInputData() {
		if (_inputData == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputData;
		}
	}

	@Override
	public void setInputData(String inputData) {
		_columnBitmask |= INPUTDATA_COLUMN_BITMASK;

		if (_originalInputData == null) {
			_originalInputData = _inputData;
		}

		_inputData = inputData;
	}

	public String getOriginalInputData() {
		return GetterUtil.getString(_originalInputData);
	}

	@JSON
	@Override
	public String getPROVStructure() {
		if (_PROVStructure == null) {
			return StringPool.BLANK;
		}
		else {
			return _PROVStructure;
		}
	}

	@Override
	public void setPROVStructure(String PROVStructure) {
		_columnBitmask |= PROVSTRUCTURE_COLUMN_BITMASK;

		if (_originalPROVStructure == null) {
			_originalPROVStructure = _PROVStructure;
		}

		_PROVStructure = PROVStructure;
	}

	public String getOriginalPROVStructure() {
		return GetterUtil.getString(_originalPROVStructure);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DataEntryProvenance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataEntryProvenance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataEntryProvenance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataEntryProvenanceImpl dataEntryProvenanceImpl = new DataEntryProvenanceImpl();

		dataEntryProvenanceImpl.setEntryId(getEntryId());
		dataEntryProvenanceImpl.setInputData(getInputData());
		dataEntryProvenanceImpl.setPROVStructure(getPROVStructure());

		dataEntryProvenanceImpl.resetOriginalValues();

		return dataEntryProvenanceImpl;
	}

	@Override
	public int compareTo(DataEntryProvenance dataEntryProvenance) {
		long primaryKey = dataEntryProvenance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataEntryProvenance)) {
			return false;
		}

		DataEntryProvenance dataEntryProvenance = (DataEntryProvenance)obj;

		long primaryKey = dataEntryProvenance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DataEntryProvenanceModelImpl dataEntryProvenanceModelImpl = this;

		dataEntryProvenanceModelImpl._originalInputData = dataEntryProvenanceModelImpl._inputData;

		dataEntryProvenanceModelImpl._originalPROVStructure = dataEntryProvenanceModelImpl._PROVStructure;

		dataEntryProvenanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataEntryProvenance> toCacheModel() {
		DataEntryProvenanceCacheModel dataEntryProvenanceCacheModel = new DataEntryProvenanceCacheModel();

		dataEntryProvenanceCacheModel.entryId = getEntryId();

		dataEntryProvenanceCacheModel.inputData = getInputData();

		String inputData = dataEntryProvenanceCacheModel.inputData;

		if ((inputData != null) && (inputData.length() == 0)) {
			dataEntryProvenanceCacheModel.inputData = null;
		}

		dataEntryProvenanceCacheModel.PROVStructure = getPROVStructure();

		String PROVStructure = dataEntryProvenanceCacheModel.PROVStructure;

		if ((PROVStructure != null) && (PROVStructure.length() == 0)) {
			dataEntryProvenanceCacheModel.PROVStructure = null;
		}

		return dataEntryProvenanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{entryId=");
		sb.append(getEntryId());
		sb.append(", inputData=");
		sb.append(getInputData());
		sb.append(", PROVStructure=");
		sb.append(getPROVStructure());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icecap.model.DataEntryProvenance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputData</column-name><column-value><![CDATA[");
		sb.append(getInputData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROVStructure</column-name><column-value><![CDATA[");
		sb.append(getPROVStructure());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataEntryProvenance.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataEntryProvenance.class
		};
	private long _entryId;
	private String _inputData;
	private String _originalInputData;
	private String _PROVStructure;
	private String _originalPROVStructure;
	private long _columnBitmask;
	private DataEntryProvenance _escapedModel;
}