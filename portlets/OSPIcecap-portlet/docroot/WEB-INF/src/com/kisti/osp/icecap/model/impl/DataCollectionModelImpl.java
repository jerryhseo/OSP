/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icecap.model.impl;

import com.kisti.osp.icecap.model.DataCollection;
import com.kisti.osp.icecap.model.DataCollectionModel;
import com.kisti.osp.icecap.model.DataCollectionSoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the DataCollection service. Represents a row in the &quot;icecap_DataCollection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.icecap.model.DataCollectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataCollectionImpl}.
 * </p>
 *
 * @author Young-K. Suh and Jerry H. Seo
 * @see DataCollectionImpl
 * @see com.kisti.osp.icecap.model.DataCollection
 * @see com.kisti.osp.icecap.model.DataCollectionModel
 * @generated
 */
@JSON(strict = true)
public class DataCollectionModelImpl extends BaseModelImpl<DataCollection>
	implements DataCollectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data collection model instance should use the {@link com.kisti.osp.icecap.model.DataCollection} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataCollection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "description", Types.VARCHAR },
			{ "targetLanguage", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "accessMethod", Types.VARCHAR },
			{ "collectionId", Types.BIGINT },
			{ "typeId", Types.BIGINT },
			{ "folderId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table icecap_DataCollection (uuid_ VARCHAR(75) null,name VARCHAR(75) null,version VARCHAR(75) null,title STRING null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,description STRING null,targetLanguage VARCHAR(75) null,status INTEGER,accessMethod VARCHAR(75) null,collectionId LONG not null primary key,typeId LONG,folderId LONG)";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataCollection";
	public static final String ORDER_BY_JPQL = " ORDER BY dataCollection.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataCollection.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icecap.model.DataCollection"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icecap.model.DataCollection"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icecap.model.DataCollection"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;
	public static long TARGETLANGUAGE_COLUMN_BITMASK = 16L;
	public static long TITLE_COLUMN_BITMASK = 32L;
	public static long TYPEID_COLUMN_BITMASK = 64L;
	public static long USERID_COLUMN_BITMASK = 128L;
	public static long UUID_COLUMN_BITMASK = 256L;
	public static long VERSION_COLUMN_BITMASK = 512L;
	public static long CREATEDATE_COLUMN_BITMASK = 1024L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataCollection toModel(DataCollectionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataCollection model = new DataCollectionImpl();

		model.setUuid(soapModel.getUuid());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setTitle(soapModel.getTitle());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDescription(soapModel.getDescription());
		model.setTargetLanguage(soapModel.getTargetLanguage());
		model.setStatus(soapModel.getStatus());
		model.setAccessMethod(soapModel.getAccessMethod());
		model.setCollectionId(soapModel.getCollectionId());
		model.setTypeId(soapModel.getTypeId());
		model.setFolderId(soapModel.getFolderId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataCollection> toModels(DataCollectionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataCollection> models = new ArrayList<DataCollection>(soapModels.length);

		for (DataCollectionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icecap.model.DataCollection"));

	public DataCollectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCollectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataCollection.class;
	}

	@Override
	public String getModelClassName() {
		return DataCollection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("name", getName());
		attributes.put("version", getVersion());
		attributes.put("title", getTitle());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("description", getDescription());
		attributes.put("targetLanguage", getTargetLanguage());
		attributes.put("status", getStatus());
		attributes.put("accessMethod", getAccessMethod());
		attributes.put("collectionId", getCollectionId());
		attributes.put("typeId", getTypeId());
		attributes.put("folderId", getFolderId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String targetLanguage = (String)attributes.get("targetLanguage");

		if (targetLanguage != null) {
			setTargetLanguage(targetLanguage);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String accessMethod = (String)attributes.get("accessMethod");

		if (accessMethod != null) {
			setAccessMethod(accessMethod);
		}

		Long collectionId = (Long)attributes.get("collectionId");

		if (collectionId != null) {
			setCollectionId(collectionId);
		}

		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long folderId = (Long)attributes.get("folderId");

		if (folderId != null) {
			setFolderId(folderId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_columnBitmask |= VERSION_COLUMN_BITMASK;

		if (_originalVersion == null) {
			_originalVersion = _version;
		}

		_version = version;
	}

	public String getOriginalVersion() {
		return GetterUtil.getString(_originalVersion);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTargetLanguage() {
		if (_targetLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetLanguage;
		}
	}

	@Override
	public void setTargetLanguage(String targetLanguage) {
		_columnBitmask |= TARGETLANGUAGE_COLUMN_BITMASK;

		if (_originalTargetLanguage == null) {
			_originalTargetLanguage = _targetLanguage;
		}

		_targetLanguage = targetLanguage;
	}

	public String getOriginalTargetLanguage() {
		return GetterUtil.getString(_originalTargetLanguage);
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getAccessMethod() {
		if (_accessMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessMethod;
		}
	}

	@Override
	public void setAccessMethod(String accessMethod) {
		_accessMethod = accessMethod;
	}

	@JSON
	@Override
	public long getCollectionId() {
		return _collectionId;
	}

	@Override
	public void setCollectionId(long collectionId) {
		_collectionId = collectionId;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DataCollection.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DataCollection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public DataCollection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataCollection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataCollectionImpl dataCollectionImpl = new DataCollectionImpl();

		dataCollectionImpl.setUuid(getUuid());
		dataCollectionImpl.setName(getName());
		dataCollectionImpl.setVersion(getVersion());
		dataCollectionImpl.setTitle(getTitle());
		dataCollectionImpl.setGroupId(getGroupId());
		dataCollectionImpl.setCompanyId(getCompanyId());
		dataCollectionImpl.setUserId(getUserId());
		dataCollectionImpl.setCreateDate(getCreateDate());
		dataCollectionImpl.setModifiedDate(getModifiedDate());
		dataCollectionImpl.setDescription(getDescription());
		dataCollectionImpl.setTargetLanguage(getTargetLanguage());
		dataCollectionImpl.setStatus(getStatus());
		dataCollectionImpl.setAccessMethod(getAccessMethod());
		dataCollectionImpl.setCollectionId(getCollectionId());
		dataCollectionImpl.setTypeId(getTypeId());
		dataCollectionImpl.setFolderId(getFolderId());

		dataCollectionImpl.resetOriginalValues();

		return dataCollectionImpl;
	}

	@Override
	public int compareTo(DataCollection dataCollection) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				dataCollection.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataCollection)) {
			return false;
		}

		DataCollection dataCollection = (DataCollection)obj;

		long primaryKey = dataCollection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DataCollectionModelImpl dataCollectionModelImpl = this;

		dataCollectionModelImpl._originalUuid = dataCollectionModelImpl._uuid;

		dataCollectionModelImpl._originalName = dataCollectionModelImpl._name;

		dataCollectionModelImpl._originalVersion = dataCollectionModelImpl._version;

		dataCollectionModelImpl._originalTitle = dataCollectionModelImpl._title;

		dataCollectionModelImpl._originalGroupId = dataCollectionModelImpl._groupId;

		dataCollectionModelImpl._setOriginalGroupId = false;

		dataCollectionModelImpl._originalCompanyId = dataCollectionModelImpl._companyId;

		dataCollectionModelImpl._setOriginalCompanyId = false;

		dataCollectionModelImpl._originalUserId = dataCollectionModelImpl._userId;

		dataCollectionModelImpl._setOriginalUserId = false;

		dataCollectionModelImpl._originalTargetLanguage = dataCollectionModelImpl._targetLanguage;

		dataCollectionModelImpl._originalStatus = dataCollectionModelImpl._status;

		dataCollectionModelImpl._setOriginalStatus = false;

		dataCollectionModelImpl._originalTypeId = dataCollectionModelImpl._typeId;

		dataCollectionModelImpl._setOriginalTypeId = false;

		dataCollectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataCollection> toCacheModel() {
		DataCollectionCacheModel dataCollectionCacheModel = new DataCollectionCacheModel();

		dataCollectionCacheModel.uuid = getUuid();

		String uuid = dataCollectionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dataCollectionCacheModel.uuid = null;
		}

		dataCollectionCacheModel.name = getName();

		String name = dataCollectionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dataCollectionCacheModel.name = null;
		}

		dataCollectionCacheModel.version = getVersion();

		String version = dataCollectionCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			dataCollectionCacheModel.version = null;
		}

		dataCollectionCacheModel.title = getTitle();

		String title = dataCollectionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			dataCollectionCacheModel.title = null;
		}

		dataCollectionCacheModel.groupId = getGroupId();

		dataCollectionCacheModel.companyId = getCompanyId();

		dataCollectionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dataCollectionCacheModel.createDate = createDate.getTime();
		}
		else {
			dataCollectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dataCollectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dataCollectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dataCollectionCacheModel.description = getDescription();

		String description = dataCollectionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dataCollectionCacheModel.description = null;
		}

		dataCollectionCacheModel.targetLanguage = getTargetLanguage();

		String targetLanguage = dataCollectionCacheModel.targetLanguage;

		if ((targetLanguage != null) && (targetLanguage.length() == 0)) {
			dataCollectionCacheModel.targetLanguage = null;
		}

		dataCollectionCacheModel.status = getStatus();

		dataCollectionCacheModel.accessMethod = getAccessMethod();

		String accessMethod = dataCollectionCacheModel.accessMethod;

		if ((accessMethod != null) && (accessMethod.length() == 0)) {
			dataCollectionCacheModel.accessMethod = null;
		}

		dataCollectionCacheModel.collectionId = getCollectionId();

		dataCollectionCacheModel.typeId = getTypeId();

		dataCollectionCacheModel.folderId = getFolderId();

		return dataCollectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", targetLanguage=");
		sb.append(getTargetLanguage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", accessMethod=");
		sb.append(getAccessMethod());
		sb.append(", collectionId=");
		sb.append(getCollectionId());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icecap.model.DataCollection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetLanguage</column-name><column-value><![CDATA[");
		sb.append(getTargetLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessMethod</column-name><column-value><![CDATA[");
		sb.append(getAccessMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionId</column-name><column-value><![CDATA[");
		sb.append(getCollectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataCollection.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataCollection.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _name;
	private String _originalName;
	private String _version;
	private String _originalVersion;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _targetLanguage;
	private String _originalTargetLanguage;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _accessMethod;
	private long _collectionId;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _folderId;
	private long _columnBitmask;
	private DataCollection _escapedModel;
}