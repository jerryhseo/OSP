/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icecap.model.impl;

import com.kisti.osp.icecap.model.DataCollectionLayout;
import com.kisti.osp.icecap.model.DataCollectionLayoutModel;
import com.kisti.osp.icecap.model.DataCollectionLayoutSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataCollectionLayout service. Represents a row in the &quot;icecap_DataCollectionLayout&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.icecap.model.DataCollectionLayoutModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataCollectionLayoutImpl}.
 * </p>
 *
 * @author Young-K. Suh and Jerry H. Seo
 * @see DataCollectionLayoutImpl
 * @see com.kisti.osp.icecap.model.DataCollectionLayout
 * @see com.kisti.osp.icecap.model.DataCollectionLayoutModel
 * @generated
 */
@JSON(strict = true)
public class DataCollectionLayoutModelImpl extends BaseModelImpl<DataCollectionLayout>
	implements DataCollectionLayoutModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data collection layout model instance should use the {@link com.kisti.osp.icecap.model.DataCollectionLayout} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataCollectionLayout";
	public static final Object[][] TABLE_COLUMNS = {
			{ "collectionId", Types.BIGINT },
			{ "layoutStr", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table icecap_DataCollectionLayout (collectionId LONG not null primary key,layoutStr VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataCollectionLayout";
	public static final String ORDER_BY_JPQL = " ORDER BY dataCollectionLayout.collectionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataCollectionLayout.collectionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icecap.model.DataCollectionLayout"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icecap.model.DataCollectionLayout"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icecap.model.DataCollectionLayout"),
			true);
	public static long LAYOUTSTR_COLUMN_BITMASK = 1L;
	public static long COLLECTIONID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataCollectionLayout toModel(
		DataCollectionLayoutSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataCollectionLayout model = new DataCollectionLayoutImpl();

		model.setCollectionId(soapModel.getCollectionId());
		model.setLayoutStr(soapModel.getLayoutStr());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataCollectionLayout> toModels(
		DataCollectionLayoutSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataCollectionLayout> models = new ArrayList<DataCollectionLayout>(soapModels.length);

		for (DataCollectionLayoutSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icecap.model.DataCollectionLayout"));

	public DataCollectionLayoutModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCollectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataCollectionLayout.class;
	}

	@Override
	public String getModelClassName() {
		return DataCollectionLayout.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("collectionId", getCollectionId());
		attributes.put("layoutStr", getLayoutStr());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long collectionId = (Long)attributes.get("collectionId");

		if (collectionId != null) {
			setCollectionId(collectionId);
		}

		String layoutStr = (String)attributes.get("layoutStr");

		if (layoutStr != null) {
			setLayoutStr(layoutStr);
		}
	}

	@JSON
	@Override
	public long getCollectionId() {
		return _collectionId;
	}

	@Override
	public void setCollectionId(long collectionId) {
		_collectionId = collectionId;
	}

	@JSON
	@Override
	public String getLayoutStr() {
		if (_layoutStr == null) {
			return StringPool.BLANK;
		}
		else {
			return _layoutStr;
		}
	}

	@Override
	public void setLayoutStr(String layoutStr) {
		_columnBitmask |= LAYOUTSTR_COLUMN_BITMASK;

		if (_originalLayoutStr == null) {
			_originalLayoutStr = _layoutStr;
		}

		_layoutStr = layoutStr;
	}

	public String getOriginalLayoutStr() {
		return GetterUtil.getString(_originalLayoutStr);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DataCollectionLayout.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataCollectionLayout toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataCollectionLayout)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataCollectionLayoutImpl dataCollectionLayoutImpl = new DataCollectionLayoutImpl();

		dataCollectionLayoutImpl.setCollectionId(getCollectionId());
		dataCollectionLayoutImpl.setLayoutStr(getLayoutStr());

		dataCollectionLayoutImpl.resetOriginalValues();

		return dataCollectionLayoutImpl;
	}

	@Override
	public int compareTo(DataCollectionLayout dataCollectionLayout) {
		long primaryKey = dataCollectionLayout.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataCollectionLayout)) {
			return false;
		}

		DataCollectionLayout dataCollectionLayout = (DataCollectionLayout)obj;

		long primaryKey = dataCollectionLayout.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DataCollectionLayoutModelImpl dataCollectionLayoutModelImpl = this;

		dataCollectionLayoutModelImpl._originalLayoutStr = dataCollectionLayoutModelImpl._layoutStr;

		dataCollectionLayoutModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataCollectionLayout> toCacheModel() {
		DataCollectionLayoutCacheModel dataCollectionLayoutCacheModel = new DataCollectionLayoutCacheModel();

		dataCollectionLayoutCacheModel.collectionId = getCollectionId();

		dataCollectionLayoutCacheModel.layoutStr = getLayoutStr();

		String layoutStr = dataCollectionLayoutCacheModel.layoutStr;

		if ((layoutStr != null) && (layoutStr.length() == 0)) {
			dataCollectionLayoutCacheModel.layoutStr = null;
		}

		return dataCollectionLayoutCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{collectionId=");
		sb.append(getCollectionId());
		sb.append(", layoutStr=");
		sb.append(getLayoutStr());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icecap.model.DataCollectionLayout");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>collectionId</column-name><column-value><![CDATA[");
		sb.append(getCollectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>layoutStr</column-name><column-value><![CDATA[");
		sb.append(getLayoutStr());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataCollectionLayout.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataCollectionLayout.class
		};
	private long _collectionId;
	private String _layoutStr;
	private String _originalLayoutStr;
	private long _columnBitmask;
	private DataCollectionLayout _escapedModel;
}