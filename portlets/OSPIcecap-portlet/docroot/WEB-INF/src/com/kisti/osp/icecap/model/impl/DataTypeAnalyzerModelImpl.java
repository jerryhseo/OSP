/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.icecap.model.impl;

import com.kisti.osp.icecap.model.DataTypeAnalyzer;
import com.kisti.osp.icecap.model.DataTypeAnalyzerModel;
import com.kisti.osp.icecap.model.DataTypeAnalyzerSoap;
import com.kisti.osp.icecap.service.persistence.DataTypeAnalyzerPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataTypeAnalyzer service. Represents a row in the &quot;icecap_DataTypeAnalyzer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.icecap.model.DataTypeAnalyzerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeAnalyzerImpl}.
 * </p>
 *
 * @author Young-K. Suh and Jerry H. Seo
 * @see DataTypeAnalyzerImpl
 * @see com.kisti.osp.icecap.model.DataTypeAnalyzer
 * @see com.kisti.osp.icecap.model.DataTypeAnalyzerModel
 * @generated
 */
@JSON(strict = true)
public class DataTypeAnalyzerModelImpl extends BaseModelImpl<DataTypeAnalyzer>
	implements DataTypeAnalyzerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type analyzer model instance should use the {@link com.kisti.osp.icecap.model.DataTypeAnalyzer} interface instead.
	 */
	public static final String TABLE_NAME = "icecap_DataTypeAnalyzer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "typeId", Types.BIGINT },
			{ "analyzerId", Types.BIGINT },
			{ "isDefault", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table icecap_DataTypeAnalyzer (typeId LONG not null,analyzerId LONG not null,isDefault BOOLEAN,primary key (typeId, analyzerId))";
	public static final String TABLE_SQL_DROP = "drop table icecap_DataTypeAnalyzer";
	public static final String ORDER_BY_JPQL = " ORDER BY dataTypeAnalyzer.id.typeId ASC, dataTypeAnalyzer.id.analyzerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY icecap_DataTypeAnalyzer.typeId ASC, icecap_DataTypeAnalyzer.analyzerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.icecap.model.DataTypeAnalyzer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.icecap.model.DataTypeAnalyzer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.osp.icecap.model.DataTypeAnalyzer"),
			true);
	public static long ANALYZERID_COLUMN_BITMASK = 1L;
	public static long TYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataTypeAnalyzer toModel(DataTypeAnalyzerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataTypeAnalyzer model = new DataTypeAnalyzerImpl();

		model.setTypeId(soapModel.getTypeId());
		model.setAnalyzerId(soapModel.getAnalyzerId());
		model.setIsDefault(soapModel.getIsDefault());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataTypeAnalyzer> toModels(
		DataTypeAnalyzerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataTypeAnalyzer> models = new ArrayList<DataTypeAnalyzer>(soapModels.length);

		for (DataTypeAnalyzerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.icecap.model.DataTypeAnalyzer"));

	public DataTypeAnalyzerModelImpl() {
	}

	@Override
	public DataTypeAnalyzerPK getPrimaryKey() {
		return new DataTypeAnalyzerPK(_typeId, _analyzerId);
	}

	@Override
	public void setPrimaryKey(DataTypeAnalyzerPK primaryKey) {
		setTypeId(primaryKey.typeId);
		setAnalyzerId(primaryKey.analyzerId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DataTypeAnalyzerPK(_typeId, _analyzerId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DataTypeAnalyzerPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DataTypeAnalyzer.class;
	}

	@Override
	public String getModelClassName() {
		return DataTypeAnalyzer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("typeId", getTypeId());
		attributes.put("analyzerId", getAnalyzerId());
		attributes.put("isDefault", getIsDefault());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long analyzerId = (Long)attributes.get("analyzerId");

		if (analyzerId != null) {
			setAnalyzerId(analyzerId);
		}

		Boolean isDefault = (Boolean)attributes.get("isDefault");

		if (isDefault != null) {
			setIsDefault(isDefault);
		}
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getAnalyzerId() {
		return _analyzerId;
	}

	@Override
	public void setAnalyzerId(long analyzerId) {
		_columnBitmask |= ANALYZERID_COLUMN_BITMASK;

		if (!_setOriginalAnalyzerId) {
			_setOriginalAnalyzerId = true;

			_originalAnalyzerId = _analyzerId;
		}

		_analyzerId = analyzerId;
	}

	public long getOriginalAnalyzerId() {
		return _originalAnalyzerId;
	}

	@JSON
	@Override
	public boolean getIsDefault() {
		return _isDefault;
	}

	@Override
	public boolean isIsDefault() {
		return _isDefault;
	}

	@Override
	public void setIsDefault(boolean isDefault) {
		_isDefault = isDefault;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DataTypeAnalyzer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataTypeAnalyzer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeAnalyzerImpl dataTypeAnalyzerImpl = new DataTypeAnalyzerImpl();

		dataTypeAnalyzerImpl.setTypeId(getTypeId());
		dataTypeAnalyzerImpl.setAnalyzerId(getAnalyzerId());
		dataTypeAnalyzerImpl.setIsDefault(getIsDefault());

		dataTypeAnalyzerImpl.resetOriginalValues();

		return dataTypeAnalyzerImpl;
	}

	@Override
	public int compareTo(DataTypeAnalyzer dataTypeAnalyzer) {
		DataTypeAnalyzerPK primaryKey = dataTypeAnalyzer.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataTypeAnalyzer)) {
			return false;
		}

		DataTypeAnalyzer dataTypeAnalyzer = (DataTypeAnalyzer)obj;

		DataTypeAnalyzerPK primaryKey = dataTypeAnalyzer.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DataTypeAnalyzerModelImpl dataTypeAnalyzerModelImpl = this;

		dataTypeAnalyzerModelImpl._originalTypeId = dataTypeAnalyzerModelImpl._typeId;

		dataTypeAnalyzerModelImpl._setOriginalTypeId = false;

		dataTypeAnalyzerModelImpl._originalAnalyzerId = dataTypeAnalyzerModelImpl._analyzerId;

		dataTypeAnalyzerModelImpl._setOriginalAnalyzerId = false;

		dataTypeAnalyzerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataTypeAnalyzer> toCacheModel() {
		DataTypeAnalyzerCacheModel dataTypeAnalyzerCacheModel = new DataTypeAnalyzerCacheModel();

		dataTypeAnalyzerCacheModel.typeId = getTypeId();

		dataTypeAnalyzerCacheModel.analyzerId = getAnalyzerId();

		dataTypeAnalyzerCacheModel.isDefault = getIsDefault();

		return dataTypeAnalyzerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{typeId=");
		sb.append(getTypeId());
		sb.append(", analyzerId=");
		sb.append(getAnalyzerId());
		sb.append(", isDefault=");
		sb.append(getIsDefault());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.icecap.model.DataTypeAnalyzer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analyzerId</column-name><column-value><![CDATA[");
		sb.append(getAnalyzerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDefault</column-name><column-value><![CDATA[");
		sb.append(getIsDefault());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataTypeAnalyzer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataTypeAnalyzer.class
		};
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _analyzerId;
	private long _originalAnalyzerId;
	private boolean _setOriginalAnalyzerId;
	private boolean _isDefault;
	private long _columnBitmask;
	private DataTypeAnalyzer _escapedModel;
}