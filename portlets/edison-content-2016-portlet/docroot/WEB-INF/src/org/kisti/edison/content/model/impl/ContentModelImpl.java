/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.content.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.content.model.Content;
import org.kisti.edison.content.model.ContentModel;
import org.kisti.edison.content.model.ContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Content service. Represents a row in the &quot;EDMED_Content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.content.model.ContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentImpl}.
 * </p>
 *
 * @author EDISON
 * @see ContentImpl
 * @see org.kisti.edison.content.model.Content
 * @see org.kisti.edison.content.model.ContentModel
 * @generated
 */
@JSON(strict = true)
public class ContentModelImpl extends BaseModelImpl<Content>
	implements ContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content model instance should use the {@link org.kisti.edison.content.model.Content} interface instead.
	 */
	public static final String TABLE_NAME = "EDMED_Content";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentSeq", Types.BIGINT },
			{ "contentDiv", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "resume", Types.VARCHAR },
			{ "contentFileNm", Types.VARCHAR },
			{ "advancedStartFileNm", Types.VARCHAR },
			{ "serviceLanguage", Types.VARCHAR },
			{ "projectYn", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "viewCnt", Types.BIGINT },
			{ "insertId", Types.BIGINT },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateId", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP },
			{ "version", Types.VARCHAR },
			{ "openYn", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDMED_Content (uuid_ VARCHAR(75) null,contentSeq LONG not null primary key,contentDiv LONG,title STRING null,resume STRING null,contentFileNm STRING null,advancedStartFileNm VARCHAR(75) null,serviceLanguage VARCHAR(75) null,projectYn VARCHAR(75) null,projectId LONG,viewCnt LONG,insertId LONG,insertDate DATE null,updateId LONG,updateDate DATE null,version VARCHAR(75) null,openYn VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EDMED_Content";
	public static final String ORDER_BY_JPQL = " ORDER BY content.contentSeq ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDMED_Content.contentSeq ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.content.model.Content"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.content.model.Content"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.content.model.Content"),
			true);
	public static long CONTENTDIV_COLUMN_BITMASK = 1L;
	public static long CONTENTSEQ_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Content toModel(ContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Content model = new ContentImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentSeq(soapModel.getContentSeq());
		model.setContentDiv(soapModel.getContentDiv());
		model.setTitle(soapModel.getTitle());
		model.setResume(soapModel.getResume());
		model.setContentFileNm(soapModel.getContentFileNm());
		model.setAdvancedStartFileNm(soapModel.getAdvancedStartFileNm());
		model.setServiceLanguage(soapModel.getServiceLanguage());
		model.setProjectYn(soapModel.getProjectYn());
		model.setProjectId(soapModel.getProjectId());
		model.setViewCnt(soapModel.getViewCnt());
		model.setInsertId(soapModel.getInsertId());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateId(soapModel.getUpdateId());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setVersion(soapModel.getVersion());
		model.setOpenYn(soapModel.getOpenYn());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Content> toModels(ContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Content> models = new ArrayList<Content>(soapModels.length);

		for (ContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.content.model.Content"));

	public ContentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentSeq;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentSeq(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentSeq;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Content.class;
	}

	@Override
	public String getModelClassName() {
		return Content.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("contentSeq", getContentSeq());
		attributes.put("contentDiv", getContentDiv());
		attributes.put("title", getTitle());
		attributes.put("resume", getResume());
		attributes.put("contentFileNm", getContentFileNm());
		attributes.put("advancedStartFileNm", getAdvancedStartFileNm());
		attributes.put("serviceLanguage", getServiceLanguage());
		attributes.put("projectYn", getProjectYn());
		attributes.put("projectId", getProjectId());
		attributes.put("viewCnt", getViewCnt());
		attributes.put("insertId", getInsertId());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateId", getUpdateId());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("version", getVersion());
		attributes.put("openYn", getOpenYn());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long contentSeq = (Long)attributes.get("contentSeq");

		if (contentSeq != null) {
			setContentSeq(contentSeq);
		}

		Long contentDiv = (Long)attributes.get("contentDiv");

		if (contentDiv != null) {
			setContentDiv(contentDiv);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String resume = (String)attributes.get("resume");

		if (resume != null) {
			setResume(resume);
		}

		String contentFileNm = (String)attributes.get("contentFileNm");

		if (contentFileNm != null) {
			setContentFileNm(contentFileNm);
		}

		String advancedStartFileNm = (String)attributes.get(
				"advancedStartFileNm");

		if (advancedStartFileNm != null) {
			setAdvancedStartFileNm(advancedStartFileNm);
		}

		String serviceLanguage = (String)attributes.get("serviceLanguage");

		if (serviceLanguage != null) {
			setServiceLanguage(serviceLanguage);
		}

		String projectYn = (String)attributes.get("projectYn");

		if (projectYn != null) {
			setProjectYn(projectYn);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long viewCnt = (Long)attributes.get("viewCnt");

		if (viewCnt != null) {
			setViewCnt(viewCnt);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String openYn = (String)attributes.get("openYn");

		if (openYn != null) {
			setOpenYn(openYn);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getContentSeq() {
		return _contentSeq;
	}

	@Override
	public void setContentSeq(long contentSeq) {
		_columnBitmask |= CONTENTSEQ_COLUMN_BITMASK;

		if (!_setOriginalContentSeq) {
			_setOriginalContentSeq = true;

			_originalContentSeq = _contentSeq;
		}

		_contentSeq = contentSeq;
	}

	public long getOriginalContentSeq() {
		return _originalContentSeq;
	}

	@JSON
	@Override
	public long getContentDiv() {
		return _contentDiv;
	}

	@Override
	public void setContentDiv(long contentDiv) {
		_columnBitmask |= CONTENTDIV_COLUMN_BITMASK;

		if (!_setOriginalContentDiv) {
			_setOriginalContentDiv = true;

			_originalContentDiv = _contentDiv;
		}

		_contentDiv = contentDiv;
	}

	public long getOriginalContentDiv() {
		return _originalContentDiv;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getResume() {
		if (_resume == null) {
			return StringPool.BLANK;
		}
		else {
			return _resume;
		}
	}

	@Override
	public String getResume(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResume(languageId);
	}

	@Override
	public String getResume(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResume(languageId, useDefault);
	}

	@Override
	public String getResume(String languageId) {
		return LocalizationUtil.getLocalization(getResume(), languageId);
	}

	@Override
	public String getResume(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getResume(), languageId,
			useDefault);
	}

	@Override
	public String getResumeCurrentLanguageId() {
		return _resumeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getResumeCurrentValue() {
		Locale locale = getLocale(_resumeCurrentLanguageId);

		return getResume(locale);
	}

	@Override
	public Map<Locale, String> getResumeMap() {
		return LocalizationUtil.getLocalizationMap(getResume());
	}

	@Override
	public void setResume(String resume) {
		_resume = resume;
	}

	@Override
	public void setResume(String resume, Locale locale) {
		setResume(resume, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setResume(String resume, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(resume)) {
			setResume(LocalizationUtil.updateLocalization(getResume(),
					"Resume", resume, languageId, defaultLanguageId));
		}
		else {
			setResume(LocalizationUtil.removeLocalization(getResume(),
					"Resume", languageId));
		}
	}

	@Override
	public void setResumeCurrentLanguageId(String languageId) {
		_resumeCurrentLanguageId = languageId;
	}

	@Override
	public void setResumeMap(Map<Locale, String> resumeMap) {
		setResumeMap(resumeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setResumeMap(Map<Locale, String> resumeMap, Locale defaultLocale) {
		if (resumeMap == null) {
			return;
		}

		setResume(LocalizationUtil.updateLocalization(resumeMap, getResume(),
				"Resume", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContentFileNm() {
		if (_contentFileNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _contentFileNm;
		}
	}

	@Override
	public String getContentFileNm(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContentFileNm(languageId);
	}

	@Override
	public String getContentFileNm(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContentFileNm(languageId, useDefault);
	}

	@Override
	public String getContentFileNm(String languageId) {
		return LocalizationUtil.getLocalization(getContentFileNm(), languageId);
	}

	@Override
	public String getContentFileNm(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getContentFileNm(), languageId,
			useDefault);
	}

	@Override
	public String getContentFileNmCurrentLanguageId() {
		return _contentFileNmCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContentFileNmCurrentValue() {
		Locale locale = getLocale(_contentFileNmCurrentLanguageId);

		return getContentFileNm(locale);
	}

	@Override
	public Map<Locale, String> getContentFileNmMap() {
		return LocalizationUtil.getLocalizationMap(getContentFileNm());
	}

	@Override
	public void setContentFileNm(String contentFileNm) {
		_contentFileNm = contentFileNm;
	}

	@Override
	public void setContentFileNm(String contentFileNm, Locale locale) {
		setContentFileNm(contentFileNm, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setContentFileNm(String contentFileNm, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contentFileNm)) {
			setContentFileNm(LocalizationUtil.updateLocalization(
					getContentFileNm(), "ContentFileNm", contentFileNm,
					languageId, defaultLanguageId));
		}
		else {
			setContentFileNm(LocalizationUtil.removeLocalization(
					getContentFileNm(), "ContentFileNm", languageId));
		}
	}

	@Override
	public void setContentFileNmCurrentLanguageId(String languageId) {
		_contentFileNmCurrentLanguageId = languageId;
	}

	@Override
	public void setContentFileNmMap(Map<Locale, String> contentFileNmMap) {
		setContentFileNmMap(contentFileNmMap, LocaleUtil.getDefault());
	}

	@Override
	public void setContentFileNmMap(Map<Locale, String> contentFileNmMap,
		Locale defaultLocale) {
		if (contentFileNmMap == null) {
			return;
		}

		setContentFileNm(LocalizationUtil.updateLocalization(contentFileNmMap,
				getContentFileNm(), "ContentFileNm",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAdvancedStartFileNm() {
		if (_advancedStartFileNm == null) {
			return StringPool.BLANK;
		}
		else {
			return _advancedStartFileNm;
		}
	}

	@Override
	public void setAdvancedStartFileNm(String advancedStartFileNm) {
		_advancedStartFileNm = advancedStartFileNm;
	}

	@JSON
	@Override
	public String getServiceLanguage() {
		if (_serviceLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceLanguage;
		}
	}

	@Override
	public void setServiceLanguage(String serviceLanguage) {
		_serviceLanguage = serviceLanguage;
	}

	@JSON
	@Override
	public String getProjectYn() {
		if (_projectYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectYn;
		}
	}

	@Override
	public void setProjectYn(String projectYn) {
		_projectYn = projectYn;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getViewCnt() {
		return _viewCnt;
	}

	@Override
	public void setViewCnt(long viewCnt) {
		_viewCnt = viewCnt;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public String getOpenYn() {
		if (_openYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _openYn;
		}
	}

	@Override
	public void setOpenYn(String openYn) {
		_openYn = openYn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Content.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> resumeMap = getResumeMap();

		for (Map.Entry<Locale, String> entry : resumeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contentFileNmMap = getContentFileNmMap();

		for (Map.Entry<Locale, String> entry : contentFileNmMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String resume = getResume(defaultLocale);

		if (Validator.isNull(resume)) {
			setResume(getResume(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setResume(getResume(defaultLocale), defaultLocale, defaultLocale);
		}

		String contentFileNm = getContentFileNm(defaultLocale);

		if (Validator.isNull(contentFileNm)) {
			setContentFileNm(getContentFileNm(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setContentFileNm(getContentFileNm(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Content toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Content)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentImpl contentImpl = new ContentImpl();

		contentImpl.setUuid(getUuid());
		contentImpl.setContentSeq(getContentSeq());
		contentImpl.setContentDiv(getContentDiv());
		contentImpl.setTitle(getTitle());
		contentImpl.setResume(getResume());
		contentImpl.setContentFileNm(getContentFileNm());
		contentImpl.setAdvancedStartFileNm(getAdvancedStartFileNm());
		contentImpl.setServiceLanguage(getServiceLanguage());
		contentImpl.setProjectYn(getProjectYn());
		contentImpl.setProjectId(getProjectId());
		contentImpl.setViewCnt(getViewCnt());
		contentImpl.setInsertId(getInsertId());
		contentImpl.setInsertDate(getInsertDate());
		contentImpl.setUpdateId(getUpdateId());
		contentImpl.setUpdateDate(getUpdateDate());
		contentImpl.setVersion(getVersion());
		contentImpl.setOpenYn(getOpenYn());

		contentImpl.resetOriginalValues();

		return contentImpl;
	}

	@Override
	public int compareTo(Content content) {
		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Content)) {
			return false;
		}

		Content content = (Content)obj;

		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentModelImpl contentModelImpl = this;

		contentModelImpl._originalUuid = contentModelImpl._uuid;

		contentModelImpl._originalContentSeq = contentModelImpl._contentSeq;

		contentModelImpl._setOriginalContentSeq = false;

		contentModelImpl._originalContentDiv = contentModelImpl._contentDiv;

		contentModelImpl._setOriginalContentDiv = false;

		contentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Content> toCacheModel() {
		ContentCacheModel contentCacheModel = new ContentCacheModel();

		contentCacheModel.uuid = getUuid();

		String uuid = contentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contentCacheModel.uuid = null;
		}

		contentCacheModel.contentSeq = getContentSeq();

		contentCacheModel.contentDiv = getContentDiv();

		contentCacheModel.title = getTitle();

		String title = contentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			contentCacheModel.title = null;
		}

		contentCacheModel.resume = getResume();

		String resume = contentCacheModel.resume;

		if ((resume != null) && (resume.length() == 0)) {
			contentCacheModel.resume = null;
		}

		contentCacheModel.contentFileNm = getContentFileNm();

		String contentFileNm = contentCacheModel.contentFileNm;

		if ((contentFileNm != null) && (contentFileNm.length() == 0)) {
			contentCacheModel.contentFileNm = null;
		}

		contentCacheModel.advancedStartFileNm = getAdvancedStartFileNm();

		String advancedStartFileNm = contentCacheModel.advancedStartFileNm;

		if ((advancedStartFileNm != null) &&
				(advancedStartFileNm.length() == 0)) {
			contentCacheModel.advancedStartFileNm = null;
		}

		contentCacheModel.serviceLanguage = getServiceLanguage();

		String serviceLanguage = contentCacheModel.serviceLanguage;

		if ((serviceLanguage != null) && (serviceLanguage.length() == 0)) {
			contentCacheModel.serviceLanguage = null;
		}

		contentCacheModel.projectYn = getProjectYn();

		String projectYn = contentCacheModel.projectYn;

		if ((projectYn != null) && (projectYn.length() == 0)) {
			contentCacheModel.projectYn = null;
		}

		contentCacheModel.projectId = getProjectId();

		contentCacheModel.viewCnt = getViewCnt();

		contentCacheModel.insertId = getInsertId();

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			contentCacheModel.insertDate = insertDate.getTime();
		}
		else {
			contentCacheModel.insertDate = Long.MIN_VALUE;
		}

		contentCacheModel.updateId = getUpdateId();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			contentCacheModel.updateDate = updateDate.getTime();
		}
		else {
			contentCacheModel.updateDate = Long.MIN_VALUE;
		}

		contentCacheModel.version = getVersion();

		String version = contentCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			contentCacheModel.version = null;
		}

		contentCacheModel.openYn = getOpenYn();

		String openYn = contentCacheModel.openYn;

		if ((openYn != null) && (openYn.length() == 0)) {
			contentCacheModel.openYn = null;
		}

		return contentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentSeq=");
		sb.append(getContentSeq());
		sb.append(", contentDiv=");
		sb.append(getContentDiv());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", resume=");
		sb.append(getResume());
		sb.append(", contentFileNm=");
		sb.append(getContentFileNm());
		sb.append(", advancedStartFileNm=");
		sb.append(getAdvancedStartFileNm());
		sb.append(", serviceLanguage=");
		sb.append(getServiceLanguage());
		sb.append(", projectYn=");
		sb.append(getProjectYn());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", viewCnt=");
		sb.append(getViewCnt());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", openYn=");
		sb.append(getOpenYn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.content.model.Content");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentSeq</column-name><column-value><![CDATA[");
		sb.append(getContentSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentDiv</column-name><column-value><![CDATA[");
		sb.append(getContentDiv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resume</column-name><column-value><![CDATA[");
		sb.append(getResume());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentFileNm</column-name><column-value><![CDATA[");
		sb.append(getContentFileNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>advancedStartFileNm</column-name><column-value><![CDATA[");
		sb.append(getAdvancedStartFileNm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceLanguage</column-name><column-value><![CDATA[");
		sb.append(getServiceLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectYn</column-name><column-value><![CDATA[");
		sb.append(getProjectYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCnt</column-name><column-value><![CDATA[");
		sb.append(getViewCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openYn</column-name><column-value><![CDATA[");
		sb.append(getOpenYn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Content.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Content.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentSeq;
	private long _originalContentSeq;
	private boolean _setOriginalContentSeq;
	private long _contentDiv;
	private long _originalContentDiv;
	private boolean _setOriginalContentDiv;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _resume;
	private String _resumeCurrentLanguageId;
	private String _contentFileNm;
	private String _contentFileNmCurrentLanguageId;
	private String _advancedStartFileNm;
	private String _serviceLanguage;
	private String _projectYn;
	private long _projectId;
	private long _viewCnt;
	private long _insertId;
	private Date _insertDate;
	private long _updateId;
	private Date _updateDate;
	private String _version;
	private String _openYn;
	private long _columnBitmask;
	private Content _escapedModel;
}