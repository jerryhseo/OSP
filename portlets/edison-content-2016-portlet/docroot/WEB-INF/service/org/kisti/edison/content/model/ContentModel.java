/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.content.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Content service. Represents a row in the &quot;EDMED_Content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.content.model.impl.ContentModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.content.model.impl.ContentImpl}.
 * </p>
 *
 * @author EDISON
 * @see Content
 * @see org.kisti.edison.content.model.impl.ContentImpl
 * @see org.kisti.edison.content.model.impl.ContentModelImpl
 * @generated
 */
public interface ContentModel extends BaseModel<Content> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a content model instance should use the {@link Content} interface instead.
	 */

	/**
	 * Returns the primary key of this content.
	 *
	 * @return the primary key of this content
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this content.
	 *
	 * @param primaryKey the primary key of this content
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this content.
	 *
	 * @return the uuid of this content
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this content.
	 *
	 * @param uuid the uuid of this content
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the content seq of this content.
	 *
	 * @return the content seq of this content
	 */
	public long getContentSeq();

	/**
	 * Sets the content seq of this content.
	 *
	 * @param contentSeq the content seq of this content
	 */
	public void setContentSeq(long contentSeq);

	/**
	 * Returns the content div of this content.
	 *
	 * @return the content div of this content
	 */
	public long getContentDiv();

	/**
	 * Sets the content div of this content.
	 *
	 * @param contentDiv the content div of this content
	 */
	public void setContentDiv(long contentDiv);

	/**
	 * Returns the title of this content.
	 *
	 * @return the title of this content
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this content
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this content. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this content
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this content
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this content.
	 *
	 * @return the locales and localized titles of this content
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this content.
	 *
	 * @param title the title of this content
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this content in the language.
	 *
	 * @param title the localized title of this content
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this content in the language, and sets the default locale.
	 *
	 * @param title the localized title of this content
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this content from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this content
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this content from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this content
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the resume of this content.
	 *
	 * @return the resume of this content
	 */
	public String getResume();

	/**
	 * Returns the localized resume of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized resume of this content
	 */
	@AutoEscape
	public String getResume(Locale locale);

	/**
	 * Returns the localized resume of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized resume of this content. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getResume(Locale locale, boolean useDefault);

	/**
	 * Returns the localized resume of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized resume of this content
	 */
	@AutoEscape
	public String getResume(String languageId);

	/**
	 * Returns the localized resume of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized resume of this content
	 */
	@AutoEscape
	public String getResume(String languageId, boolean useDefault);

	@AutoEscape
	public String getResumeCurrentLanguageId();

	@AutoEscape
	public String getResumeCurrentValue();

	/**
	 * Returns a map of the locales and localized resumes of this content.
	 *
	 * @return the locales and localized resumes of this content
	 */
	public Map<Locale, String> getResumeMap();

	/**
	 * Sets the resume of this content.
	 *
	 * @param resume the resume of this content
	 */
	public void setResume(String resume);

	/**
	 * Sets the localized resume of this content in the language.
	 *
	 * @param resume the localized resume of this content
	 * @param locale the locale of the language
	 */
	public void setResume(String resume, Locale locale);

	/**
	 * Sets the localized resume of this content in the language, and sets the default locale.
	 *
	 * @param resume the localized resume of this content
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setResume(String resume, Locale locale, Locale defaultLocale);

	public void setResumeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized resumes of this content from the map of locales and localized resumes.
	 *
	 * @param resumeMap the locales and localized resumes of this content
	 */
	public void setResumeMap(Map<Locale, String> resumeMap);

	/**
	 * Sets the localized resumes of this content from the map of locales and localized resumes, and sets the default locale.
	 *
	 * @param resumeMap the locales and localized resumes of this content
	 * @param defaultLocale the default locale
	 */
	public void setResumeMap(Map<Locale, String> resumeMap, Locale defaultLocale);

	/**
	 * Returns the content file nm of this content.
	 *
	 * @return the content file nm of this content
	 */
	public String getContentFileNm();

	/**
	 * Returns the localized content file nm of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content file nm of this content
	 */
	@AutoEscape
	public String getContentFileNm(Locale locale);

	/**
	 * Returns the localized content file nm of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content file nm of this content. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContentFileNm(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content file nm of this content in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content file nm of this content
	 */
	@AutoEscape
	public String getContentFileNm(String languageId);

	/**
	 * Returns the localized content file nm of this content in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content file nm of this content
	 */
	@AutoEscape
	public String getContentFileNm(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentFileNmCurrentLanguageId();

	@AutoEscape
	public String getContentFileNmCurrentValue();

	/**
	 * Returns a map of the locales and localized content file nms of this content.
	 *
	 * @return the locales and localized content file nms of this content
	 */
	public Map<Locale, String> getContentFileNmMap();

	/**
	 * Sets the content file nm of this content.
	 *
	 * @param contentFileNm the content file nm of this content
	 */
	public void setContentFileNm(String contentFileNm);

	/**
	 * Sets the localized content file nm of this content in the language.
	 *
	 * @param contentFileNm the localized content file nm of this content
	 * @param locale the locale of the language
	 */
	public void setContentFileNm(String contentFileNm, Locale locale);

	/**
	 * Sets the localized content file nm of this content in the language, and sets the default locale.
	 *
	 * @param contentFileNm the localized content file nm of this content
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContentFileNm(String contentFileNm, Locale locale,
		Locale defaultLocale);

	public void setContentFileNmCurrentLanguageId(String languageId);

	/**
	 * Sets the localized content file nms of this content from the map of locales and localized content file nms.
	 *
	 * @param contentFileNmMap the locales and localized content file nms of this content
	 */
	public void setContentFileNmMap(Map<Locale, String> contentFileNmMap);

	/**
	 * Sets the localized content file nms of this content from the map of locales and localized content file nms, and sets the default locale.
	 *
	 * @param contentFileNmMap the locales and localized content file nms of this content
	 * @param defaultLocale the default locale
	 */
	public void setContentFileNmMap(Map<Locale, String> contentFileNmMap,
		Locale defaultLocale);

	/**
	 * Returns the advanced start file nm of this content.
	 *
	 * @return the advanced start file nm of this content
	 */
	@AutoEscape
	public String getAdvancedStartFileNm();

	/**
	 * Sets the advanced start file nm of this content.
	 *
	 * @param advancedStartFileNm the advanced start file nm of this content
	 */
	public void setAdvancedStartFileNm(String advancedStartFileNm);

	/**
	 * Returns the service language of this content.
	 *
	 * @return the service language of this content
	 */
	@AutoEscape
	public String getServiceLanguage();

	/**
	 * Sets the service language of this content.
	 *
	 * @param serviceLanguage the service language of this content
	 */
	public void setServiceLanguage(String serviceLanguage);

	/**
	 * Returns the project yn of this content.
	 *
	 * @return the project yn of this content
	 */
	@AutoEscape
	public String getProjectYn();

	/**
	 * Sets the project yn of this content.
	 *
	 * @param projectYn the project yn of this content
	 */
	public void setProjectYn(String projectYn);

	/**
	 * Returns the project ID of this content.
	 *
	 * @return the project ID of this content
	 */
	public long getProjectId();

	/**
	 * Sets the project ID of this content.
	 *
	 * @param projectId the project ID of this content
	 */
	public void setProjectId(long projectId);

	/**
	 * Returns the view cnt of this content.
	 *
	 * @return the view cnt of this content
	 */
	public long getViewCnt();

	/**
	 * Sets the view cnt of this content.
	 *
	 * @param viewCnt the view cnt of this content
	 */
	public void setViewCnt(long viewCnt);

	/**
	 * Returns the insert ID of this content.
	 *
	 * @return the insert ID of this content
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this content.
	 *
	 * @param insertId the insert ID of this content
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert date of this content.
	 *
	 * @return the insert date of this content
	 */
	public Date getInsertDate();

	/**
	 * Sets the insert date of this content.
	 *
	 * @param insertDate the insert date of this content
	 */
	public void setInsertDate(Date insertDate);

	/**
	 * Returns the update ID of this content.
	 *
	 * @return the update ID of this content
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this content.
	 *
	 * @param updateId the update ID of this content
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update date of this content.
	 *
	 * @return the update date of this content
	 */
	public Date getUpdateDate();

	/**
	 * Sets the update date of this content.
	 *
	 * @param updateDate the update date of this content
	 */
	public void setUpdateDate(Date updateDate);

	/**
	 * Returns the version of this content.
	 *
	 * @return the version of this content
	 */
	@AutoEscape
	public String getVersion();

	/**
	 * Sets the version of this content.
	 *
	 * @param version the version of this content
	 */
	public void setVersion(String version);

	/**
	 * Returns the open yn of this content.
	 *
	 * @return the open yn of this content
	 */
	@AutoEscape
	public String getOpenYn();

	/**
	 * Sets the open yn of this content.
	 *
	 * @param openYn the open yn of this content
	 */
	public void setOpenYn(String openYn);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(org.kisti.edison.content.model.Content content);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.content.model.Content> toCacheModel();

	@Override
	public org.kisti.edison.content.model.Content toEscapedModel();

	@Override
	public org.kisti.edison.content.model.Content toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}