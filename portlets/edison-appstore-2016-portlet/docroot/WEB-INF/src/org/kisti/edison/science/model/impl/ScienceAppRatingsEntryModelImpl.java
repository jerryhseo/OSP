/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import org.kisti.edison.science.model.ScienceAppRatingsEntry;
import org.kisti.edison.science.model.ScienceAppRatingsEntryModel;
import org.kisti.edison.science.model.ScienceAppRatingsEntrySoap;
import org.kisti.edison.science.service.persistence.ScienceAppRatingsEntryPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppRatingsEntry service. Represents a row in the &quot;EDAPP_ScienceAppRatingsEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.ScienceAppRatingsEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppRatingsEntryImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppRatingsEntryImpl
 * @see org.kisti.edison.science.model.ScienceAppRatingsEntry
 * @see org.kisti.edison.science.model.ScienceAppRatingsEntryModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppRatingsEntryModelImpl extends BaseModelImpl<ScienceAppRatingsEntry>
	implements ScienceAppRatingsEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app ratings entry model instance should use the {@link org.kisti.edison.science.model.ScienceAppRatingsEntry} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_ScienceAppRatingsEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "scienceAppId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "score", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_ScienceAppRatingsEntry (userId LONG not null,scienceAppId LONG not null,companyId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,score LONG,primary key (userId, scienceAppId))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_ScienceAppRatingsEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppRatingsEntry.id.userId ASC, scienceAppRatingsEntry.id.scienceAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_ScienceAppRatingsEntry.userId ASC, EDAPP_ScienceAppRatingsEntry.scienceAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.ScienceAppRatingsEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.ScienceAppRatingsEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.ScienceAppRatingsEntry"),
			true);
	public static long SCIENCEAPPID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceAppRatingsEntry toModel(
		ScienceAppRatingsEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceAppRatingsEntry model = new ScienceAppRatingsEntryImpl();

		model.setUserId(soapModel.getUserId());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setClassNameId(soapModel.getClassNameId());
		model.setScore(soapModel.getScore());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceAppRatingsEntry> toModels(
		ScienceAppRatingsEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceAppRatingsEntry> models = new ArrayList<ScienceAppRatingsEntry>(soapModels.length);

		for (ScienceAppRatingsEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.ScienceAppRatingsEntry"));

	public ScienceAppRatingsEntryModelImpl() {
	}

	@Override
	public ScienceAppRatingsEntryPK getPrimaryKey() {
		return new ScienceAppRatingsEntryPK(_userId, _scienceAppId);
	}

	@Override
	public void setPrimaryKey(ScienceAppRatingsEntryPK primaryKey) {
		setUserId(primaryKey.userId);
		setScienceAppId(primaryKey.scienceAppId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ScienceAppRatingsEntryPK(_userId, _scienceAppId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ScienceAppRatingsEntryPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppRatingsEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppRatingsEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("score", getScore());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long score = (Long)attributes.get("score");

		if (score != null) {
			setScore(score);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_columnBitmask |= SCIENCEAPPID_COLUMN_BITMASK;

		if (!_setOriginalScienceAppId) {
			_setOriginalScienceAppId = true;

			_originalScienceAppId = _scienceAppId;
		}

		_scienceAppId = scienceAppId;
	}

	public long getOriginalScienceAppId() {
		return _originalScienceAppId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	@Override
	public long getScore() {
		return _score;
	}

	@Override
	public void setScore(long score) {
		_score = score;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ScienceAppRatingsEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppRatingsEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppRatingsEntryImpl scienceAppRatingsEntryImpl = new ScienceAppRatingsEntryImpl();

		scienceAppRatingsEntryImpl.setUserId(getUserId());
		scienceAppRatingsEntryImpl.setScienceAppId(getScienceAppId());
		scienceAppRatingsEntryImpl.setCompanyId(getCompanyId());
		scienceAppRatingsEntryImpl.setUserName(getUserName());
		scienceAppRatingsEntryImpl.setCreateDate(getCreateDate());
		scienceAppRatingsEntryImpl.setModifiedDate(getModifiedDate());
		scienceAppRatingsEntryImpl.setClassNameId(getClassNameId());
		scienceAppRatingsEntryImpl.setScore(getScore());

		scienceAppRatingsEntryImpl.resetOriginalValues();

		return scienceAppRatingsEntryImpl;
	}

	@Override
	public int compareTo(ScienceAppRatingsEntry scienceAppRatingsEntry) {
		ScienceAppRatingsEntryPK primaryKey = scienceAppRatingsEntry.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppRatingsEntry)) {
			return false;
		}

		ScienceAppRatingsEntry scienceAppRatingsEntry = (ScienceAppRatingsEntry)obj;

		ScienceAppRatingsEntryPK primaryKey = scienceAppRatingsEntry.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ScienceAppRatingsEntryModelImpl scienceAppRatingsEntryModelImpl = this;

		scienceAppRatingsEntryModelImpl._originalUserId = scienceAppRatingsEntryModelImpl._userId;

		scienceAppRatingsEntryModelImpl._setOriginalUserId = false;

		scienceAppRatingsEntryModelImpl._originalScienceAppId = scienceAppRatingsEntryModelImpl._scienceAppId;

		scienceAppRatingsEntryModelImpl._setOriginalScienceAppId = false;

		scienceAppRatingsEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScienceAppRatingsEntry> toCacheModel() {
		ScienceAppRatingsEntryCacheModel scienceAppRatingsEntryCacheModel = new ScienceAppRatingsEntryCacheModel();

		scienceAppRatingsEntryCacheModel.userId = getUserId();

		scienceAppRatingsEntryCacheModel.scienceAppId = getScienceAppId();

		scienceAppRatingsEntryCacheModel.companyId = getCompanyId();

		scienceAppRatingsEntryCacheModel.userName = getUserName();

		String userName = scienceAppRatingsEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			scienceAppRatingsEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			scienceAppRatingsEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			scienceAppRatingsEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			scienceAppRatingsEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			scienceAppRatingsEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		scienceAppRatingsEntryCacheModel.classNameId = getClassNameId();

		scienceAppRatingsEntryCacheModel.score = getScore();

		return scienceAppRatingsEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", score=");
		sb.append(getScore());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.ScienceAppRatingsEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppRatingsEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppRatingsEntry.class
		};
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _scienceAppId;
	private long _originalScienceAppId;
	private boolean _setOriginalScienceAppId;
	private long _companyId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classNameId;
	private long _score;
	private long _columnBitmask;
	private ScienceAppRatingsEntry _escapedModel;
}