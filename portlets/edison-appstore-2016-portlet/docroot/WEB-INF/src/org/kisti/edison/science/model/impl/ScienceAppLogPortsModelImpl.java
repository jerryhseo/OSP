/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.science.model.ScienceAppLogPorts;
import org.kisti.edison.science.model.ScienceAppLogPortsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppLogPorts service. Represents a row in the &quot;EDAPP_ScienceAppLogPorts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.ScienceAppLogPortsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppLogPortsImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppLogPortsImpl
 * @see org.kisti.edison.science.model.ScienceAppLogPorts
 * @see org.kisti.edison.science.model.ScienceAppLogPortsModel
 * @generated
 */
public class ScienceAppLogPortsModelImpl extends BaseModelImpl<ScienceAppLogPorts>
	implements ScienceAppLogPortsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app log ports model instance should use the {@link org.kisti.edison.science.model.ScienceAppLogPorts} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_ScienceAppLogPorts";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "logPorts", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_ScienceAppLogPorts (scienceAppId LONG not null primary key,logPorts TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_ScienceAppLogPorts";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppLogPorts.scienceAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_ScienceAppLogPorts.scienceAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.ScienceAppLogPorts"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.ScienceAppLogPorts"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.ScienceAppLogPorts"));

	public ScienceAppLogPortsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScienceAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppLogPorts.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppLogPorts.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("logPorts", getLogPorts());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		String logPorts = (String)attributes.get("logPorts");

		if (logPorts != null) {
			setLogPorts(logPorts);
		}
	}

	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@Override
	public String getLogPorts() {
		if (_logPorts == null) {
			return StringPool.BLANK;
		}
		else {
			return _logPorts;
		}
	}

	@Override
	public void setLogPorts(String logPorts) {
		_logPorts = logPorts;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScienceAppLogPorts.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ScienceAppLogPorts toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppLogPorts)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppLogPortsImpl scienceAppLogPortsImpl = new ScienceAppLogPortsImpl();

		scienceAppLogPortsImpl.setScienceAppId(getScienceAppId());
		scienceAppLogPortsImpl.setLogPorts(getLogPorts());

		scienceAppLogPortsImpl.resetOriginalValues();

		return scienceAppLogPortsImpl;
	}

	@Override
	public int compareTo(ScienceAppLogPorts scienceAppLogPorts) {
		long primaryKey = scienceAppLogPorts.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppLogPorts)) {
			return false;
		}

		ScienceAppLogPorts scienceAppLogPorts = (ScienceAppLogPorts)obj;

		long primaryKey = scienceAppLogPorts.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ScienceAppLogPorts> toCacheModel() {
		ScienceAppLogPortsCacheModel scienceAppLogPortsCacheModel = new ScienceAppLogPortsCacheModel();

		scienceAppLogPortsCacheModel.scienceAppId = getScienceAppId();

		scienceAppLogPortsCacheModel.logPorts = getLogPorts();

		String logPorts = scienceAppLogPortsCacheModel.logPorts;

		if ((logPorts != null) && (logPorts.length() == 0)) {
			scienceAppLogPortsCacheModel.logPorts = null;
		}

		return scienceAppLogPortsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", logPorts=");
		sb.append(getLogPorts());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.ScienceAppLogPorts");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logPorts</column-name><column-value><![CDATA[");
		sb.append(getLogPorts());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppLogPorts.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppLogPorts.class
		};
	private long _scienceAppId;
	private String _logPorts;
	private ScienceAppLogPorts _escapedModel;
}