/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.science.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.science.model.ScienceAppPaper;
import org.kisti.edison.science.model.ScienceAppPaperModel;
import org.kisti.edison.science.model.ScienceAppPaperSoap;
import org.kisti.edison.science.service.persistence.ScienceAppPaperPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppPaper service. Represents a row in the &quot;EDAPP_ScienceAppPaper&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.science.model.ScienceAppPaperModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppPaperImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppPaperImpl
 * @see org.kisti.edison.science.model.ScienceAppPaper
 * @see org.kisti.edison.science.model.ScienceAppPaperModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppPaperModelImpl extends BaseModelImpl<ScienceAppPaper>
	implements ScienceAppPaperModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app paper model instance should use the {@link org.kisti.edison.science.model.ScienceAppPaper} interface instead.
	 */
	public static final String TABLE_NAME = "EDAPP_ScienceAppPaper";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "paperSeq", Types.BIGINT },
			{ "paperType", Types.VARCHAR },
			{ "paperValue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDAPP_ScienceAppPaper (scienceAppId LONG not null,paperSeq LONG not null,paperType VARCHAR(75) null,paperValue VARCHAR(75) null,primary key (scienceAppId, paperSeq))";
	public static final String TABLE_SQL_DROP = "drop table EDAPP_ScienceAppPaper";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppPaper.id.scienceAppId ASC, scienceAppPaper.id.paperSeq ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDAPP_ScienceAppPaper.scienceAppId ASC, EDAPP_ScienceAppPaper.paperSeq ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.science.model.ScienceAppPaper"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.science.model.ScienceAppPaper"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.science.model.ScienceAppPaper"),
			true);
	public static long SCIENCEAPPID_COLUMN_BITMASK = 1L;
	public static long PAPERSEQ_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceAppPaper toModel(ScienceAppPaperSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceAppPaper model = new ScienceAppPaperImpl();

		model.setScienceAppId(soapModel.getScienceAppId());
		model.setPaperSeq(soapModel.getPaperSeq());
		model.setPaperType(soapModel.getPaperType());
		model.setPaperValue(soapModel.getPaperValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceAppPaper> toModels(
		ScienceAppPaperSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceAppPaper> models = new ArrayList<ScienceAppPaper>(soapModels.length);

		for (ScienceAppPaperSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.science.model.ScienceAppPaper"));

	public ScienceAppPaperModelImpl() {
	}

	@Override
	public ScienceAppPaperPK getPrimaryKey() {
		return new ScienceAppPaperPK(_scienceAppId, _paperSeq);
	}

	@Override
	public void setPrimaryKey(ScienceAppPaperPK primaryKey) {
		setScienceAppId(primaryKey.scienceAppId);
		setPaperSeq(primaryKey.paperSeq);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ScienceAppPaperPK(_scienceAppId, _paperSeq);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ScienceAppPaperPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppPaper.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppPaper.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("paperSeq", getPaperSeq());
		attributes.put("paperType", getPaperType());
		attributes.put("paperValue", getPaperValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long paperSeq = (Long)attributes.get("paperSeq");

		if (paperSeq != null) {
			setPaperSeq(paperSeq);
		}

		String paperType = (String)attributes.get("paperType");

		if (paperType != null) {
			setPaperType(paperType);
		}

		String paperValue = (String)attributes.get("paperValue");

		if (paperValue != null) {
			setPaperValue(paperValue);
		}
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_columnBitmask |= SCIENCEAPPID_COLUMN_BITMASK;

		if (!_setOriginalScienceAppId) {
			_setOriginalScienceAppId = true;

			_originalScienceAppId = _scienceAppId;
		}

		_scienceAppId = scienceAppId;
	}

	public long getOriginalScienceAppId() {
		return _originalScienceAppId;
	}

	@JSON
	@Override
	public long getPaperSeq() {
		return _paperSeq;
	}

	@Override
	public void setPaperSeq(long paperSeq) {
		_paperSeq = paperSeq;
	}

	@JSON
	@Override
	public String getPaperType() {
		if (_paperType == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperType;
		}
	}

	@Override
	public void setPaperType(String paperType) {
		_paperType = paperType;
	}

	@JSON
	@Override
	public String getPaperValue() {
		if (_paperValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperValue;
		}
	}

	@Override
	public void setPaperValue(String paperValue) {
		_paperValue = paperValue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ScienceAppPaper toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppPaper)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppPaperImpl scienceAppPaperImpl = new ScienceAppPaperImpl();

		scienceAppPaperImpl.setScienceAppId(getScienceAppId());
		scienceAppPaperImpl.setPaperSeq(getPaperSeq());
		scienceAppPaperImpl.setPaperType(getPaperType());
		scienceAppPaperImpl.setPaperValue(getPaperValue());

		scienceAppPaperImpl.resetOriginalValues();

		return scienceAppPaperImpl;
	}

	@Override
	public int compareTo(ScienceAppPaper scienceAppPaper) {
		ScienceAppPaperPK primaryKey = scienceAppPaper.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppPaper)) {
			return false;
		}

		ScienceAppPaper scienceAppPaper = (ScienceAppPaper)obj;

		ScienceAppPaperPK primaryKey = scienceAppPaper.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ScienceAppPaperModelImpl scienceAppPaperModelImpl = this;

		scienceAppPaperModelImpl._originalScienceAppId = scienceAppPaperModelImpl._scienceAppId;

		scienceAppPaperModelImpl._setOriginalScienceAppId = false;

		scienceAppPaperModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScienceAppPaper> toCacheModel() {
		ScienceAppPaperCacheModel scienceAppPaperCacheModel = new ScienceAppPaperCacheModel();

		scienceAppPaperCacheModel.scienceAppId = getScienceAppId();

		scienceAppPaperCacheModel.paperSeq = getPaperSeq();

		scienceAppPaperCacheModel.paperType = getPaperType();

		String paperType = scienceAppPaperCacheModel.paperType;

		if ((paperType != null) && (paperType.length() == 0)) {
			scienceAppPaperCacheModel.paperType = null;
		}

		scienceAppPaperCacheModel.paperValue = getPaperValue();

		String paperValue = scienceAppPaperCacheModel.paperValue;

		if ((paperValue != null) && (paperValue.length() == 0)) {
			scienceAppPaperCacheModel.paperValue = null;
		}

		return scienceAppPaperCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", paperSeq=");
		sb.append(getPaperSeq());
		sb.append(", paperType=");
		sb.append(getPaperType());
		sb.append(", paperValue=");
		sb.append(getPaperValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.science.model.ScienceAppPaper");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperSeq</column-name><column-value><![CDATA[");
		sb.append(getPaperSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperType</column-name><column-value><![CDATA[");
		sb.append(getPaperType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperValue</column-name><column-value><![CDATA[");
		sb.append(getPaperValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppPaper.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppPaper.class
		};
	private long _scienceAppId;
	private long _originalScienceAppId;
	private boolean _setOriginalScienceAppId;
	private long _paperSeq;
	private String _paperType;
	private String _paperValue;
	private long _columnBitmask;
	private ScienceAppPaper _escapedModel;
}