/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.osp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.osp.model.Execute;
import org.kisti.edison.osp.model.ExecuteModel;
import org.kisti.edison.osp.model.ExecuteSoap;
import org.kisti.edison.osp.service.persistence.ExecutePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Execute service. Represents a row in the &quot;EDMESH_Execute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.osp.model.ExecuteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExecuteImpl}.
 * </p>
 *
 * @author edison
 * @see ExecuteImpl
 * @see org.kisti.edison.osp.model.Execute
 * @see org.kisti.edison.osp.model.ExecuteModel
 * @generated
 */
@JSON(strict = true)
public class ExecuteModelImpl extends BaseModelImpl<Execute>
	implements ExecuteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a execute model instance should use the {@link org.kisti.edison.osp.model.Execute} interface instead.
	 */
	public static final String TABLE_NAME = "EDMESH_Execute";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectId", Types.BIGINT },
			{ "analyzerId", Types.VARCHAR },
			{ "executeDataStructure", Types.VARCHAR },
			{ "executeDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDMESH_Execute (projectId LONG not null,analyzerId VARCHAR(75) not null,executeDataStructure TEXT null,executeDate DATE null,primary key (projectId, analyzerId))";
	public static final String TABLE_SQL_DROP = "drop table EDMESH_Execute";
	public static final String ORDER_BY_JPQL = " ORDER BY execute.id.projectId ASC, execute.id.analyzerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDMESH_Execute.projectId ASC, EDMESH_Execute.analyzerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.osp.model.Execute"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.osp.model.Execute"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.osp.model.Execute"),
			true);
	public static long PROJECTID_COLUMN_BITMASK = 1L;
	public static long ANALYZERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Execute toModel(ExecuteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Execute model = new ExecuteImpl();

		model.setProjectId(soapModel.getProjectId());
		model.setAnalyzerId(soapModel.getAnalyzerId());
		model.setExecuteDataStructure(soapModel.getExecuteDataStructure());
		model.setExecuteDate(soapModel.getExecuteDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Execute> toModels(ExecuteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Execute> models = new ArrayList<Execute>(soapModels.length);

		for (ExecuteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.osp.model.Execute"));

	public ExecuteModelImpl() {
	}

	@Override
	public ExecutePK getPrimaryKey() {
		return new ExecutePK(_projectId, _analyzerId);
	}

	@Override
	public void setPrimaryKey(ExecutePK primaryKey) {
		setProjectId(primaryKey.projectId);
		setAnalyzerId(primaryKey.analyzerId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ExecutePK(_projectId, _analyzerId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ExecutePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Execute.class;
	}

	@Override
	public String getModelClassName() {
		return Execute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectId", getProjectId());
		attributes.put("analyzerId", getAnalyzerId());
		attributes.put("executeDataStructure", getExecuteDataStructure());
		attributes.put("executeDate", getExecuteDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		String analyzerId = (String)attributes.get("analyzerId");

		if (analyzerId != null) {
			setAnalyzerId(analyzerId);
		}

		String executeDataStructure = (String)attributes.get(
				"executeDataStructure");

		if (executeDataStructure != null) {
			setExecuteDataStructure(executeDataStructure);
		}

		Date executeDate = (Date)attributes.get("executeDate");

		if (executeDate != null) {
			setExecuteDate(executeDate);
		}
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public String getAnalyzerId() {
		if (_analyzerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _analyzerId;
		}
	}

	@Override
	public void setAnalyzerId(String analyzerId) {
		_analyzerId = analyzerId;
	}

	@JSON
	@Override
	public String getExecuteDataStructure() {
		if (_executeDataStructure == null) {
			return StringPool.BLANK;
		}
		else {
			return _executeDataStructure;
		}
	}

	@Override
	public void setExecuteDataStructure(String executeDataStructure) {
		_executeDataStructure = executeDataStructure;
	}

	@JSON
	@Override
	public Date getExecuteDate() {
		return _executeDate;
	}

	@Override
	public void setExecuteDate(Date executeDate) {
		_executeDate = executeDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Execute toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Execute)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExecuteImpl executeImpl = new ExecuteImpl();

		executeImpl.setProjectId(getProjectId());
		executeImpl.setAnalyzerId(getAnalyzerId());
		executeImpl.setExecuteDataStructure(getExecuteDataStructure());
		executeImpl.setExecuteDate(getExecuteDate());

		executeImpl.resetOriginalValues();

		return executeImpl;
	}

	@Override
	public int compareTo(Execute execute) {
		ExecutePK primaryKey = execute.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Execute)) {
			return false;
		}

		Execute execute = (Execute)obj;

		ExecutePK primaryKey = execute.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ExecuteModelImpl executeModelImpl = this;

		executeModelImpl._originalProjectId = executeModelImpl._projectId;

		executeModelImpl._setOriginalProjectId = false;

		executeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Execute> toCacheModel() {
		ExecuteCacheModel executeCacheModel = new ExecuteCacheModel();

		executeCacheModel.projectId = getProjectId();

		executeCacheModel.analyzerId = getAnalyzerId();

		String analyzerId = executeCacheModel.analyzerId;

		if ((analyzerId != null) && (analyzerId.length() == 0)) {
			executeCacheModel.analyzerId = null;
		}

		executeCacheModel.executeDataStructure = getExecuteDataStructure();

		String executeDataStructure = executeCacheModel.executeDataStructure;

		if ((executeDataStructure != null) &&
				(executeDataStructure.length() == 0)) {
			executeCacheModel.executeDataStructure = null;
		}

		Date executeDate = getExecuteDate();

		if (executeDate != null) {
			executeCacheModel.executeDate = executeDate.getTime();
		}
		else {
			executeCacheModel.executeDate = Long.MIN_VALUE;
		}

		return executeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{projectId=");
		sb.append(getProjectId());
		sb.append(", analyzerId=");
		sb.append(getAnalyzerId());
		sb.append(", executeDataStructure=");
		sb.append(getExecuteDataStructure());
		sb.append(", executeDate=");
		sb.append(getExecuteDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.osp.model.Execute");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analyzerId</column-name><column-value><![CDATA[");
		sb.append(getAnalyzerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeDataStructure</column-name><column-value><![CDATA[");
		sb.append(getExecuteDataStructure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeDate</column-name><column-value><![CDATA[");
		sb.append(getExecuteDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Execute.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Execute.class
		};
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private String _analyzerId;
	private String _executeDataStructure;
	private Date _executeDate;
	private long _columnBitmask;
	private Execute _escapedModel;
}