/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.eturb.dbservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.eturb.dbservice.model.Simulation;
import org.kisti.eturb.dbservice.model.SimulationModel;
import org.kisti.eturb.dbservice.service.persistence.SimulationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Simulation service. Represents a row in the &quot;ETURB_Simulation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.eturb.dbservice.model.SimulationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimulationImpl}.
 * </p>
 *
 * @author EDISON
 * @see SimulationImpl
 * @see org.kisti.eturb.dbservice.model.Simulation
 * @see org.kisti.eturb.dbservice.model.SimulationModel
 * @generated
 */
public class SimulationModelImpl extends BaseModelImpl<Simulation>
	implements SimulationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a simulation model instance should use the {@link org.kisti.eturb.dbservice.model.Simulation} interface instead.
	 */
	public static final String TABLE_NAME = "ETURB_Simulation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectId", Types.BIGINT },
			{ "executeId", Types.VARCHAR },
			{ "executeDataStructure", Types.VARCHAR },
			{ "executeDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ETURB_Simulation (projectId LONG not null,executeId VARCHAR(75) not null,executeDataStructure TEXT null,executeDate DATE null,primary key (projectId, executeId))";
	public static final String TABLE_SQL_DROP = "drop table ETURB_Simulation";
	public static final String ORDER_BY_JPQL = " ORDER BY simulation.id.projectId ASC, simulation.id.executeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ETURB_Simulation.projectId ASC, ETURB_Simulation.executeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.eturb.dbservice.model.Simulation"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.eturb.dbservice.model.Simulation"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.eturb.dbservice.model.Simulation"),
			true);
	public static long PROJECTID_COLUMN_BITMASK = 1L;
	public static long EXECUTEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.eturb.dbservice.model.Simulation"));

	public SimulationModelImpl() {
	}

	@Override
	public SimulationPK getPrimaryKey() {
		return new SimulationPK(_projectId, _executeId);
	}

	@Override
	public void setPrimaryKey(SimulationPK primaryKey) {
		setProjectId(primaryKey.projectId);
		setExecuteId(primaryKey.executeId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SimulationPK(_projectId, _executeId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SimulationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Simulation.class;
	}

	@Override
	public String getModelClassName() {
		return Simulation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectId", getProjectId());
		attributes.put("executeId", getExecuteId());
		attributes.put("executeDataStructure", getExecuteDataStructure());
		attributes.put("executeDate", getExecuteDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		String executeId = (String)attributes.get("executeId");

		if (executeId != null) {
			setExecuteId(executeId);
		}

		String executeDataStructure = (String)attributes.get(
				"executeDataStructure");

		if (executeDataStructure != null) {
			setExecuteDataStructure(executeDataStructure);
		}

		Date executeDate = (Date)attributes.get("executeDate");

		if (executeDate != null) {
			setExecuteDate(executeDate);
		}
	}

	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@Override
	public String getExecuteId() {
		if (_executeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _executeId;
		}
	}

	@Override
	public void setExecuteId(String executeId) {
		_executeId = executeId;
	}

	@Override
	public String getExecuteDataStructure() {
		if (_executeDataStructure == null) {
			return StringPool.BLANK;
		}
		else {
			return _executeDataStructure;
		}
	}

	@Override
	public void setExecuteDataStructure(String executeDataStructure) {
		_executeDataStructure = executeDataStructure;
	}

	@Override
	public Date getExecuteDate() {
		return _executeDate;
	}

	@Override
	public void setExecuteDate(Date executeDate) {
		_executeDate = executeDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Simulation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Simulation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimulationImpl simulationImpl = new SimulationImpl();

		simulationImpl.setProjectId(getProjectId());
		simulationImpl.setExecuteId(getExecuteId());
		simulationImpl.setExecuteDataStructure(getExecuteDataStructure());
		simulationImpl.setExecuteDate(getExecuteDate());

		simulationImpl.resetOriginalValues();

		return simulationImpl;
	}

	@Override
	public int compareTo(Simulation simulation) {
		SimulationPK primaryKey = simulation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Simulation)) {
			return false;
		}

		Simulation simulation = (Simulation)obj;

		SimulationPK primaryKey = simulation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		SimulationModelImpl simulationModelImpl = this;

		simulationModelImpl._originalProjectId = simulationModelImpl._projectId;

		simulationModelImpl._setOriginalProjectId = false;

		simulationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Simulation> toCacheModel() {
		SimulationCacheModel simulationCacheModel = new SimulationCacheModel();

		simulationCacheModel.projectId = getProjectId();

		simulationCacheModel.executeId = getExecuteId();

		String executeId = simulationCacheModel.executeId;

		if ((executeId != null) && (executeId.length() == 0)) {
			simulationCacheModel.executeId = null;
		}

		simulationCacheModel.executeDataStructure = getExecuteDataStructure();

		String executeDataStructure = simulationCacheModel.executeDataStructure;

		if ((executeDataStructure != null) &&
				(executeDataStructure.length() == 0)) {
			simulationCacheModel.executeDataStructure = null;
		}

		Date executeDate = getExecuteDate();

		if (executeDate != null) {
			simulationCacheModel.executeDate = executeDate.getTime();
		}
		else {
			simulationCacheModel.executeDate = Long.MIN_VALUE;
		}

		return simulationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{projectId=");
		sb.append(getProjectId());
		sb.append(", executeId=");
		sb.append(getExecuteId());
		sb.append(", executeDataStructure=");
		sb.append(getExecuteDataStructure());
		sb.append(", executeDate=");
		sb.append(getExecuteDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.kisti.eturb.dbservice.model.Simulation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeId</column-name><column-value><![CDATA[");
		sb.append(getExecuteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeDataStructure</column-name><column-value><![CDATA[");
		sb.append(getExecuteDataStructure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeDate</column-name><column-value><![CDATA[");
		sb.append(getExecuteDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Simulation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Simulation.class
		};
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private String _executeId;
	private String _executeDataStructure;
	private Date _executeDate;
	private long _columnBitmask;
	private Simulation _escapedModel;
}