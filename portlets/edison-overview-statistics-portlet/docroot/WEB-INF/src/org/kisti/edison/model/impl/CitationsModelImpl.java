/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.model.Citations;
import org.kisti.edison.model.CitationsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Citations service. Represents a row in the &quot;EDOV_Citations&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.model.CitationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CitationsImpl}.
 * </p>
 *
 * @author edison
 * @see CitationsImpl
 * @see org.kisti.edison.model.Citations
 * @see org.kisti.edison.model.CitationsModel
 * @generated
 */
public class CitationsModelImpl extends BaseModelImpl<Citations>
	implements CitationsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a citations model instance should use the {@link org.kisti.edison.model.Citations} interface instead.
	 */
	public static final String TABLE_NAME = "EDOV_Citations";
	public static final Object[][] TABLE_COLUMNS = {
			{ "createDate", Types.VARCHAR },
			{ "cnt", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDOV_Citations (createDate VARCHAR(75) not null primary key,cnt LONG)";
	public static final String TABLE_SQL_DROP = "drop table EDOV_Citations";
	public static final String ORDER_BY_JPQL = " ORDER BY citations.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDOV_Citations.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.model.Citations"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.model.Citations"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.model.Citations"));

	public CitationsModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _createDate;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCreateDate(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _createDate;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Citations.class;
	}

	@Override
	public String getModelClassName() {
		return Citations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("createDate", getCreateDate());
		attributes.put("cnt", getCnt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String createDate = (String)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long cnt = (Long)attributes.get("cnt");

		if (cnt != null) {
			setCnt(cnt);
		}
	}

	@Override
	public String getCreateDate() {
		if (_createDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _createDate;
		}
	}

	@Override
	public void setCreateDate(String createDate) {
		_createDate = createDate;
	}

	@Override
	public Long getCnt() {
		return _cnt;
	}

	@Override
	public void setCnt(Long cnt) {
		_cnt = cnt;
	}

	@Override
	public Citations toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Citations)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CitationsImpl citationsImpl = new CitationsImpl();

		citationsImpl.setCreateDate(getCreateDate());
		citationsImpl.setCnt(getCnt());

		citationsImpl.resetOriginalValues();

		return citationsImpl;
	}

	@Override
	public int compareTo(Citations citations) {
		int value = 0;

		value = getCreateDate().compareTo(citations.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Citations)) {
			return false;
		}

		Citations citations = (Citations)obj;

		String primaryKey = citations.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Citations> toCacheModel() {
		CitationsCacheModel citationsCacheModel = new CitationsCacheModel();

		citationsCacheModel.createDate = getCreateDate();

		String createDate = citationsCacheModel.createDate;

		if ((createDate != null) && (createDate.length() == 0)) {
			citationsCacheModel.createDate = null;
		}

		citationsCacheModel.cnt = getCnt();

		return citationsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{createDate=");
		sb.append(getCreateDate());
		sb.append(", cnt=");
		sb.append(getCnt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.model.Citations");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cnt</column-name><column-value><![CDATA[");
		sb.append(getCnt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Citations.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Citations.class
		};
	private String _createDate;
	private Long _cnt;
	private Citations _escapedModel;
}