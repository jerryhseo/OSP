/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.model.Contents;
import org.kisti.edison.service.ContentsLocalService;
import org.kisti.edison.service.persistence.CitationsFinder;
import org.kisti.edison.service.persistence.CitationsPersistence;
import org.kisti.edison.service.persistence.ContentsFinder;
import org.kisti.edison.service.persistence.ContentsPersistence;
import org.kisti.edison.service.persistence.ExecuteUserFinder;
import org.kisti.edison.service.persistence.ExecuteUserPersistence;
import org.kisti.edison.service.persistence.ScienceAppFinder;
import org.kisti.edison.service.persistence.ScienceAppPersistence;
import org.kisti.edison.service.persistence.SimulationJobFinder;
import org.kisti.edison.service.persistence.SimulationJobPersistence;
import org.kisti.edison.service.persistence.SiteUserFinder;
import org.kisti.edison.service.persistence.SiteUserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the contents local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.service.impl.ContentsLocalServiceImpl}.
 * </p>
 *
 * @author edison
 * @see org.kisti.edison.service.impl.ContentsLocalServiceImpl
 * @see org.kisti.edison.service.ContentsLocalServiceUtil
 * @generated
 */
public abstract class ContentsLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ContentsLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.service.ContentsLocalServiceUtil} to access the contents local service.
	 */

	/**
	 * Adds the contents to the database. Also notifies the appropriate model listeners.
	 *
	 * @param contents the contents
	 * @return the contents that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Contents addContents(Contents contents) throws SystemException {
		contents.setNew(true);

		return contentsPersistence.update(contents);
	}

	/**
	 * Creates a new contents with the primary key. Does not add the contents to the database.
	 *
	 * @param createDate the primary key for the new contents
	 * @return the new contents
	 */
	@Override
	public Contents createContents(String createDate) {
		return contentsPersistence.create(createDate);
	}

	/**
	 * Deletes the contents with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param createDate the primary key of the contents
	 * @return the contents that was removed
	 * @throws PortalException if a contents with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Contents deleteContents(String createDate)
		throws PortalException, SystemException {
		return contentsPersistence.remove(createDate);
	}

	/**
	 * Deletes the contents from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contents the contents
	 * @return the contents that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Contents deleteContents(Contents contents) throws SystemException {
		return contentsPersistence.remove(contents);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Contents.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return contentsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.ContentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return contentsPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.ContentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return contentsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return contentsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return contentsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Contents fetchContents(String createDate) throws SystemException {
		return contentsPersistence.fetchByPrimaryKey(createDate);
	}

	/**
	 * Returns the contents with the primary key.
	 *
	 * @param createDate the primary key of the contents
	 * @return the contents
	 * @throws PortalException if a contents with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Contents getContents(String createDate)
		throws PortalException, SystemException {
		return contentsPersistence.findByPrimaryKey(createDate);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return contentsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the contentses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.ContentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of contentses
	 * @param end the upper bound of the range of contentses (not inclusive)
	 * @return the range of contentses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Contents> getContentses(int start, int end)
		throws SystemException {
		return contentsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of contentses.
	 *
	 * @return the number of contentses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getContentsesCount() throws SystemException {
		return contentsPersistence.countAll();
	}

	/**
	 * Updates the contents in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param contents the contents
	 * @return the contents that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Contents updateContents(Contents contents) throws SystemException {
		return contentsPersistence.update(contents);
	}

	/**
	 * Returns the citations local service.
	 *
	 * @return the citations local service
	 */
	public org.kisti.edison.service.CitationsLocalService getCitationsLocalService() {
		return citationsLocalService;
	}

	/**
	 * Sets the citations local service.
	 *
	 * @param citationsLocalService the citations local service
	 */
	public void setCitationsLocalService(
		org.kisti.edison.service.CitationsLocalService citationsLocalService) {
		this.citationsLocalService = citationsLocalService;
	}

	/**
	 * Returns the citations persistence.
	 *
	 * @return the citations persistence
	 */
	public CitationsPersistence getCitationsPersistence() {
		return citationsPersistence;
	}

	/**
	 * Sets the citations persistence.
	 *
	 * @param citationsPersistence the citations persistence
	 */
	public void setCitationsPersistence(
		CitationsPersistence citationsPersistence) {
		this.citationsPersistence = citationsPersistence;
	}

	/**
	 * Returns the citations finder.
	 *
	 * @return the citations finder
	 */
	public CitationsFinder getCitationsFinder() {
		return citationsFinder;
	}

	/**
	 * Sets the citations finder.
	 *
	 * @param citationsFinder the citations finder
	 */
	public void setCitationsFinder(CitationsFinder citationsFinder) {
		this.citationsFinder = citationsFinder;
	}

	/**
	 * Returns the contents local service.
	 *
	 * @return the contents local service
	 */
	public org.kisti.edison.service.ContentsLocalService getContentsLocalService() {
		return contentsLocalService;
	}

	/**
	 * Sets the contents local service.
	 *
	 * @param contentsLocalService the contents local service
	 */
	public void setContentsLocalService(
		org.kisti.edison.service.ContentsLocalService contentsLocalService) {
		this.contentsLocalService = contentsLocalService;
	}

	/**
	 * Returns the contents persistence.
	 *
	 * @return the contents persistence
	 */
	public ContentsPersistence getContentsPersistence() {
		return contentsPersistence;
	}

	/**
	 * Sets the contents persistence.
	 *
	 * @param contentsPersistence the contents persistence
	 */
	public void setContentsPersistence(ContentsPersistence contentsPersistence) {
		this.contentsPersistence = contentsPersistence;
	}

	/**
	 * Returns the contents finder.
	 *
	 * @return the contents finder
	 */
	public ContentsFinder getContentsFinder() {
		return contentsFinder;
	}

	/**
	 * Sets the contents finder.
	 *
	 * @param contentsFinder the contents finder
	 */
	public void setContentsFinder(ContentsFinder contentsFinder) {
		this.contentsFinder = contentsFinder;
	}

	/**
	 * Returns the execute user local service.
	 *
	 * @return the execute user local service
	 */
	public org.kisti.edison.service.ExecuteUserLocalService getExecuteUserLocalService() {
		return executeUserLocalService;
	}

	/**
	 * Sets the execute user local service.
	 *
	 * @param executeUserLocalService the execute user local service
	 */
	public void setExecuteUserLocalService(
		org.kisti.edison.service.ExecuteUserLocalService executeUserLocalService) {
		this.executeUserLocalService = executeUserLocalService;
	}

	/**
	 * Returns the execute user persistence.
	 *
	 * @return the execute user persistence
	 */
	public ExecuteUserPersistence getExecuteUserPersistence() {
		return executeUserPersistence;
	}

	/**
	 * Sets the execute user persistence.
	 *
	 * @param executeUserPersistence the execute user persistence
	 */
	public void setExecuteUserPersistence(
		ExecuteUserPersistence executeUserPersistence) {
		this.executeUserPersistence = executeUserPersistence;
	}

	/**
	 * Returns the execute user finder.
	 *
	 * @return the execute user finder
	 */
	public ExecuteUserFinder getExecuteUserFinder() {
		return executeUserFinder;
	}

	/**
	 * Sets the execute user finder.
	 *
	 * @param executeUserFinder the execute user finder
	 */
	public void setExecuteUserFinder(ExecuteUserFinder executeUserFinder) {
		this.executeUserFinder = executeUserFinder;
	}

	/**
	 * Returns the science app local service.
	 *
	 * @return the science app local service
	 */
	public org.kisti.edison.service.ScienceAppLocalService getScienceAppLocalService() {
		return scienceAppLocalService;
	}

	/**
	 * Sets the science app local service.
	 *
	 * @param scienceAppLocalService the science app local service
	 */
	public void setScienceAppLocalService(
		org.kisti.edison.service.ScienceAppLocalService scienceAppLocalService) {
		this.scienceAppLocalService = scienceAppLocalService;
	}

	/**
	 * Returns the science app persistence.
	 *
	 * @return the science app persistence
	 */
	public ScienceAppPersistence getScienceAppPersistence() {
		return scienceAppPersistence;
	}

	/**
	 * Sets the science app persistence.
	 *
	 * @param scienceAppPersistence the science app persistence
	 */
	public void setScienceAppPersistence(
		ScienceAppPersistence scienceAppPersistence) {
		this.scienceAppPersistence = scienceAppPersistence;
	}

	/**
	 * Returns the science app finder.
	 *
	 * @return the science app finder
	 */
	public ScienceAppFinder getScienceAppFinder() {
		return scienceAppFinder;
	}

	/**
	 * Sets the science app finder.
	 *
	 * @param scienceAppFinder the science app finder
	 */
	public void setScienceAppFinder(ScienceAppFinder scienceAppFinder) {
		this.scienceAppFinder = scienceAppFinder;
	}

	/**
	 * Returns the simulation job local service.
	 *
	 * @return the simulation job local service
	 */
	public org.kisti.edison.service.SimulationJobLocalService getSimulationJobLocalService() {
		return simulationJobLocalService;
	}

	/**
	 * Sets the simulation job local service.
	 *
	 * @param simulationJobLocalService the simulation job local service
	 */
	public void setSimulationJobLocalService(
		org.kisti.edison.service.SimulationJobLocalService simulationJobLocalService) {
		this.simulationJobLocalService = simulationJobLocalService;
	}

	/**
	 * Returns the simulation job persistence.
	 *
	 * @return the simulation job persistence
	 */
	public SimulationJobPersistence getSimulationJobPersistence() {
		return simulationJobPersistence;
	}

	/**
	 * Sets the simulation job persistence.
	 *
	 * @param simulationJobPersistence the simulation job persistence
	 */
	public void setSimulationJobPersistence(
		SimulationJobPersistence simulationJobPersistence) {
		this.simulationJobPersistence = simulationJobPersistence;
	}

	/**
	 * Returns the simulation job finder.
	 *
	 * @return the simulation job finder
	 */
	public SimulationJobFinder getSimulationJobFinder() {
		return simulationJobFinder;
	}

	/**
	 * Sets the simulation job finder.
	 *
	 * @param simulationJobFinder the simulation job finder
	 */
	public void setSimulationJobFinder(SimulationJobFinder simulationJobFinder) {
		this.simulationJobFinder = simulationJobFinder;
	}

	/**
	 * Returns the site user local service.
	 *
	 * @return the site user local service
	 */
	public org.kisti.edison.service.SiteUserLocalService getSiteUserLocalService() {
		return siteUserLocalService;
	}

	/**
	 * Sets the site user local service.
	 *
	 * @param siteUserLocalService the site user local service
	 */
	public void setSiteUserLocalService(
		org.kisti.edison.service.SiteUserLocalService siteUserLocalService) {
		this.siteUserLocalService = siteUserLocalService;
	}

	/**
	 * Returns the site user persistence.
	 *
	 * @return the site user persistence
	 */
	public SiteUserPersistence getSiteUserPersistence() {
		return siteUserPersistence;
	}

	/**
	 * Sets the site user persistence.
	 *
	 * @param siteUserPersistence the site user persistence
	 */
	public void setSiteUserPersistence(SiteUserPersistence siteUserPersistence) {
		this.siteUserPersistence = siteUserPersistence;
	}

	/**
	 * Returns the site user finder.
	 *
	 * @return the site user finder
	 */
	public SiteUserFinder getSiteUserFinder() {
		return siteUserFinder;
	}

	/**
	 * Sets the site user finder.
	 *
	 * @param siteUserFinder the site user finder
	 */
	public void setSiteUserFinder(SiteUserFinder siteUserFinder) {
		this.siteUserFinder = siteUserFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.model.Contents",
			contentsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.model.Contents");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Contents.class;
	}

	protected String getModelClassName() {
		return Contents.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = contentsPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.service.CitationsLocalService.class)
	protected org.kisti.edison.service.CitationsLocalService citationsLocalService;
	@BeanReference(type = CitationsPersistence.class)
	protected CitationsPersistence citationsPersistence;
	@BeanReference(type = CitationsFinder.class)
	protected CitationsFinder citationsFinder;
	@BeanReference(type = org.kisti.edison.service.ContentsLocalService.class)
	protected org.kisti.edison.service.ContentsLocalService contentsLocalService;
	@BeanReference(type = ContentsPersistence.class)
	protected ContentsPersistence contentsPersistence;
	@BeanReference(type = ContentsFinder.class)
	protected ContentsFinder contentsFinder;
	@BeanReference(type = org.kisti.edison.service.ExecuteUserLocalService.class)
	protected org.kisti.edison.service.ExecuteUserLocalService executeUserLocalService;
	@BeanReference(type = ExecuteUserPersistence.class)
	protected ExecuteUserPersistence executeUserPersistence;
	@BeanReference(type = ExecuteUserFinder.class)
	protected ExecuteUserFinder executeUserFinder;
	@BeanReference(type = org.kisti.edison.service.ScienceAppLocalService.class)
	protected org.kisti.edison.service.ScienceAppLocalService scienceAppLocalService;
	@BeanReference(type = ScienceAppPersistence.class)
	protected ScienceAppPersistence scienceAppPersistence;
	@BeanReference(type = ScienceAppFinder.class)
	protected ScienceAppFinder scienceAppFinder;
	@BeanReference(type = org.kisti.edison.service.SimulationJobLocalService.class)
	protected org.kisti.edison.service.SimulationJobLocalService simulationJobLocalService;
	@BeanReference(type = SimulationJobPersistence.class)
	protected SimulationJobPersistence simulationJobPersistence;
	@BeanReference(type = SimulationJobFinder.class)
	protected SimulationJobFinder simulationJobFinder;
	@BeanReference(type = org.kisti.edison.service.SiteUserLocalService.class)
	protected org.kisti.edison.service.SiteUserLocalService siteUserLocalService;
	@BeanReference(type = SiteUserPersistence.class)
	protected SiteUserPersistence siteUserPersistence;
	@BeanReference(type = SiteUserFinder.class)
	protected SiteUserFinder siteUserFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ContentsLocalServiceClpInvoker _clpInvoker = new ContentsLocalServiceClpInvoker();
}