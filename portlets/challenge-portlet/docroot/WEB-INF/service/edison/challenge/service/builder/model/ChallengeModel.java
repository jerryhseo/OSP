/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Challenge service. Represents a row in the &quot;edison_Challenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link edison.challenge.service.builder.model.impl.ChallengeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link edison.challenge.service.builder.model.impl.ChallengeImpl}.
 * </p>
 *
 * @author kyj
 * @see Challenge
 * @see edison.challenge.service.builder.model.impl.ChallengeImpl
 * @see edison.challenge.service.builder.model.impl.ChallengeModelImpl
 * @generated
 */
public interface ChallengeModel extends BaseModel<Challenge> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a challenge model instance should use the {@link Challenge} interface instead.
	 */

	/**
	 * Returns the primary key of this challenge.
	 *
	 * @return the primary key of this challenge
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this challenge.
	 *
	 * @param primaryKey the primary key of this challenge
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the challengeid of this challenge.
	 *
	 * @return the challengeid of this challenge
	 */
	public long getChallengeid();

	/**
	 * Sets the challengeid of this challenge.
	 *
	 * @param challengeid the challengeid of this challenge
	 */
	public void setChallengeid(long challengeid);

	/**
	 * Returns the name of this challenge.
	 *
	 * @return the name of this challenge
	 */
	public String getName();

	/**
	 * Returns the localized name of this challenge in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized name of this challenge
	 */
	@AutoEscape
	public String getName(Locale locale);

	/**
	 * Returns the localized name of this challenge in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this challenge. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized name of this challenge in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized name of this challenge
	 */
	@AutoEscape
	public String getName(String languageId);

	/**
	 * Returns the localized name of this challenge in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this challenge
	 */
	@AutoEscape
	public String getName(String languageId, boolean useDefault);

	@AutoEscape
	public String getNameCurrentLanguageId();

	@AutoEscape
	public String getNameCurrentValue();

	/**
	 * Returns a map of the locales and localized names of this challenge.
	 *
	 * @return the locales and localized names of this challenge
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this challenge.
	 *
	 * @param name the name of this challenge
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this challenge in the language.
	 *
	 * @param name the localized name of this challenge
	 * @param locale the locale of the language
	 */
	public void setName(String name, Locale locale);

	/**
	 * Sets the localized name of this challenge in the language, and sets the default locale.
	 *
	 * @param name the localized name of this challenge
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setName(String name, Locale locale, Locale defaultLocale);

	public void setNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized names of this challenge from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this challenge
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	/**
	 * Sets the localized names of this challenge from the map of locales and localized names, and sets the default locale.
	 *
	 * @param nameMap the locales and localized names of this challenge
	 * @param defaultLocale the default locale
	 */
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Returns the description of this challenge.
	 *
	 * @return the description of this challenge
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this challenge in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this challenge
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this challenge in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this challenge. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this challenge in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this challenge
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this challenge in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this challenge
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this challenge.
	 *
	 * @return the locales and localized descriptions of this challenge
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this challenge.
	 *
	 * @param description the description of this challenge
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this challenge in the language.
	 *
	 * @param description the localized description of this challenge
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this challenge in the language, and sets the default locale.
	 *
	 * @param description the localized description of this challenge
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this challenge from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this challenge
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this challenge from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this challenge
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		edison.challenge.service.builder.model.Challenge challenge);

	@Override
	public int hashCode();

	@Override
	public CacheModel<edison.challenge.service.builder.model.Challenge> toCacheModel();

	@Override
	public edison.challenge.service.builder.model.Challenge toEscapedModel();

	@Override
	public edison.challenge.service.builder.model.Challenge toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}