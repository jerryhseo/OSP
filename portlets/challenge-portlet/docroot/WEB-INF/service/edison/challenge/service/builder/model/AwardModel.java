/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Award service. Represents a row in the &quot;edison_Award&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link edison.challenge.service.builder.model.impl.AwardModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link edison.challenge.service.builder.model.impl.AwardImpl}.
 * </p>
 *
 * @author kyj
 * @see Award
 * @see edison.challenge.service.builder.model.impl.AwardImpl
 * @see edison.challenge.service.builder.model.impl.AwardModelImpl
 * @generated
 */
public interface AwardModel extends BaseModel<Award> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a award model instance should use the {@link Award} interface instead.
	 */

	/**
	 * Returns the primary key of this award.
	 *
	 * @return the primary key of this award
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this award.
	 *
	 * @param primaryKey the primary key of this award
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the awardid of this award.
	 *
	 * @return the awardid of this award
	 */
	public long getAwardid();

	/**
	 * Sets the awardid of this award.
	 *
	 * @param awardid the awardid of this award
	 */
	public void setAwardid(long awardid);

	/**
	 * Returns the award grade name of this award.
	 *
	 * @return the award grade name of this award
	 */
	public String getAwardGradeName();

	/**
	 * Returns the localized award grade name of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized award grade name of this award
	 */
	@AutoEscape
	public String getAwardGradeName(Locale locale);

	/**
	 * Returns the localized award grade name of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized award grade name of this award. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAwardGradeName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized award grade name of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized award grade name of this award
	 */
	@AutoEscape
	public String getAwardGradeName(String languageId);

	/**
	 * Returns the localized award grade name of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized award grade name of this award
	 */
	@AutoEscape
	public String getAwardGradeName(String languageId, boolean useDefault);

	@AutoEscape
	public String getAwardGradeNameCurrentLanguageId();

	@AutoEscape
	public String getAwardGradeNameCurrentValue();

	/**
	 * Returns a map of the locales and localized award grade names of this award.
	 *
	 * @return the locales and localized award grade names of this award
	 */
	public Map<Locale, String> getAwardGradeNameMap();

	/**
	 * Sets the award grade name of this award.
	 *
	 * @param awardGradeName the award grade name of this award
	 */
	public void setAwardGradeName(String awardGradeName);

	/**
	 * Sets the localized award grade name of this award in the language.
	 *
	 * @param awardGradeName the localized award grade name of this award
	 * @param locale the locale of the language
	 */
	public void setAwardGradeName(String awardGradeName, Locale locale);

	/**
	 * Sets the localized award grade name of this award in the language, and sets the default locale.
	 *
	 * @param awardGradeName the localized award grade name of this award
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAwardGradeName(String awardGradeName, Locale locale,
		Locale defaultLocale);

	public void setAwardGradeNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized award grade names of this award from the map of locales and localized award grade names.
	 *
	 * @param awardGradeNameMap the locales and localized award grade names of this award
	 */
	public void setAwardGradeNameMap(Map<Locale, String> awardGradeNameMap);

	/**
	 * Sets the localized award grade names of this award from the map of locales and localized award grade names, and sets the default locale.
	 *
	 * @param awardGradeNameMap the locales and localized award grade names of this award
	 * @param defaultLocale the default locale
	 */
	public void setAwardGradeNameMap(Map<Locale, String> awardGradeNameMap,
		Locale defaultLocale);

	/**
	 * Returns the award name of this award.
	 *
	 * @return the award name of this award
	 */
	public String getAwardName();

	/**
	 * Returns the localized award name of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized award name of this award
	 */
	@AutoEscape
	public String getAwardName(Locale locale);

	/**
	 * Returns the localized award name of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized award name of this award. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAwardName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized award name of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized award name of this award
	 */
	@AutoEscape
	public String getAwardName(String languageId);

	/**
	 * Returns the localized award name of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized award name of this award
	 */
	@AutoEscape
	public String getAwardName(String languageId, boolean useDefault);

	@AutoEscape
	public String getAwardNameCurrentLanguageId();

	@AutoEscape
	public String getAwardNameCurrentValue();

	/**
	 * Returns a map of the locales and localized award names of this award.
	 *
	 * @return the locales and localized award names of this award
	 */
	public Map<Locale, String> getAwardNameMap();

	/**
	 * Sets the award name of this award.
	 *
	 * @param awardName the award name of this award
	 */
	public void setAwardName(String awardName);

	/**
	 * Sets the localized award name of this award in the language.
	 *
	 * @param awardName the localized award name of this award
	 * @param locale the locale of the language
	 */
	public void setAwardName(String awardName, Locale locale);

	/**
	 * Sets the localized award name of this award in the language, and sets the default locale.
	 *
	 * @param awardName the localized award name of this award
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAwardName(String awardName, Locale locale,
		Locale defaultLocale);

	public void setAwardNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized award names of this award from the map of locales and localized award names.
	 *
	 * @param awardNameMap the locales and localized award names of this award
	 */
	public void setAwardNameMap(Map<Locale, String> awardNameMap);

	/**
	 * Sets the localized award names of this award from the map of locales and localized award names, and sets the default locale.
	 *
	 * @param awardNameMap the locales and localized award names of this award
	 * @param defaultLocale the default locale
	 */
	public void setAwardNameMap(Map<Locale, String> awardNameMap,
		Locale defaultLocale);

	/**
	 * Returns the prize of this award.
	 *
	 * @return the prize of this award
	 */
	public String getPrize();

	/**
	 * Returns the localized prize of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized prize of this award
	 */
	@AutoEscape
	public String getPrize(Locale locale);

	/**
	 * Returns the localized prize of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized prize of this award. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPrize(Locale locale, boolean useDefault);

	/**
	 * Returns the localized prize of this award in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized prize of this award
	 */
	@AutoEscape
	public String getPrize(String languageId);

	/**
	 * Returns the localized prize of this award in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized prize of this award
	 */
	@AutoEscape
	public String getPrize(String languageId, boolean useDefault);

	@AutoEscape
	public String getPrizeCurrentLanguageId();

	@AutoEscape
	public String getPrizeCurrentValue();

	/**
	 * Returns a map of the locales and localized prizes of this award.
	 *
	 * @return the locales and localized prizes of this award
	 */
	public Map<Locale, String> getPrizeMap();

	/**
	 * Sets the prize of this award.
	 *
	 * @param prize the prize of this award
	 */
	public void setPrize(String prize);

	/**
	 * Sets the localized prize of this award in the language.
	 *
	 * @param prize the localized prize of this award
	 * @param locale the locale of the language
	 */
	public void setPrize(String prize, Locale locale);

	/**
	 * Sets the localized prize of this award in the language, and sets the default locale.
	 *
	 * @param prize the localized prize of this award
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPrize(String prize, Locale locale, Locale defaultLocale);

	public void setPrizeCurrentLanguageId(String languageId);

	/**
	 * Sets the localized prizes of this award from the map of locales and localized prizes.
	 *
	 * @param prizeMap the locales and localized prizes of this award
	 */
	public void setPrizeMap(Map<Locale, String> prizeMap);

	/**
	 * Sets the localized prizes of this award from the map of locales and localized prizes, and sets the default locale.
	 *
	 * @param prizeMap the locales and localized prizes of this award
	 * @param defaultLocale the default locale
	 */
	public void setPrizeMap(Map<Locale, String> prizeMap, Locale defaultLocale);

	/**
	 * Returns the number of this award.
	 *
	 * @return the number of this award
	 */
	@AutoEscape
	public String getNumber();

	/**
	 * Sets the number of this award.
	 *
	 * @param number the number of this award
	 */
	public void setNumber(String number);

	/**
	 * Returns the childid of this award.
	 *
	 * @return the childid of this award
	 */
	public long getChildid();

	/**
	 * Sets the childid of this award.
	 *
	 * @param childid the childid of this award
	 */
	public void setChildid(long childid);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(edison.challenge.service.builder.model.Award award);

	@Override
	public int hashCode();

	@Override
	public CacheModel<edison.challenge.service.builder.model.Award> toCacheModel();

	@Override
	public edison.challenge.service.builder.model.Award toEscapedModel();

	@Override
	public edison.challenge.service.builder.model.Award toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}