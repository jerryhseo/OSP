/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ChallengeMember service. Represents a row in the &quot;edison_ChallengeMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link edison.challenge.service.builder.model.impl.ChallengeMemberModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link edison.challenge.service.builder.model.impl.ChallengeMemberImpl}.
 * </p>
 *
 * @author kyj
 * @see ChallengeMember
 * @see edison.challenge.service.builder.model.impl.ChallengeMemberImpl
 * @see edison.challenge.service.builder.model.impl.ChallengeMemberModelImpl
 * @generated
 */
public interface ChallengeMemberModel extends BaseModel<ChallengeMember> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a challenge member model instance should use the {@link ChallengeMember} interface instead.
	 */

	/**
	 * Returns the primary key of this challenge member.
	 *
	 * @return the primary key of this challenge member
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this challenge member.
	 *
	 * @param primaryKey the primary key of this challenge member
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ch memberid of this challenge member.
	 *
	 * @return the ch memberid of this challenge member
	 */
	public long getChMemberid();

	/**
	 * Sets the ch memberid of this challenge member.
	 *
	 * @param chMemberid the ch memberid of this challenge member
	 */
	public void setChMemberid(long chMemberid);

	/**
	 * Returns the full name of this challenge member.
	 *
	 * @return the full name of this challenge member
	 */
	public String getFullName();

	/**
	 * Returns the localized full name of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized full name of this challenge member
	 */
	@AutoEscape
	public String getFullName(Locale locale);

	/**
	 * Returns the localized full name of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized full name of this challenge member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFullName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized full name of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized full name of this challenge member
	 */
	@AutoEscape
	public String getFullName(String languageId);

	/**
	 * Returns the localized full name of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized full name of this challenge member
	 */
	@AutoEscape
	public String getFullName(String languageId, boolean useDefault);

	@AutoEscape
	public String getFullNameCurrentLanguageId();

	@AutoEscape
	public String getFullNameCurrentValue();

	/**
	 * Returns a map of the locales and localized full names of this challenge member.
	 *
	 * @return the locales and localized full names of this challenge member
	 */
	public Map<Locale, String> getFullNameMap();

	/**
	 * Sets the full name of this challenge member.
	 *
	 * @param fullName the full name of this challenge member
	 */
	public void setFullName(String fullName);

	/**
	 * Sets the localized full name of this challenge member in the language.
	 *
	 * @param fullName the localized full name of this challenge member
	 * @param locale the locale of the language
	 */
	public void setFullName(String fullName, Locale locale);

	/**
	 * Sets the localized full name of this challenge member in the language, and sets the default locale.
	 *
	 * @param fullName the localized full name of this challenge member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFullName(String fullName, Locale locale, Locale defaultLocale);

	public void setFullNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized full names of this challenge member from the map of locales and localized full names.
	 *
	 * @param fullNameMap the locales and localized full names of this challenge member
	 */
	public void setFullNameMap(Map<Locale, String> fullNameMap);

	/**
	 * Sets the localized full names of this challenge member from the map of locales and localized full names, and sets the default locale.
	 *
	 * @param fullNameMap the locales and localized full names of this challenge member
	 * @param defaultLocale the default locale
	 */
	public void setFullNameMap(Map<Locale, String> fullNameMap,
		Locale defaultLocale);

	/**
	 * Returns the screen name of this challenge member.
	 *
	 * @return the screen name of this challenge member
	 */
	public String getScreenName();

	/**
	 * Returns the localized screen name of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized screen name of this challenge member
	 */
	@AutoEscape
	public String getScreenName(Locale locale);

	/**
	 * Returns the localized screen name of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized screen name of this challenge member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getScreenName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized screen name of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized screen name of this challenge member
	 */
	@AutoEscape
	public String getScreenName(String languageId);

	/**
	 * Returns the localized screen name of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized screen name of this challenge member
	 */
	@AutoEscape
	public String getScreenName(String languageId, boolean useDefault);

	@AutoEscape
	public String getScreenNameCurrentLanguageId();

	@AutoEscape
	public String getScreenNameCurrentValue();

	/**
	 * Returns a map of the locales and localized screen names of this challenge member.
	 *
	 * @return the locales and localized screen names of this challenge member
	 */
	public Map<Locale, String> getScreenNameMap();

	/**
	 * Sets the screen name of this challenge member.
	 *
	 * @param screenName the screen name of this challenge member
	 */
	public void setScreenName(String screenName);

	/**
	 * Sets the localized screen name of this challenge member in the language.
	 *
	 * @param screenName the localized screen name of this challenge member
	 * @param locale the locale of the language
	 */
	public void setScreenName(String screenName, Locale locale);

	/**
	 * Sets the localized screen name of this challenge member in the language, and sets the default locale.
	 *
	 * @param screenName the localized screen name of this challenge member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setScreenName(String screenName, Locale locale,
		Locale defaultLocale);

	public void setScreenNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized screen names of this challenge member from the map of locales and localized screen names.
	 *
	 * @param screenNameMap the locales and localized screen names of this challenge member
	 */
	public void setScreenNameMap(Map<Locale, String> screenNameMap);

	/**
	 * Sets the localized screen names of this challenge member from the map of locales and localized screen names, and sets the default locale.
	 *
	 * @param screenNameMap the locales and localized screen names of this challenge member
	 * @param defaultLocale the default locale
	 */
	public void setScreenNameMap(Map<Locale, String> screenNameMap,
		Locale defaultLocale);

	/**
	 * Returns the email of this challenge member.
	 *
	 * @return the email of this challenge member
	 */
	@AutoEscape
	public String getEmail();

	/**
	 * Sets the email of this challenge member.
	 *
	 * @param email the email of this challenge member
	 */
	public void setEmail(String email);

	/**
	 * Returns the leader of this challenge member.
	 *
	 * @return the leader of this challenge member
	 */
	public boolean getLeader();

	/**
	 * Returns <code>true</code> if this challenge member is leader.
	 *
	 * @return <code>true</code> if this challenge member is leader; <code>false</code> otherwise
	 */
	public boolean isLeader();

	/**
	 * Sets whether this challenge member is leader.
	 *
	 * @param leader the leader of this challenge member
	 */
	public void setLeader(boolean leader);

	/**
	 * Returns the falculty of this challenge member.
	 *
	 * @return the falculty of this challenge member
	 */
	public String getFalculty();

	/**
	 * Returns the localized falculty of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized falculty of this challenge member
	 */
	@AutoEscape
	public String getFalculty(Locale locale);

	/**
	 * Returns the localized falculty of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized falculty of this challenge member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFalculty(Locale locale, boolean useDefault);

	/**
	 * Returns the localized falculty of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized falculty of this challenge member
	 */
	@AutoEscape
	public String getFalculty(String languageId);

	/**
	 * Returns the localized falculty of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized falculty of this challenge member
	 */
	@AutoEscape
	public String getFalculty(String languageId, boolean useDefault);

	@AutoEscape
	public String getFalcultyCurrentLanguageId();

	@AutoEscape
	public String getFalcultyCurrentValue();

	/**
	 * Returns a map of the locales and localized falculties of this challenge member.
	 *
	 * @return the locales and localized falculties of this challenge member
	 */
	public Map<Locale, String> getFalcultyMap();

	/**
	 * Sets the falculty of this challenge member.
	 *
	 * @param falculty the falculty of this challenge member
	 */
	public void setFalculty(String falculty);

	/**
	 * Sets the localized falculty of this challenge member in the language.
	 *
	 * @param falculty the localized falculty of this challenge member
	 * @param locale the locale of the language
	 */
	public void setFalculty(String falculty, Locale locale);

	/**
	 * Sets the localized falculty of this challenge member in the language, and sets the default locale.
	 *
	 * @param falculty the localized falculty of this challenge member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFalculty(String falculty, Locale locale, Locale defaultLocale);

	public void setFalcultyCurrentLanguageId(String languageId);

	/**
	 * Sets the localized falculties of this challenge member from the map of locales and localized falculties.
	 *
	 * @param falcultyMap the locales and localized falculties of this challenge member
	 */
	public void setFalcultyMap(Map<Locale, String> falcultyMap);

	/**
	 * Sets the localized falculties of this challenge member from the map of locales and localized falculties, and sets the default locale.
	 *
	 * @param falcultyMap the locales and localized falculties of this challenge member
	 * @param defaultLocale the default locale
	 */
	public void setFalcultyMap(Map<Locale, String> falcultyMap,
		Locale defaultLocale);

	/**
	 * Returns the major of this challenge member.
	 *
	 * @return the major of this challenge member
	 */
	public String getMajor();

	/**
	 * Returns the localized major of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized major of this challenge member
	 */
	@AutoEscape
	public String getMajor(Locale locale);

	/**
	 * Returns the localized major of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized major of this challenge member. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getMajor(Locale locale, boolean useDefault);

	/**
	 * Returns the localized major of this challenge member in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized major of this challenge member
	 */
	@AutoEscape
	public String getMajor(String languageId);

	/**
	 * Returns the localized major of this challenge member in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized major of this challenge member
	 */
	@AutoEscape
	public String getMajor(String languageId, boolean useDefault);

	@AutoEscape
	public String getMajorCurrentLanguageId();

	@AutoEscape
	public String getMajorCurrentValue();

	/**
	 * Returns a map of the locales and localized majors of this challenge member.
	 *
	 * @return the locales and localized majors of this challenge member
	 */
	public Map<Locale, String> getMajorMap();

	/**
	 * Sets the major of this challenge member.
	 *
	 * @param major the major of this challenge member
	 */
	public void setMajor(String major);

	/**
	 * Sets the localized major of this challenge member in the language.
	 *
	 * @param major the localized major of this challenge member
	 * @param locale the locale of the language
	 */
	public void setMajor(String major, Locale locale);

	/**
	 * Sets the localized major of this challenge member in the language, and sets the default locale.
	 *
	 * @param major the localized major of this challenge member
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setMajor(String major, Locale locale, Locale defaultLocale);

	public void setMajorCurrentLanguageId(String languageId);

	/**
	 * Sets the localized majors of this challenge member from the map of locales and localized majors.
	 *
	 * @param majorMap the locales and localized majors of this challenge member
	 */
	public void setMajorMap(Map<Locale, String> majorMap);

	/**
	 * Sets the localized majors of this challenge member from the map of locales and localized majors, and sets the default locale.
	 *
	 * @param majorMap the locales and localized majors of this challenge member
	 * @param defaultLocale the default locale
	 */
	public void setMajorMap(Map<Locale, String> majorMap, Locale defaultLocale);

	/**
	 * Returns the grade of this challenge member.
	 *
	 * @return the grade of this challenge member
	 */
	@AutoEscape
	public String getGrade();

	/**
	 * Sets the grade of this challenge member.
	 *
	 * @param grade the grade of this challenge member
	 */
	public void setGrade(String grade);

	/**
	 * Returns the ch teamid of this challenge member.
	 *
	 * @return the ch teamid of this challenge member
	 */
	public long getChTeamid();

	/**
	 * Sets the ch teamid of this challenge member.
	 *
	 * @param chTeamid the ch teamid of this challenge member
	 */
	public void setChTeamid(long chTeamid);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		edison.challenge.service.builder.model.ChallengeMember challengeMember);

	@Override
	public int hashCode();

	@Override
	public CacheModel<edison.challenge.service.builder.model.ChallengeMember> toCacheModel();

	@Override
	public edison.challenge.service.builder.model.ChallengeMember toEscapedModel();

	@Override
	public edison.challenge.service.builder.model.ChallengeMember toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}