/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edison.challenge.service.builder.model.Award;
import edison.challenge.service.builder.model.AwardModel;
import edison.challenge.service.builder.model.AwardSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Award service. Represents a row in the &quot;edison_Award&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edison.challenge.service.builder.model.AwardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AwardImpl}.
 * </p>
 *
 * @author kyj
 * @see AwardImpl
 * @see edison.challenge.service.builder.model.Award
 * @see edison.challenge.service.builder.model.AwardModel
 * @generated
 */
@JSON(strict = true)
public class AwardModelImpl extends BaseModelImpl<Award> implements AwardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a award model instance should use the {@link edison.challenge.service.builder.model.Award} interface instead.
	 */
	public static final String TABLE_NAME = "edison_Award";
	public static final Object[][] TABLE_COLUMNS = {
			{ "awardid", Types.BIGINT },
			{ "awardGradeName", Types.VARCHAR },
			{ "awardName", Types.VARCHAR },
			{ "prize", Types.VARCHAR },
			{ "number_", Types.VARCHAR },
			{ "childid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table edison_Award (awardid LONG not null primary key,awardGradeName STRING null,awardName STRING null,prize STRING null,number_ VARCHAR(75) null,childid LONG)";
	public static final String TABLE_SQL_DROP = "drop table edison_Award";
	public static final String ORDER_BY_JPQL = " ORDER BY award.childid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY edison_Award.childid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edison.challenge.service.builder.model.Award"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edison.challenge.service.builder.model.Award"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edison.challenge.service.builder.model.Award"),
			true);
	public static long CHILDID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Award toModel(AwardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Award model = new AwardImpl();

		model.setAwardid(soapModel.getAwardid());
		model.setAwardGradeName(soapModel.getAwardGradeName());
		model.setAwardName(soapModel.getAwardName());
		model.setPrize(soapModel.getPrize());
		model.setNumber(soapModel.getNumber());
		model.setChildid(soapModel.getChildid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Award> toModels(AwardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Award> models = new ArrayList<Award>(soapModels.length);

		for (AwardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edison.challenge.service.builder.model.Award"));

	public AwardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _awardid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAwardid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _awardid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Award.class;
	}

	@Override
	public String getModelClassName() {
		return Award.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("awardid", getAwardid());
		attributes.put("awardGradeName", getAwardGradeName());
		attributes.put("awardName", getAwardName());
		attributes.put("prize", getPrize());
		attributes.put("number", getNumber());
		attributes.put("childid", getChildid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long awardid = (Long)attributes.get("awardid");

		if (awardid != null) {
			setAwardid(awardid);
		}

		String awardGradeName = (String)attributes.get("awardGradeName");

		if (awardGradeName != null) {
			setAwardGradeName(awardGradeName);
		}

		String awardName = (String)attributes.get("awardName");

		if (awardName != null) {
			setAwardName(awardName);
		}

		String prize = (String)attributes.get("prize");

		if (prize != null) {
			setPrize(prize);
		}

		String number = (String)attributes.get("number");

		if (number != null) {
			setNumber(number);
		}

		Long childid = (Long)attributes.get("childid");

		if (childid != null) {
			setChildid(childid);
		}
	}

	@JSON
	@Override
	public long getAwardid() {
		return _awardid;
	}

	@Override
	public void setAwardid(long awardid) {
		_awardid = awardid;
	}

	@JSON
	@Override
	public String getAwardGradeName() {
		if (_awardGradeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _awardGradeName;
		}
	}

	@Override
	public String getAwardGradeName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAwardGradeName(languageId);
	}

	@Override
	public String getAwardGradeName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAwardGradeName(languageId, useDefault);
	}

	@Override
	public String getAwardGradeName(String languageId) {
		return LocalizationUtil.getLocalization(getAwardGradeName(), languageId);
	}

	@Override
	public String getAwardGradeName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getAwardGradeName(),
			languageId, useDefault);
	}

	@Override
	public String getAwardGradeNameCurrentLanguageId() {
		return _awardGradeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAwardGradeNameCurrentValue() {
		Locale locale = getLocale(_awardGradeNameCurrentLanguageId);

		return getAwardGradeName(locale);
	}

	@Override
	public Map<Locale, String> getAwardGradeNameMap() {
		return LocalizationUtil.getLocalizationMap(getAwardGradeName());
	}

	@Override
	public void setAwardGradeName(String awardGradeName) {
		_awardGradeName = awardGradeName;
	}

	@Override
	public void setAwardGradeName(String awardGradeName, Locale locale) {
		setAwardGradeName(awardGradeName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setAwardGradeName(String awardGradeName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(awardGradeName)) {
			setAwardGradeName(LocalizationUtil.updateLocalization(
					getAwardGradeName(), "AwardGradeName", awardGradeName,
					languageId, defaultLanguageId));
		}
		else {
			setAwardGradeName(LocalizationUtil.removeLocalization(
					getAwardGradeName(), "AwardGradeName", languageId));
		}
	}

	@Override
	public void setAwardGradeNameCurrentLanguageId(String languageId) {
		_awardGradeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setAwardGradeNameMap(Map<Locale, String> awardGradeNameMap) {
		setAwardGradeNameMap(awardGradeNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setAwardGradeNameMap(Map<Locale, String> awardGradeNameMap,
		Locale defaultLocale) {
		if (awardGradeNameMap == null) {
			return;
		}

		setAwardGradeName(LocalizationUtil.updateLocalization(
				awardGradeNameMap, getAwardGradeName(), "AwardGradeName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAwardName() {
		if (_awardName == null) {
			return StringPool.BLANK;
		}
		else {
			return _awardName;
		}
	}

	@Override
	public String getAwardName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAwardName(languageId);
	}

	@Override
	public String getAwardName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAwardName(languageId, useDefault);
	}

	@Override
	public String getAwardName(String languageId) {
		return LocalizationUtil.getLocalization(getAwardName(), languageId);
	}

	@Override
	public String getAwardName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getAwardName(), languageId,
			useDefault);
	}

	@Override
	public String getAwardNameCurrentLanguageId() {
		return _awardNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAwardNameCurrentValue() {
		Locale locale = getLocale(_awardNameCurrentLanguageId);

		return getAwardName(locale);
	}

	@Override
	public Map<Locale, String> getAwardNameMap() {
		return LocalizationUtil.getLocalizationMap(getAwardName());
	}

	@Override
	public void setAwardName(String awardName) {
		_awardName = awardName;
	}

	@Override
	public void setAwardName(String awardName, Locale locale) {
		setAwardName(awardName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setAwardName(String awardName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(awardName)) {
			setAwardName(LocalizationUtil.updateLocalization(getAwardName(),
					"AwardName", awardName, languageId, defaultLanguageId));
		}
		else {
			setAwardName(LocalizationUtil.removeLocalization(getAwardName(),
					"AwardName", languageId));
		}
	}

	@Override
	public void setAwardNameCurrentLanguageId(String languageId) {
		_awardNameCurrentLanguageId = languageId;
	}

	@Override
	public void setAwardNameMap(Map<Locale, String> awardNameMap) {
		setAwardNameMap(awardNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setAwardNameMap(Map<Locale, String> awardNameMap,
		Locale defaultLocale) {
		if (awardNameMap == null) {
			return;
		}

		setAwardName(LocalizationUtil.updateLocalization(awardNameMap,
				getAwardName(), "AwardName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPrize() {
		if (_prize == null) {
			return StringPool.BLANK;
		}
		else {
			return _prize;
		}
	}

	@Override
	public String getPrize(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrize(languageId);
	}

	@Override
	public String getPrize(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrize(languageId, useDefault);
	}

	@Override
	public String getPrize(String languageId) {
		return LocalizationUtil.getLocalization(getPrize(), languageId);
	}

	@Override
	public String getPrize(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPrize(), languageId,
			useDefault);
	}

	@Override
	public String getPrizeCurrentLanguageId() {
		return _prizeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPrizeCurrentValue() {
		Locale locale = getLocale(_prizeCurrentLanguageId);

		return getPrize(locale);
	}

	@Override
	public Map<Locale, String> getPrizeMap() {
		return LocalizationUtil.getLocalizationMap(getPrize());
	}

	@Override
	public void setPrize(String prize) {
		_prize = prize;
	}

	@Override
	public void setPrize(String prize, Locale locale) {
		setPrize(prize, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setPrize(String prize, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(prize)) {
			setPrize(LocalizationUtil.updateLocalization(getPrize(), "Prize",
					prize, languageId, defaultLanguageId));
		}
		else {
			setPrize(LocalizationUtil.removeLocalization(getPrize(), "Prize",
					languageId));
		}
	}

	@Override
	public void setPrizeCurrentLanguageId(String languageId) {
		_prizeCurrentLanguageId = languageId;
	}

	@Override
	public void setPrizeMap(Map<Locale, String> prizeMap) {
		setPrizeMap(prizeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setPrizeMap(Map<Locale, String> prizeMap, Locale defaultLocale) {
		if (prizeMap == null) {
			return;
		}

		setPrize(LocalizationUtil.updateLocalization(prizeMap, getPrize(),
				"Prize", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getNumber() {
		if (_number == null) {
			return StringPool.BLANK;
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		_number = number;
	}

	@JSON
	@Override
	public long getChildid() {
		return _childid;
	}

	@Override
	public void setChildid(long childid) {
		_columnBitmask = -1L;

		if (!_setOriginalChildid) {
			_setOriginalChildid = true;

			_originalChildid = _childid;
		}

		_childid = childid;
	}

	public long getOriginalChildid() {
		return _originalChildid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Award.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> awardGradeNameMap = getAwardGradeNameMap();

		for (Map.Entry<Locale, String> entry : awardGradeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> awardNameMap = getAwardNameMap();

		for (Map.Entry<Locale, String> entry : awardNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> prizeMap = getPrizeMap();

		for (Map.Entry<Locale, String> entry : prizeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getAwardGradeName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String awardGradeName = getAwardGradeName(defaultLocale);

		if (Validator.isNull(awardGradeName)) {
			setAwardGradeName(getAwardGradeName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setAwardGradeName(getAwardGradeName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String awardName = getAwardName(defaultLocale);

		if (Validator.isNull(awardName)) {
			setAwardName(getAwardName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAwardName(getAwardName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String prize = getPrize(defaultLocale);

		if (Validator.isNull(prize)) {
			setPrize(getPrize(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPrize(getPrize(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Award toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Award)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AwardImpl awardImpl = new AwardImpl();

		awardImpl.setAwardid(getAwardid());
		awardImpl.setAwardGradeName(getAwardGradeName());
		awardImpl.setAwardName(getAwardName());
		awardImpl.setPrize(getPrize());
		awardImpl.setNumber(getNumber());
		awardImpl.setChildid(getChildid());

		awardImpl.resetOriginalValues();

		return awardImpl;
	}

	@Override
	public int compareTo(Award award) {
		int value = 0;

		if (getChildid() < award.getChildid()) {
			value = -1;
		}
		else if (getChildid() > award.getChildid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Award)) {
			return false;
		}

		Award award = (Award)obj;

		long primaryKey = award.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AwardModelImpl awardModelImpl = this;

		awardModelImpl._originalChildid = awardModelImpl._childid;

		awardModelImpl._setOriginalChildid = false;

		awardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Award> toCacheModel() {
		AwardCacheModel awardCacheModel = new AwardCacheModel();

		awardCacheModel.awardid = getAwardid();

		awardCacheModel.awardGradeName = getAwardGradeName();

		String awardGradeName = awardCacheModel.awardGradeName;

		if ((awardGradeName != null) && (awardGradeName.length() == 0)) {
			awardCacheModel.awardGradeName = null;
		}

		awardCacheModel.awardName = getAwardName();

		String awardName = awardCacheModel.awardName;

		if ((awardName != null) && (awardName.length() == 0)) {
			awardCacheModel.awardName = null;
		}

		awardCacheModel.prize = getPrize();

		String prize = awardCacheModel.prize;

		if ((prize != null) && (prize.length() == 0)) {
			awardCacheModel.prize = null;
		}

		awardCacheModel.number = getNumber();

		String number = awardCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			awardCacheModel.number = null;
		}

		awardCacheModel.childid = getChildid();

		return awardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{awardid=");
		sb.append(getAwardid());
		sb.append(", awardGradeName=");
		sb.append(getAwardGradeName());
		sb.append(", awardName=");
		sb.append(getAwardName());
		sb.append(", prize=");
		sb.append(getPrize());
		sb.append(", number=");
		sb.append(getNumber());
		sb.append(", childid=");
		sb.append(getChildid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("edison.challenge.service.builder.model.Award");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>awardid</column-name><column-value><![CDATA[");
		sb.append(getAwardid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awardGradeName</column-name><column-value><![CDATA[");
		sb.append(getAwardGradeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awardName</column-name><column-value><![CDATA[");
		sb.append(getAwardName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prize</column-name><column-value><![CDATA[");
		sb.append(getPrize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>childid</column-name><column-value><![CDATA[");
		sb.append(getChildid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Award.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Award.class };
	private long _awardid;
	private String _awardGradeName;
	private String _awardGradeNameCurrentLanguageId;
	private String _awardName;
	private String _awardNameCurrentLanguageId;
	private String _prize;
	private String _prizeCurrentLanguageId;
	private String _number;
	private long _childid;
	private long _originalChildid;
	private boolean _setOriginalChildid;
	private long _columnBitmask;
	private Award _escapedModel;
}