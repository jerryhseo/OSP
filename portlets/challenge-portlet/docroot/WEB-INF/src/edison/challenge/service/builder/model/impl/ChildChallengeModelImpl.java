/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edison.challenge.service.builder.model.ChildChallenge;
import edison.challenge.service.builder.model.ChildChallengeModel;
import edison.challenge.service.builder.model.ChildChallengeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ChildChallenge service. Represents a row in the &quot;edison_ChildChallenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edison.challenge.service.builder.model.ChildChallengeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChildChallengeImpl}.
 * </p>
 *
 * @author kyj
 * @see ChildChallengeImpl
 * @see edison.challenge.service.builder.model.ChildChallenge
 * @see edison.challenge.service.builder.model.ChildChallengeModel
 * @generated
 */
@JSON(strict = true)
public class ChildChallengeModelImpl extends BaseModelImpl<ChildChallenge>
	implements ChildChallengeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a child challenge model instance should use the {@link edison.challenge.service.builder.model.ChildChallenge} interface instead.
	 */
	public static final String TABLE_NAME = "edison_ChildChallenge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "childid", Types.BIGINT },
			{ "number_", Types.INTEGER },
			{ "presentationDay", Types.TIMESTAMP },
			{ "paperStartDay", Types.TIMESTAMP },
			{ "paperEndDay", Types.TIMESTAMP },
			{ "evaluationStartDay", Types.TIMESTAMP },
			{ "evaluationEndDay", Types.TIMESTAMP },
			{ "challengeStartDay", Types.TIMESTAMP },
			{ "challengeEndDay", Types.TIMESTAMP },
			{ "status", Types.VARCHAR },
			{ "challengeid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table edison_ChildChallenge (childid LONG not null primary key,number_ INTEGER,presentationDay DATE null,paperStartDay DATE null,paperEndDay DATE null,evaluationStartDay DATE null,evaluationEndDay DATE null,challengeStartDay DATE null,challengeEndDay DATE null,status VARCHAR(75) null,challengeid LONG)";
	public static final String TABLE_SQL_DROP = "drop table edison_ChildChallenge";
	public static final String ORDER_BY_JPQL = " ORDER BY childChallenge.challengeEndDay ASC";
	public static final String ORDER_BY_SQL = " ORDER BY edison_ChildChallenge.challengeEndDay ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edison.challenge.service.builder.model.ChildChallenge"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edison.challenge.service.builder.model.ChildChallenge"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edison.challenge.service.builder.model.ChildChallenge"),
			true);
	public static long CHALLENGEID_COLUMN_BITMASK = 1L;
	public static long CHILDID_COLUMN_BITMASK = 2L;
	public static long CHALLENGEENDDAY_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ChildChallenge toModel(ChildChallengeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChildChallenge model = new ChildChallengeImpl();

		model.setChildid(soapModel.getChildid());
		model.setNumber(soapModel.getNumber());
		model.setPresentationDay(soapModel.getPresentationDay());
		model.setPaperStartDay(soapModel.getPaperStartDay());
		model.setPaperEndDay(soapModel.getPaperEndDay());
		model.setEvaluationStartDay(soapModel.getEvaluationStartDay());
		model.setEvaluationEndDay(soapModel.getEvaluationEndDay());
		model.setChallengeStartDay(soapModel.getChallengeStartDay());
		model.setChallengeEndDay(soapModel.getChallengeEndDay());
		model.setStatus(soapModel.getStatus());
		model.setChallengeid(soapModel.getChallengeid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ChildChallenge> toModels(ChildChallengeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChildChallenge> models = new ArrayList<ChildChallenge>(soapModels.length);

		for (ChildChallengeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edison.challenge.service.builder.model.ChildChallenge"));

	public ChildChallengeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _childid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChildid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _childid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChildChallenge.class;
	}

	@Override
	public String getModelClassName() {
		return ChildChallenge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("childid", getChildid());
		attributes.put("number", getNumber());
		attributes.put("presentationDay", getPresentationDay());
		attributes.put("paperStartDay", getPaperStartDay());
		attributes.put("paperEndDay", getPaperEndDay());
		attributes.put("evaluationStartDay", getEvaluationStartDay());
		attributes.put("evaluationEndDay", getEvaluationEndDay());
		attributes.put("challengeStartDay", getChallengeStartDay());
		attributes.put("challengeEndDay", getChallengeEndDay());
		attributes.put("status", getStatus());
		attributes.put("challengeid", getChallengeid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long childid = (Long)attributes.get("childid");

		if (childid != null) {
			setChildid(childid);
		}

		Integer number = (Integer)attributes.get("number");

		if (number != null) {
			setNumber(number);
		}

		Date presentationDay = (Date)attributes.get("presentationDay");

		if (presentationDay != null) {
			setPresentationDay(presentationDay);
		}

		Date paperStartDay = (Date)attributes.get("paperStartDay");

		if (paperStartDay != null) {
			setPaperStartDay(paperStartDay);
		}

		Date paperEndDay = (Date)attributes.get("paperEndDay");

		if (paperEndDay != null) {
			setPaperEndDay(paperEndDay);
		}

		Date evaluationStartDay = (Date)attributes.get("evaluationStartDay");

		if (evaluationStartDay != null) {
			setEvaluationStartDay(evaluationStartDay);
		}

		Date evaluationEndDay = (Date)attributes.get("evaluationEndDay");

		if (evaluationEndDay != null) {
			setEvaluationEndDay(evaluationEndDay);
		}

		Date challengeStartDay = (Date)attributes.get("challengeStartDay");

		if (challengeStartDay != null) {
			setChallengeStartDay(challengeStartDay);
		}

		Date challengeEndDay = (Date)attributes.get("challengeEndDay");

		if (challengeEndDay != null) {
			setChallengeEndDay(challengeEndDay);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long challengeid = (Long)attributes.get("challengeid");

		if (challengeid != null) {
			setChallengeid(challengeid);
		}
	}

	@JSON
	@Override
	public long getChildid() {
		return _childid;
	}

	@Override
	public void setChildid(long childid) {
		_columnBitmask |= CHILDID_COLUMN_BITMASK;

		if (!_setOriginalChildid) {
			_setOriginalChildid = true;

			_originalChildid = _childid;
		}

		_childid = childid;
	}

	public long getOriginalChildid() {
		return _originalChildid;
	}

	@JSON
	@Override
	public int getNumber() {
		return _number;
	}

	@Override
	public void setNumber(int number) {
		_number = number;
	}

	@JSON
	@Override
	public Date getPresentationDay() {
		return _presentationDay;
	}

	@Override
	public void setPresentationDay(Date presentationDay) {
		_presentationDay = presentationDay;
	}

	@JSON
	@Override
	public Date getPaperStartDay() {
		return _paperStartDay;
	}

	@Override
	public void setPaperStartDay(Date paperStartDay) {
		_paperStartDay = paperStartDay;
	}

	@JSON
	@Override
	public Date getPaperEndDay() {
		return _paperEndDay;
	}

	@Override
	public void setPaperEndDay(Date paperEndDay) {
		_paperEndDay = paperEndDay;
	}

	@JSON
	@Override
	public Date getEvaluationStartDay() {
		return _evaluationStartDay;
	}

	@Override
	public void setEvaluationStartDay(Date evaluationStartDay) {
		_evaluationStartDay = evaluationStartDay;
	}

	@JSON
	@Override
	public Date getEvaluationEndDay() {
		return _evaluationEndDay;
	}

	@Override
	public void setEvaluationEndDay(Date evaluationEndDay) {
		_evaluationEndDay = evaluationEndDay;
	}

	@JSON
	@Override
	public Date getChallengeStartDay() {
		return _challengeStartDay;
	}

	@Override
	public void setChallengeStartDay(Date challengeStartDay) {
		_challengeStartDay = challengeStartDay;
	}

	@JSON
	@Override
	public Date getChallengeEndDay() {
		return _challengeEndDay;
	}

	@Override
	public void setChallengeEndDay(Date challengeEndDay) {
		_columnBitmask = -1L;

		_challengeEndDay = challengeEndDay;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public long getChallengeid() {
		return _challengeid;
	}

	@Override
	public void setChallengeid(long challengeid) {
		_columnBitmask |= CHALLENGEID_COLUMN_BITMASK;

		if (!_setOriginalChallengeid) {
			_setOriginalChallengeid = true;

			_originalChallengeid = _challengeid;
		}

		_challengeid = challengeid;
	}

	public long getOriginalChallengeid() {
		return _originalChallengeid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ChildChallenge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ChildChallenge toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChildChallenge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChildChallengeImpl childChallengeImpl = new ChildChallengeImpl();

		childChallengeImpl.setChildid(getChildid());
		childChallengeImpl.setNumber(getNumber());
		childChallengeImpl.setPresentationDay(getPresentationDay());
		childChallengeImpl.setPaperStartDay(getPaperStartDay());
		childChallengeImpl.setPaperEndDay(getPaperEndDay());
		childChallengeImpl.setEvaluationStartDay(getEvaluationStartDay());
		childChallengeImpl.setEvaluationEndDay(getEvaluationEndDay());
		childChallengeImpl.setChallengeStartDay(getChallengeStartDay());
		childChallengeImpl.setChallengeEndDay(getChallengeEndDay());
		childChallengeImpl.setStatus(getStatus());
		childChallengeImpl.setChallengeid(getChallengeid());

		childChallengeImpl.resetOriginalValues();

		return childChallengeImpl;
	}

	@Override
	public int compareTo(ChildChallenge childChallenge) {
		int value = 0;

		value = DateUtil.compareTo(getChallengeEndDay(),
				childChallenge.getChallengeEndDay());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChildChallenge)) {
			return false;
		}

		ChildChallenge childChallenge = (ChildChallenge)obj;

		long primaryKey = childChallenge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ChildChallengeModelImpl childChallengeModelImpl = this;

		childChallengeModelImpl._originalChildid = childChallengeModelImpl._childid;

		childChallengeModelImpl._setOriginalChildid = false;

		childChallengeModelImpl._originalChallengeid = childChallengeModelImpl._challengeid;

		childChallengeModelImpl._setOriginalChallengeid = false;

		childChallengeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChildChallenge> toCacheModel() {
		ChildChallengeCacheModel childChallengeCacheModel = new ChildChallengeCacheModel();

		childChallengeCacheModel.childid = getChildid();

		childChallengeCacheModel.number = getNumber();

		Date presentationDay = getPresentationDay();

		if (presentationDay != null) {
			childChallengeCacheModel.presentationDay = presentationDay.getTime();
		}
		else {
			childChallengeCacheModel.presentationDay = Long.MIN_VALUE;
		}

		Date paperStartDay = getPaperStartDay();

		if (paperStartDay != null) {
			childChallengeCacheModel.paperStartDay = paperStartDay.getTime();
		}
		else {
			childChallengeCacheModel.paperStartDay = Long.MIN_VALUE;
		}

		Date paperEndDay = getPaperEndDay();

		if (paperEndDay != null) {
			childChallengeCacheModel.paperEndDay = paperEndDay.getTime();
		}
		else {
			childChallengeCacheModel.paperEndDay = Long.MIN_VALUE;
		}

		Date evaluationStartDay = getEvaluationStartDay();

		if (evaluationStartDay != null) {
			childChallengeCacheModel.evaluationStartDay = evaluationStartDay.getTime();
		}
		else {
			childChallengeCacheModel.evaluationStartDay = Long.MIN_VALUE;
		}

		Date evaluationEndDay = getEvaluationEndDay();

		if (evaluationEndDay != null) {
			childChallengeCacheModel.evaluationEndDay = evaluationEndDay.getTime();
		}
		else {
			childChallengeCacheModel.evaluationEndDay = Long.MIN_VALUE;
		}

		Date challengeStartDay = getChallengeStartDay();

		if (challengeStartDay != null) {
			childChallengeCacheModel.challengeStartDay = challengeStartDay.getTime();
		}
		else {
			childChallengeCacheModel.challengeStartDay = Long.MIN_VALUE;
		}

		Date challengeEndDay = getChallengeEndDay();

		if (challengeEndDay != null) {
			childChallengeCacheModel.challengeEndDay = challengeEndDay.getTime();
		}
		else {
			childChallengeCacheModel.challengeEndDay = Long.MIN_VALUE;
		}

		childChallengeCacheModel.status = getStatus();

		String status = childChallengeCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			childChallengeCacheModel.status = null;
		}

		childChallengeCacheModel.challengeid = getChallengeid();

		return childChallengeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{childid=");
		sb.append(getChildid());
		sb.append(", number=");
		sb.append(getNumber());
		sb.append(", presentationDay=");
		sb.append(getPresentationDay());
		sb.append(", paperStartDay=");
		sb.append(getPaperStartDay());
		sb.append(", paperEndDay=");
		sb.append(getPaperEndDay());
		sb.append(", evaluationStartDay=");
		sb.append(getEvaluationStartDay());
		sb.append(", evaluationEndDay=");
		sb.append(getEvaluationEndDay());
		sb.append(", challengeStartDay=");
		sb.append(getChallengeStartDay());
		sb.append(", challengeEndDay=");
		sb.append(getChallengeEndDay());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", challengeid=");
		sb.append(getChallengeid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("edison.challenge.service.builder.model.ChildChallenge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>childid</column-name><column-value><![CDATA[");
		sb.append(getChildid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationDay</column-name><column-value><![CDATA[");
		sb.append(getPresentationDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperStartDay</column-name><column-value><![CDATA[");
		sb.append(getPaperStartDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperEndDay</column-name><column-value><![CDATA[");
		sb.append(getPaperEndDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationStartDay</column-name><column-value><![CDATA[");
		sb.append(getEvaluationStartDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationEndDay</column-name><column-value><![CDATA[");
		sb.append(getEvaluationEndDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeStartDay</column-name><column-value><![CDATA[");
		sb.append(getChallengeStartDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeEndDay</column-name><column-value><![CDATA[");
		sb.append(getChallengeEndDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>challengeid</column-name><column-value><![CDATA[");
		sb.append(getChallengeid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChildChallenge.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChildChallenge.class
		};
	private long _childid;
	private long _originalChildid;
	private boolean _setOriginalChildid;
	private int _number;
	private Date _presentationDay;
	private Date _paperStartDay;
	private Date _paperEndDay;
	private Date _evaluationStartDay;
	private Date _evaluationEndDay;
	private Date _challengeStartDay;
	private Date _challengeEndDay;
	private String _status;
	private long _challengeid;
	private long _originalChallengeid;
	private boolean _setOriginalChallengeid;
	private long _columnBitmask;
	private ChildChallenge _escapedModel;
}