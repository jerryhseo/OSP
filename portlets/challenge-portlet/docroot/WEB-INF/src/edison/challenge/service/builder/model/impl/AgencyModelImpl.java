/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edison.challenge.service.builder.model.Agency;
import edison.challenge.service.builder.model.AgencyModel;
import edison.challenge.service.builder.model.AgencySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Agency service. Represents a row in the &quot;edison_Agency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edison.challenge.service.builder.model.AgencyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgencyImpl}.
 * </p>
 *
 * @author kyj
 * @see AgencyImpl
 * @see edison.challenge.service.builder.model.Agency
 * @see edison.challenge.service.builder.model.AgencyModel
 * @generated
 */
@JSON(strict = true)
public class AgencyModelImpl extends BaseModelImpl<Agency>
	implements AgencyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agency model instance should use the {@link edison.challenge.service.builder.model.Agency} interface instead.
	 */
	public static final String TABLE_NAME = "edison_Agency";
	public static final Object[][] TABLE_COLUMNS = {
			{ "agencyid", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "level", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "childid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table edison_Agency (agencyid LONG not null primary key,name STRING null,level VARCHAR(75) null,url VARCHAR(75) null,childid LONG)";
	public static final String TABLE_SQL_DROP = "drop table edison_Agency";
	public static final String ORDER_BY_JPQL = " ORDER BY agency.agencyid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY edison_Agency.agencyid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edison.challenge.service.builder.model.Agency"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edison.challenge.service.builder.model.Agency"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edison.challenge.service.builder.model.Agency"),
			true);
	public static long CHILDID_COLUMN_BITMASK = 1L;
	public static long AGENCYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Agency toModel(AgencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Agency model = new AgencyImpl();

		model.setAgencyid(soapModel.getAgencyid());
		model.setName(soapModel.getName());
		model.setLevel(soapModel.getLevel());
		model.setUrl(soapModel.getUrl());
		model.setChildid(soapModel.getChildid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Agency> toModels(AgencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Agency> models = new ArrayList<Agency>(soapModels.length);

		for (AgencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edison.challenge.service.builder.model.Agency"));

	public AgencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agencyid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgencyid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agencyid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Agency.class;
	}

	@Override
	public String getModelClassName() {
		return Agency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("agencyid", getAgencyid());
		attributes.put("name", getName());
		attributes.put("level", getLevel());
		attributes.put("url", getUrl());
		attributes.put("childid", getChildid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long agencyid = (Long)attributes.get("agencyid");

		if (agencyid != null) {
			setAgencyid(agencyid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String level = (String)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Long childid = (Long)attributes.get("childid");

		if (childid != null) {
			setChildid(childid);
		}
	}

	@JSON
	@Override
	public long getAgencyid() {
		return _agencyid;
	}

	@Override
	public void setAgencyid(long agencyid) {
		_columnBitmask = -1L;

		_agencyid = agencyid;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLevel() {
		if (_level == null) {
			return StringPool.BLANK;
		}
		else {
			return _level;
		}
	}

	@Override
	public void setLevel(String level) {
		_level = level;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public long getChildid() {
		return _childid;
	}

	@Override
	public void setChildid(long childid) {
		_columnBitmask |= CHILDID_COLUMN_BITMASK;

		if (!_setOriginalChildid) {
			_setOriginalChildid = true;

			_originalChildid = _childid;
		}

		_childid = childid;
	}

	public long getOriginalChildid() {
		return _originalChildid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Agency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Agency toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Agency)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgencyImpl agencyImpl = new AgencyImpl();

		agencyImpl.setAgencyid(getAgencyid());
		agencyImpl.setName(getName());
		agencyImpl.setLevel(getLevel());
		agencyImpl.setUrl(getUrl());
		agencyImpl.setChildid(getChildid());

		agencyImpl.resetOriginalValues();

		return agencyImpl;
	}

	@Override
	public int compareTo(Agency agency) {
		int value = 0;

		if (getAgencyid() < agency.getAgencyid()) {
			value = -1;
		}
		else if (getAgencyid() > agency.getAgencyid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Agency)) {
			return false;
		}

		Agency agency = (Agency)obj;

		long primaryKey = agency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AgencyModelImpl agencyModelImpl = this;

		agencyModelImpl._originalChildid = agencyModelImpl._childid;

		agencyModelImpl._setOriginalChildid = false;

		agencyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Agency> toCacheModel() {
		AgencyCacheModel agencyCacheModel = new AgencyCacheModel();

		agencyCacheModel.agencyid = getAgencyid();

		agencyCacheModel.name = getName();

		String name = agencyCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			agencyCacheModel.name = null;
		}

		agencyCacheModel.level = getLevel();

		String level = agencyCacheModel.level;

		if ((level != null) && (level.length() == 0)) {
			agencyCacheModel.level = null;
		}

		agencyCacheModel.url = getUrl();

		String url = agencyCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			agencyCacheModel.url = null;
		}

		agencyCacheModel.childid = getChildid();

		return agencyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{agencyid=");
		sb.append(getAgencyid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", childid=");
		sb.append(getChildid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("edison.challenge.service.builder.model.Agency");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>agencyid</column-name><column-value><![CDATA[");
		sb.append(getAgencyid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>childid</column-name><column-value><![CDATA[");
		sb.append(getChildid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Agency.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Agency.class };
	private long _agencyid;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _level;
	private String _url;
	private long _childid;
	private long _originalChildid;
	private boolean _setOriginalChildid;
	private long _columnBitmask;
	private Agency _escapedModel;
}