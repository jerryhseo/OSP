/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edison.challenge.service.builder.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edison.challenge.service.builder.model.ChallengeTeam;
import edison.challenge.service.builder.model.ChallengeTeamModel;
import edison.challenge.service.builder.model.ChallengeTeamSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ChallengeTeam service. Represents a row in the &quot;edison_ChallengeTeam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edison.challenge.service.builder.model.ChallengeTeamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChallengeTeamImpl}.
 * </p>
 *
 * @author kyj
 * @see ChallengeTeamImpl
 * @see edison.challenge.service.builder.model.ChallengeTeam
 * @see edison.challenge.service.builder.model.ChallengeTeamModel
 * @generated
 */
@JSON(strict = true)
public class ChallengeTeamModelImpl extends BaseModelImpl<ChallengeTeam>
	implements ChallengeTeamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a challenge team model instance should use the {@link edison.challenge.service.builder.model.ChallengeTeam} interface instead.
	 */
	public static final String TABLE_NAME = "edison_ChallengeTeam";
	public static final Object[][] TABLE_COLUMNS = {
			{ "chTeamid", Types.BIGINT },
			{ "teamName", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "paperPDFstatus", Types.BOOLEAN },
			{ "paperstatus", Types.BOOLEAN },
			{ "presentationstatus", Types.BOOLEAN },
			{ "registerDay", Types.TIMESTAMP },
			{ "registerid", Types.VARCHAR },
			{ "paperName", Types.VARCHAR },
			{ "paperAbstract", Types.VARCHAR },
			{ "paperFileName", Types.VARCHAR },
			{ "paperSubmissionDay", Types.TIMESTAMP },
			{ "paperModifyDay", Types.TIMESTAMP },
			{ "paperPDFFileName", Types.VARCHAR },
			{ "paperPDFSubmissionDay", Types.TIMESTAMP },
			{ "paperPDFModifyDay", Types.TIMESTAMP },
			{ "presentationName", Types.VARCHAR },
			{ "presentationFileName", Types.VARCHAR },
			{ "presentationSubmissionDay", Types.TIMESTAMP },
			{ "presentationModifyDay", Types.TIMESTAMP },
			{ "filepath", Types.VARCHAR },
			{ "childid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table edison_ChallengeTeam (chTeamid LONG not null primary key,teamName STRING null,subject STRING null,paperPDFstatus BOOLEAN,paperstatus BOOLEAN,presentationstatus BOOLEAN,registerDay DATE null,registerid VARCHAR(75) null,paperName STRING null,paperAbstract STRING null,paperFileName VARCHAR(2000) null,paperSubmissionDay DATE null,paperModifyDay DATE null,paperPDFFileName VARCHAR(2000) null,paperPDFSubmissionDay DATE null,paperPDFModifyDay DATE null,presentationName VARCHAR(2000) null,presentationFileName VARCHAR(2000) null,presentationSubmissionDay DATE null,presentationModifyDay DATE null,filepath TEXT null,childid LONG)";
	public static final String TABLE_SQL_DROP = "drop table edison_ChallengeTeam";
	public static final String ORDER_BY_JPQL = " ORDER BY challengeTeam.childid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY edison_ChallengeTeam.childid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edison.challenge.service.builder.model.ChallengeTeam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edison.challenge.service.builder.model.ChallengeTeam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edison.challenge.service.builder.model.ChallengeTeam"),
			true);
	public static long CHTEAMID_COLUMN_BITMASK = 1L;
	public static long CHILDID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ChallengeTeam toModel(ChallengeTeamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChallengeTeam model = new ChallengeTeamImpl();

		model.setChTeamid(soapModel.getChTeamid());
		model.setTeamName(soapModel.getTeamName());
		model.setSubject(soapModel.getSubject());
		model.setPaperPDFstatus(soapModel.getPaperPDFstatus());
		model.setPaperstatus(soapModel.getPaperstatus());
		model.setPresentationstatus(soapModel.getPresentationstatus());
		model.setRegisterDay(soapModel.getRegisterDay());
		model.setRegisterid(soapModel.getRegisterid());
		model.setPaperName(soapModel.getPaperName());
		model.setPaperAbstract(soapModel.getPaperAbstract());
		model.setPaperFileName(soapModel.getPaperFileName());
		model.setPaperSubmissionDay(soapModel.getPaperSubmissionDay());
		model.setPaperModifyDay(soapModel.getPaperModifyDay());
		model.setPaperPDFFileName(soapModel.getPaperPDFFileName());
		model.setPaperPDFSubmissionDay(soapModel.getPaperPDFSubmissionDay());
		model.setPaperPDFModifyDay(soapModel.getPaperPDFModifyDay());
		model.setPresentationName(soapModel.getPresentationName());
		model.setPresentationFileName(soapModel.getPresentationFileName());
		model.setPresentationSubmissionDay(soapModel.getPresentationSubmissionDay());
		model.setPresentationModifyDay(soapModel.getPresentationModifyDay());
		model.setFilepath(soapModel.getFilepath());
		model.setChildid(soapModel.getChildid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ChallengeTeam> toModels(ChallengeTeamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChallengeTeam> models = new ArrayList<ChallengeTeam>(soapModels.length);

		for (ChallengeTeamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edison.challenge.service.builder.model.ChallengeTeam"));

	public ChallengeTeamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _chTeamid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChTeamid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _chTeamid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChallengeTeam.class;
	}

	@Override
	public String getModelClassName() {
		return ChallengeTeam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("chTeamid", getChTeamid());
		attributes.put("teamName", getTeamName());
		attributes.put("subject", getSubject());
		attributes.put("paperPDFstatus", getPaperPDFstatus());
		attributes.put("paperstatus", getPaperstatus());
		attributes.put("presentationstatus", getPresentationstatus());
		attributes.put("registerDay", getRegisterDay());
		attributes.put("registerid", getRegisterid());
		attributes.put("paperName", getPaperName());
		attributes.put("paperAbstract", getPaperAbstract());
		attributes.put("paperFileName", getPaperFileName());
		attributes.put("paperSubmissionDay", getPaperSubmissionDay());
		attributes.put("paperModifyDay", getPaperModifyDay());
		attributes.put("paperPDFFileName", getPaperPDFFileName());
		attributes.put("paperPDFSubmissionDay", getPaperPDFSubmissionDay());
		attributes.put("paperPDFModifyDay", getPaperPDFModifyDay());
		attributes.put("presentationName", getPresentationName());
		attributes.put("presentationFileName", getPresentationFileName());
		attributes.put("presentationSubmissionDay",
			getPresentationSubmissionDay());
		attributes.put("presentationModifyDay", getPresentationModifyDay());
		attributes.put("filepath", getFilepath());
		attributes.put("childid", getChildid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long chTeamid = (Long)attributes.get("chTeamid");

		if (chTeamid != null) {
			setChTeamid(chTeamid);
		}

		String teamName = (String)attributes.get("teamName");

		if (teamName != null) {
			setTeamName(teamName);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		Boolean paperPDFstatus = (Boolean)attributes.get("paperPDFstatus");

		if (paperPDFstatus != null) {
			setPaperPDFstatus(paperPDFstatus);
		}

		Boolean paperstatus = (Boolean)attributes.get("paperstatus");

		if (paperstatus != null) {
			setPaperstatus(paperstatus);
		}

		Boolean presentationstatus = (Boolean)attributes.get(
				"presentationstatus");

		if (presentationstatus != null) {
			setPresentationstatus(presentationstatus);
		}

		Date registerDay = (Date)attributes.get("registerDay");

		if (registerDay != null) {
			setRegisterDay(registerDay);
		}

		String registerid = (String)attributes.get("registerid");

		if (registerid != null) {
			setRegisterid(registerid);
		}

		String paperName = (String)attributes.get("paperName");

		if (paperName != null) {
			setPaperName(paperName);
		}

		String paperAbstract = (String)attributes.get("paperAbstract");

		if (paperAbstract != null) {
			setPaperAbstract(paperAbstract);
		}

		String paperFileName = (String)attributes.get("paperFileName");

		if (paperFileName != null) {
			setPaperFileName(paperFileName);
		}

		Date paperSubmissionDay = (Date)attributes.get("paperSubmissionDay");

		if (paperSubmissionDay != null) {
			setPaperSubmissionDay(paperSubmissionDay);
		}

		Date paperModifyDay = (Date)attributes.get("paperModifyDay");

		if (paperModifyDay != null) {
			setPaperModifyDay(paperModifyDay);
		}

		String paperPDFFileName = (String)attributes.get("paperPDFFileName");

		if (paperPDFFileName != null) {
			setPaperPDFFileName(paperPDFFileName);
		}

		Date paperPDFSubmissionDay = (Date)attributes.get(
				"paperPDFSubmissionDay");

		if (paperPDFSubmissionDay != null) {
			setPaperPDFSubmissionDay(paperPDFSubmissionDay);
		}

		Date paperPDFModifyDay = (Date)attributes.get("paperPDFModifyDay");

		if (paperPDFModifyDay != null) {
			setPaperPDFModifyDay(paperPDFModifyDay);
		}

		String presentationName = (String)attributes.get("presentationName");

		if (presentationName != null) {
			setPresentationName(presentationName);
		}

		String presentationFileName = (String)attributes.get(
				"presentationFileName");

		if (presentationFileName != null) {
			setPresentationFileName(presentationFileName);
		}

		Date presentationSubmissionDay = (Date)attributes.get(
				"presentationSubmissionDay");

		if (presentationSubmissionDay != null) {
			setPresentationSubmissionDay(presentationSubmissionDay);
		}

		Date presentationModifyDay = (Date)attributes.get(
				"presentationModifyDay");

		if (presentationModifyDay != null) {
			setPresentationModifyDay(presentationModifyDay);
		}

		String filepath = (String)attributes.get("filepath");

		if (filepath != null) {
			setFilepath(filepath);
		}

		Long childid = (Long)attributes.get("childid");

		if (childid != null) {
			setChildid(childid);
		}
	}

	@JSON
	@Override
	public long getChTeamid() {
		return _chTeamid;
	}

	@Override
	public void setChTeamid(long chTeamid) {
		_columnBitmask |= CHTEAMID_COLUMN_BITMASK;

		if (!_setOriginalChTeamid) {
			_setOriginalChTeamid = true;

			_originalChTeamid = _chTeamid;
		}

		_chTeamid = chTeamid;
	}

	public long getOriginalChTeamid() {
		return _originalChTeamid;
	}

	@JSON
	@Override
	public String getTeamName() {
		if (_teamName == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamName;
		}
	}

	@Override
	public String getTeamName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTeamName(languageId);
	}

	@Override
	public String getTeamName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTeamName(languageId, useDefault);
	}

	@Override
	public String getTeamName(String languageId) {
		return LocalizationUtil.getLocalization(getTeamName(), languageId);
	}

	@Override
	public String getTeamName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTeamName(), languageId,
			useDefault);
	}

	@Override
	public String getTeamNameCurrentLanguageId() {
		return _teamNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTeamNameCurrentValue() {
		Locale locale = getLocale(_teamNameCurrentLanguageId);

		return getTeamName(locale);
	}

	@Override
	public Map<Locale, String> getTeamNameMap() {
		return LocalizationUtil.getLocalizationMap(getTeamName());
	}

	@Override
	public void setTeamName(String teamName) {
		_teamName = teamName;
	}

	@Override
	public void setTeamName(String teamName, Locale locale) {
		setTeamName(teamName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTeamName(String teamName, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(teamName)) {
			setTeamName(LocalizationUtil.updateLocalization(getTeamName(),
					"TeamName", teamName, languageId, defaultLanguageId));
		}
		else {
			setTeamName(LocalizationUtil.removeLocalization(getTeamName(),
					"TeamName", languageId));
		}
	}

	@Override
	public void setTeamNameCurrentLanguageId(String languageId) {
		_teamNameCurrentLanguageId = languageId;
	}

	@Override
	public void setTeamNameMap(Map<Locale, String> teamNameMap) {
		setTeamNameMap(teamNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTeamNameMap(Map<Locale, String> teamNameMap,
		Locale defaultLocale) {
		if (teamNameMap == null) {
			return;
		}

		setTeamName(LocalizationUtil.updateLocalization(teamNameMap,
				getTeamName(), "TeamName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public String getSubject(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubject(languageId);
	}

	@Override
	public String getSubject(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubject(languageId, useDefault);
	}

	@Override
	public String getSubject(String languageId) {
		return LocalizationUtil.getLocalization(getSubject(), languageId);
	}

	@Override
	public String getSubject(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSubject(), languageId,
			useDefault);
	}

	@Override
	public String getSubjectCurrentLanguageId() {
		return _subjectCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubjectCurrentValue() {
		Locale locale = getLocale(_subjectCurrentLanguageId);

		return getSubject(locale);
	}

	@Override
	public Map<Locale, String> getSubjectMap() {
		return LocalizationUtil.getLocalizationMap(getSubject());
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public void setSubject(String subject, Locale locale) {
		setSubject(subject, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSubject(String subject, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subject)) {
			setSubject(LocalizationUtil.updateLocalization(getSubject(),
					"Subject", subject, languageId, defaultLanguageId));
		}
		else {
			setSubject(LocalizationUtil.removeLocalization(getSubject(),
					"Subject", languageId));
		}
	}

	@Override
	public void setSubjectCurrentLanguageId(String languageId) {
		_subjectCurrentLanguageId = languageId;
	}

	@Override
	public void setSubjectMap(Map<Locale, String> subjectMap) {
		setSubjectMap(subjectMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSubjectMap(Map<Locale, String> subjectMap,
		Locale defaultLocale) {
		if (subjectMap == null) {
			return;
		}

		setSubject(LocalizationUtil.updateLocalization(subjectMap,
				getSubject(), "Subject", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getPaperPDFstatus() {
		return _paperPDFstatus;
	}

	@Override
	public boolean isPaperPDFstatus() {
		return _paperPDFstatus;
	}

	@Override
	public void setPaperPDFstatus(boolean paperPDFstatus) {
		_paperPDFstatus = paperPDFstatus;
	}

	@JSON
	@Override
	public boolean getPaperstatus() {
		return _paperstatus;
	}

	@Override
	public boolean isPaperstatus() {
		return _paperstatus;
	}

	@Override
	public void setPaperstatus(boolean paperstatus) {
		_paperstatus = paperstatus;
	}

	@JSON
	@Override
	public boolean getPresentationstatus() {
		return _presentationstatus;
	}

	@Override
	public boolean isPresentationstatus() {
		return _presentationstatus;
	}

	@Override
	public void setPresentationstatus(boolean presentationstatus) {
		_presentationstatus = presentationstatus;
	}

	@JSON
	@Override
	public Date getRegisterDay() {
		return _registerDay;
	}

	@Override
	public void setRegisterDay(Date registerDay) {
		_registerDay = registerDay;
	}

	@JSON
	@Override
	public String getRegisterid() {
		if (_registerid == null) {
			return StringPool.BLANK;
		}
		else {
			return _registerid;
		}
	}

	@Override
	public void setRegisterid(String registerid) {
		_registerid = registerid;
	}

	@JSON
	@Override
	public String getPaperName() {
		if (_paperName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperName;
		}
	}

	@Override
	public String getPaperName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperName(languageId);
	}

	@Override
	public String getPaperName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperName(languageId, useDefault);
	}

	@Override
	public String getPaperName(String languageId) {
		return LocalizationUtil.getLocalization(getPaperName(), languageId);
	}

	@Override
	public String getPaperName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPaperName(), languageId,
			useDefault);
	}

	@Override
	public String getPaperNameCurrentLanguageId() {
		return _paperNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPaperNameCurrentValue() {
		Locale locale = getLocale(_paperNameCurrentLanguageId);

		return getPaperName(locale);
	}

	@Override
	public Map<Locale, String> getPaperNameMap() {
		return LocalizationUtil.getLocalizationMap(getPaperName());
	}

	@Override
	public void setPaperName(String paperName) {
		_paperName = paperName;
	}

	@Override
	public void setPaperName(String paperName, Locale locale) {
		setPaperName(paperName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setPaperName(String paperName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(paperName)) {
			setPaperName(LocalizationUtil.updateLocalization(getPaperName(),
					"PaperName", paperName, languageId, defaultLanguageId));
		}
		else {
			setPaperName(LocalizationUtil.removeLocalization(getPaperName(),
					"PaperName", languageId));
		}
	}

	@Override
	public void setPaperNameCurrentLanguageId(String languageId) {
		_paperNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPaperNameMap(Map<Locale, String> paperNameMap) {
		setPaperNameMap(paperNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setPaperNameMap(Map<Locale, String> paperNameMap,
		Locale defaultLocale) {
		if (paperNameMap == null) {
			return;
		}

		setPaperName(LocalizationUtil.updateLocalization(paperNameMap,
				getPaperName(), "PaperName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaperAbstract() {
		if (_paperAbstract == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperAbstract;
		}
	}

	@Override
	public String getPaperAbstract(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperAbstract(languageId);
	}

	@Override
	public String getPaperAbstract(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaperAbstract(languageId, useDefault);
	}

	@Override
	public String getPaperAbstract(String languageId) {
		return LocalizationUtil.getLocalization(getPaperAbstract(), languageId);
	}

	@Override
	public String getPaperAbstract(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPaperAbstract(), languageId,
			useDefault);
	}

	@Override
	public String getPaperAbstractCurrentLanguageId() {
		return _paperAbstractCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPaperAbstractCurrentValue() {
		Locale locale = getLocale(_paperAbstractCurrentLanguageId);

		return getPaperAbstract(locale);
	}

	@Override
	public Map<Locale, String> getPaperAbstractMap() {
		return LocalizationUtil.getLocalizationMap(getPaperAbstract());
	}

	@Override
	public void setPaperAbstract(String paperAbstract) {
		_paperAbstract = paperAbstract;
	}

	@Override
	public void setPaperAbstract(String paperAbstract, Locale locale) {
		setPaperAbstract(paperAbstract, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setPaperAbstract(String paperAbstract, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(paperAbstract)) {
			setPaperAbstract(LocalizationUtil.updateLocalization(
					getPaperAbstract(), "PaperAbstract", paperAbstract,
					languageId, defaultLanguageId));
		}
		else {
			setPaperAbstract(LocalizationUtil.removeLocalization(
					getPaperAbstract(), "PaperAbstract", languageId));
		}
	}

	@Override
	public void setPaperAbstractCurrentLanguageId(String languageId) {
		_paperAbstractCurrentLanguageId = languageId;
	}

	@Override
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap) {
		setPaperAbstractMap(paperAbstractMap, LocaleUtil.getDefault());
	}

	@Override
	public void setPaperAbstractMap(Map<Locale, String> paperAbstractMap,
		Locale defaultLocale) {
		if (paperAbstractMap == null) {
			return;
		}

		setPaperAbstract(LocalizationUtil.updateLocalization(paperAbstractMap,
				getPaperAbstract(), "PaperAbstract",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaperFileName() {
		if (_paperFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperFileName;
		}
	}

	@Override
	public void setPaperFileName(String paperFileName) {
		_paperFileName = paperFileName;
	}

	@JSON
	@Override
	public Date getPaperSubmissionDay() {
		return _paperSubmissionDay;
	}

	@Override
	public void setPaperSubmissionDay(Date paperSubmissionDay) {
		_paperSubmissionDay = paperSubmissionDay;
	}

	@JSON
	@Override
	public Date getPaperModifyDay() {
		return _paperModifyDay;
	}

	@Override
	public void setPaperModifyDay(Date paperModifyDay) {
		_paperModifyDay = paperModifyDay;
	}

	@JSON
	@Override
	public String getPaperPDFFileName() {
		if (_paperPDFFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperPDFFileName;
		}
	}

	@Override
	public void setPaperPDFFileName(String paperPDFFileName) {
		_paperPDFFileName = paperPDFFileName;
	}

	@JSON
	@Override
	public Date getPaperPDFSubmissionDay() {
		return _paperPDFSubmissionDay;
	}

	@Override
	public void setPaperPDFSubmissionDay(Date paperPDFSubmissionDay) {
		_paperPDFSubmissionDay = paperPDFSubmissionDay;
	}

	@JSON
	@Override
	public Date getPaperPDFModifyDay() {
		return _paperPDFModifyDay;
	}

	@Override
	public void setPaperPDFModifyDay(Date paperPDFModifyDay) {
		_paperPDFModifyDay = paperPDFModifyDay;
	}

	@JSON
	@Override
	public String getPresentationName() {
		if (_presentationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _presentationName;
		}
	}

	@Override
	public void setPresentationName(String presentationName) {
		_presentationName = presentationName;
	}

	@JSON
	@Override
	public String getPresentationFileName() {
		if (_presentationFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _presentationFileName;
		}
	}

	@Override
	public void setPresentationFileName(String presentationFileName) {
		_presentationFileName = presentationFileName;
	}

	@JSON
	@Override
	public Date getPresentationSubmissionDay() {
		return _presentationSubmissionDay;
	}

	@Override
	public void setPresentationSubmissionDay(Date presentationSubmissionDay) {
		_presentationSubmissionDay = presentationSubmissionDay;
	}

	@JSON
	@Override
	public Date getPresentationModifyDay() {
		return _presentationModifyDay;
	}

	@Override
	public void setPresentationModifyDay(Date presentationModifyDay) {
		_presentationModifyDay = presentationModifyDay;
	}

	@JSON
	@Override
	public String getFilepath() {
		if (_filepath == null) {
			return StringPool.BLANK;
		}
		else {
			return _filepath;
		}
	}

	@Override
	public void setFilepath(String filepath) {
		_filepath = filepath;
	}

	@JSON
	@Override
	public long getChildid() {
		return _childid;
	}

	@Override
	public void setChildid(long childid) {
		_columnBitmask = -1L;

		if (!_setOriginalChildid) {
			_setOriginalChildid = true;

			_originalChildid = _childid;
		}

		_childid = childid;
	}

	public long getOriginalChildid() {
		return _originalChildid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ChallengeTeam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> teamNameMap = getTeamNameMap();

		for (Map.Entry<Locale, String> entry : teamNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subjectMap = getSubjectMap();

		for (Map.Entry<Locale, String> entry : subjectMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> paperNameMap = getPaperNameMap();

		for (Map.Entry<Locale, String> entry : paperNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> paperAbstractMap = getPaperAbstractMap();

		for (Map.Entry<Locale, String> entry : paperAbstractMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTeamName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String teamName = getTeamName(defaultLocale);

		if (Validator.isNull(teamName)) {
			setTeamName(getTeamName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTeamName(getTeamName(defaultLocale), defaultLocale, defaultLocale);
		}

		String subject = getSubject(defaultLocale);

		if (Validator.isNull(subject)) {
			setSubject(getSubject(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubject(getSubject(defaultLocale), defaultLocale, defaultLocale);
		}

		String paperName = getPaperName(defaultLocale);

		if (Validator.isNull(paperName)) {
			setPaperName(getPaperName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPaperName(getPaperName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String paperAbstract = getPaperAbstract(defaultLocale);

		if (Validator.isNull(paperAbstract)) {
			setPaperAbstract(getPaperAbstract(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setPaperAbstract(getPaperAbstract(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ChallengeTeam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChallengeTeam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChallengeTeamImpl challengeTeamImpl = new ChallengeTeamImpl();

		challengeTeamImpl.setChTeamid(getChTeamid());
		challengeTeamImpl.setTeamName(getTeamName());
		challengeTeamImpl.setSubject(getSubject());
		challengeTeamImpl.setPaperPDFstatus(getPaperPDFstatus());
		challengeTeamImpl.setPaperstatus(getPaperstatus());
		challengeTeamImpl.setPresentationstatus(getPresentationstatus());
		challengeTeamImpl.setRegisterDay(getRegisterDay());
		challengeTeamImpl.setRegisterid(getRegisterid());
		challengeTeamImpl.setPaperName(getPaperName());
		challengeTeamImpl.setPaperAbstract(getPaperAbstract());
		challengeTeamImpl.setPaperFileName(getPaperFileName());
		challengeTeamImpl.setPaperSubmissionDay(getPaperSubmissionDay());
		challengeTeamImpl.setPaperModifyDay(getPaperModifyDay());
		challengeTeamImpl.setPaperPDFFileName(getPaperPDFFileName());
		challengeTeamImpl.setPaperPDFSubmissionDay(getPaperPDFSubmissionDay());
		challengeTeamImpl.setPaperPDFModifyDay(getPaperPDFModifyDay());
		challengeTeamImpl.setPresentationName(getPresentationName());
		challengeTeamImpl.setPresentationFileName(getPresentationFileName());
		challengeTeamImpl.setPresentationSubmissionDay(getPresentationSubmissionDay());
		challengeTeamImpl.setPresentationModifyDay(getPresentationModifyDay());
		challengeTeamImpl.setFilepath(getFilepath());
		challengeTeamImpl.setChildid(getChildid());

		challengeTeamImpl.resetOriginalValues();

		return challengeTeamImpl;
	}

	@Override
	public int compareTo(ChallengeTeam challengeTeam) {
		int value = 0;

		if (getChildid() < challengeTeam.getChildid()) {
			value = -1;
		}
		else if (getChildid() > challengeTeam.getChildid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChallengeTeam)) {
			return false;
		}

		ChallengeTeam challengeTeam = (ChallengeTeam)obj;

		long primaryKey = challengeTeam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ChallengeTeamModelImpl challengeTeamModelImpl = this;

		challengeTeamModelImpl._originalChTeamid = challengeTeamModelImpl._chTeamid;

		challengeTeamModelImpl._setOriginalChTeamid = false;

		challengeTeamModelImpl._originalChildid = challengeTeamModelImpl._childid;

		challengeTeamModelImpl._setOriginalChildid = false;

		challengeTeamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChallengeTeam> toCacheModel() {
		ChallengeTeamCacheModel challengeTeamCacheModel = new ChallengeTeamCacheModel();

		challengeTeamCacheModel.chTeamid = getChTeamid();

		challengeTeamCacheModel.teamName = getTeamName();

		String teamName = challengeTeamCacheModel.teamName;

		if ((teamName != null) && (teamName.length() == 0)) {
			challengeTeamCacheModel.teamName = null;
		}

		challengeTeamCacheModel.subject = getSubject();

		String subject = challengeTeamCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			challengeTeamCacheModel.subject = null;
		}

		challengeTeamCacheModel.paperPDFstatus = getPaperPDFstatus();

		challengeTeamCacheModel.paperstatus = getPaperstatus();

		challengeTeamCacheModel.presentationstatus = getPresentationstatus();

		Date registerDay = getRegisterDay();

		if (registerDay != null) {
			challengeTeamCacheModel.registerDay = registerDay.getTime();
		}
		else {
			challengeTeamCacheModel.registerDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.registerid = getRegisterid();

		String registerid = challengeTeamCacheModel.registerid;

		if ((registerid != null) && (registerid.length() == 0)) {
			challengeTeamCacheModel.registerid = null;
		}

		challengeTeamCacheModel.paperName = getPaperName();

		String paperName = challengeTeamCacheModel.paperName;

		if ((paperName != null) && (paperName.length() == 0)) {
			challengeTeamCacheModel.paperName = null;
		}

		challengeTeamCacheModel.paperAbstract = getPaperAbstract();

		String paperAbstract = challengeTeamCacheModel.paperAbstract;

		if ((paperAbstract != null) && (paperAbstract.length() == 0)) {
			challengeTeamCacheModel.paperAbstract = null;
		}

		challengeTeamCacheModel.paperFileName = getPaperFileName();

		String paperFileName = challengeTeamCacheModel.paperFileName;

		if ((paperFileName != null) && (paperFileName.length() == 0)) {
			challengeTeamCacheModel.paperFileName = null;
		}

		Date paperSubmissionDay = getPaperSubmissionDay();

		if (paperSubmissionDay != null) {
			challengeTeamCacheModel.paperSubmissionDay = paperSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperSubmissionDay = Long.MIN_VALUE;
		}

		Date paperModifyDay = getPaperModifyDay();

		if (paperModifyDay != null) {
			challengeTeamCacheModel.paperModifyDay = paperModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.paperPDFFileName = getPaperPDFFileName();

		String paperPDFFileName = challengeTeamCacheModel.paperPDFFileName;

		if ((paperPDFFileName != null) && (paperPDFFileName.length() == 0)) {
			challengeTeamCacheModel.paperPDFFileName = null;
		}

		Date paperPDFSubmissionDay = getPaperPDFSubmissionDay();

		if (paperPDFSubmissionDay != null) {
			challengeTeamCacheModel.paperPDFSubmissionDay = paperPDFSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperPDFSubmissionDay = Long.MIN_VALUE;
		}

		Date paperPDFModifyDay = getPaperPDFModifyDay();

		if (paperPDFModifyDay != null) {
			challengeTeamCacheModel.paperPDFModifyDay = paperPDFModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.paperPDFModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.presentationName = getPresentationName();

		String presentationName = challengeTeamCacheModel.presentationName;

		if ((presentationName != null) && (presentationName.length() == 0)) {
			challengeTeamCacheModel.presentationName = null;
		}

		challengeTeamCacheModel.presentationFileName = getPresentationFileName();

		String presentationFileName = challengeTeamCacheModel.presentationFileName;

		if ((presentationFileName != null) &&
				(presentationFileName.length() == 0)) {
			challengeTeamCacheModel.presentationFileName = null;
		}

		Date presentationSubmissionDay = getPresentationSubmissionDay();

		if (presentationSubmissionDay != null) {
			challengeTeamCacheModel.presentationSubmissionDay = presentationSubmissionDay.getTime();
		}
		else {
			challengeTeamCacheModel.presentationSubmissionDay = Long.MIN_VALUE;
		}

		Date presentationModifyDay = getPresentationModifyDay();

		if (presentationModifyDay != null) {
			challengeTeamCacheModel.presentationModifyDay = presentationModifyDay.getTime();
		}
		else {
			challengeTeamCacheModel.presentationModifyDay = Long.MIN_VALUE;
		}

		challengeTeamCacheModel.filepath = getFilepath();

		String filepath = challengeTeamCacheModel.filepath;

		if ((filepath != null) && (filepath.length() == 0)) {
			challengeTeamCacheModel.filepath = null;
		}

		challengeTeamCacheModel.childid = getChildid();

		return challengeTeamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{chTeamid=");
		sb.append(getChTeamid());
		sb.append(", teamName=");
		sb.append(getTeamName());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", paperPDFstatus=");
		sb.append(getPaperPDFstatus());
		sb.append(", paperstatus=");
		sb.append(getPaperstatus());
		sb.append(", presentationstatus=");
		sb.append(getPresentationstatus());
		sb.append(", registerDay=");
		sb.append(getRegisterDay());
		sb.append(", registerid=");
		sb.append(getRegisterid());
		sb.append(", paperName=");
		sb.append(getPaperName());
		sb.append(", paperAbstract=");
		sb.append(getPaperAbstract());
		sb.append(", paperFileName=");
		sb.append(getPaperFileName());
		sb.append(", paperSubmissionDay=");
		sb.append(getPaperSubmissionDay());
		sb.append(", paperModifyDay=");
		sb.append(getPaperModifyDay());
		sb.append(", paperPDFFileName=");
		sb.append(getPaperPDFFileName());
		sb.append(", paperPDFSubmissionDay=");
		sb.append(getPaperPDFSubmissionDay());
		sb.append(", paperPDFModifyDay=");
		sb.append(getPaperPDFModifyDay());
		sb.append(", presentationName=");
		sb.append(getPresentationName());
		sb.append(", presentationFileName=");
		sb.append(getPresentationFileName());
		sb.append(", presentationSubmissionDay=");
		sb.append(getPresentationSubmissionDay());
		sb.append(", presentationModifyDay=");
		sb.append(getPresentationModifyDay());
		sb.append(", filepath=");
		sb.append(getFilepath());
		sb.append(", childid=");
		sb.append(getChildid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("edison.challenge.service.builder.model.ChallengeTeam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>chTeamid</column-name><column-value><![CDATA[");
		sb.append(getChTeamid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamName</column-name><column-value><![CDATA[");
		sb.append(getTeamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFstatus</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFstatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperstatus</column-name><column-value><![CDATA[");
		sb.append(getPaperstatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationstatus</column-name><column-value><![CDATA[");
		sb.append(getPresentationstatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerDay</column-name><column-value><![CDATA[");
		sb.append(getRegisterDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerid</column-name><column-value><![CDATA[");
		sb.append(getRegisterid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperName</column-name><column-value><![CDATA[");
		sb.append(getPaperName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperAbstract</column-name><column-value><![CDATA[");
		sb.append(getPaperAbstract());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperFileName</column-name><column-value><![CDATA[");
		sb.append(getPaperFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPaperSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPaperModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFFileName</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperPDFModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPaperPDFModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationName</column-name><column-value><![CDATA[");
		sb.append(getPresentationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationFileName</column-name><column-value><![CDATA[");
		sb.append(getPresentationFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationSubmissionDay</column-name><column-value><![CDATA[");
		sb.append(getPresentationSubmissionDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>presentationModifyDay</column-name><column-value><![CDATA[");
		sb.append(getPresentationModifyDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filepath</column-name><column-value><![CDATA[");
		sb.append(getFilepath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>childid</column-name><column-value><![CDATA[");
		sb.append(getChildid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ChallengeTeam.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ChallengeTeam.class
		};
	private long _chTeamid;
	private long _originalChTeamid;
	private boolean _setOriginalChTeamid;
	private String _teamName;
	private String _teamNameCurrentLanguageId;
	private String _subject;
	private String _subjectCurrentLanguageId;
	private boolean _paperPDFstatus;
	private boolean _paperstatus;
	private boolean _presentationstatus;
	private Date _registerDay;
	private String _registerid;
	private String _paperName;
	private String _paperNameCurrentLanguageId;
	private String _paperAbstract;
	private String _paperAbstractCurrentLanguageId;
	private String _paperFileName;
	private Date _paperSubmissionDay;
	private Date _paperModifyDay;
	private String _paperPDFFileName;
	private Date _paperPDFSubmissionDay;
	private Date _paperPDFModifyDay;
	private String _presentationName;
	private String _presentationFileName;
	private Date _presentationSubmissionDay;
	private Date _presentationModifyDay;
	private String _filepath;
	private long _childid;
	private long _originalChildid;
	private boolean _setOriginalChildid;
	private long _columnBitmask;
	private ChallengeTeam _escapedModel;
}