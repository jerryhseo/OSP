/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.model.RequestMember;
import org.kisti.edison.model.RequestMemberModel;
import org.kisti.edison.model.RequestMemberSoap;
import org.kisti.edison.service.persistence.RequestMemberPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RequestMember service. Represents a row in the &quot;EDSIMPRO_RequestMember&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.model.RequestMemberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequestMemberImpl}.
 * </p>
 *
 * @author edison
 * @see RequestMemberImpl
 * @see org.kisti.edison.model.RequestMember
 * @see org.kisti.edison.model.RequestMemberModel
 * @generated
 */
@JSON(strict = true)
public class RequestMemberModelImpl extends BaseModelImpl<RequestMember>
	implements RequestMemberModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a request member model instance should use the {@link org.kisti.edison.model.RequestMember} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIMPRO_RequestMember";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requestSeq", Types.BIGINT },
			{ "simulationProjectId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "requestDate", Types.TIMESTAMP },
			{ "processDate", Types.TIMESTAMP },
			{ "requestState", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIMPRO_RequestMember (requestSeq LONG not null,simulationProjectId LONG not null,userId LONG,requestDate DATE null,processDate DATE null,requestState VARCHAR(75) null,primary key (requestSeq, simulationProjectId))";
	public static final String TABLE_SQL_DROP = "drop table EDSIMPRO_RequestMember";
	public static final String ORDER_BY_JPQL = " ORDER BY requestMember.id.requestSeq ASC, requestMember.id.simulationProjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIMPRO_RequestMember.requestSeq ASC, EDSIMPRO_RequestMember.simulationProjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.model.RequestMember"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.model.RequestMember"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.model.RequestMember"),
			true);
	public static long SIMULATIONPROJECTID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long REQUESTSEQ_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RequestMember toModel(RequestMemberSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RequestMember model = new RequestMemberImpl();

		model.setRequestSeq(soapModel.getRequestSeq());
		model.setSimulationProjectId(soapModel.getSimulationProjectId());
		model.setUserId(soapModel.getUserId());
		model.setRequestDate(soapModel.getRequestDate());
		model.setProcessDate(soapModel.getProcessDate());
		model.setRequestState(soapModel.getRequestState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RequestMember> toModels(RequestMemberSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RequestMember> models = new ArrayList<RequestMember>(soapModels.length);

		for (RequestMemberSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.model.RequestMember"));

	public RequestMemberModelImpl() {
	}

	@Override
	public RequestMemberPK getPrimaryKey() {
		return new RequestMemberPK(_requestSeq, _simulationProjectId);
	}

	@Override
	public void setPrimaryKey(RequestMemberPK primaryKey) {
		setRequestSeq(primaryKey.requestSeq);
		setSimulationProjectId(primaryKey.simulationProjectId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new RequestMemberPK(_requestSeq, _simulationProjectId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((RequestMemberPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return RequestMember.class;
	}

	@Override
	public String getModelClassName() {
		return RequestMember.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requestSeq", getRequestSeq());
		attributes.put("simulationProjectId", getSimulationProjectId());
		attributes.put("userId", getUserId());
		attributes.put("requestDate", getRequestDate());
		attributes.put("processDate", getProcessDate());
		attributes.put("requestState", getRequestState());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requestSeq = (Long)attributes.get("requestSeq");

		if (requestSeq != null) {
			setRequestSeq(requestSeq);
		}

		Long simulationProjectId = (Long)attributes.get("simulationProjectId");

		if (simulationProjectId != null) {
			setSimulationProjectId(simulationProjectId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date requestDate = (Date)attributes.get("requestDate");

		if (requestDate != null) {
			setRequestDate(requestDate);
		}

		Date processDate = (Date)attributes.get("processDate");

		if (processDate != null) {
			setProcessDate(processDate);
		}

		String requestState = (String)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}
	}

	@JSON
	@Override
	public long getRequestSeq() {
		return _requestSeq;
	}

	@Override
	public void setRequestSeq(long requestSeq) {
		_requestSeq = requestSeq;
	}

	@JSON
	@Override
	public long getSimulationProjectId() {
		return _simulationProjectId;
	}

	@Override
	public void setSimulationProjectId(long simulationProjectId) {
		_columnBitmask |= SIMULATIONPROJECTID_COLUMN_BITMASK;

		if (!_setOriginalSimulationProjectId) {
			_setOriginalSimulationProjectId = true;

			_originalSimulationProjectId = _simulationProjectId;
		}

		_simulationProjectId = simulationProjectId;
	}

	public long getOriginalSimulationProjectId() {
		return _originalSimulationProjectId;
	}

	@JSON
	@Override
	public Long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(Long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public Long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@JSON
	@Override
	public Date getProcessDate() {
		return _processDate;
	}

	@Override
	public void setProcessDate(Date processDate) {
		_processDate = processDate;
	}

	@JSON
	@Override
	public String getRequestState() {
		if (_requestState == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestState;
		}
	}

	@Override
	public void setRequestState(String requestState) {
		_requestState = requestState;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public RequestMember toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RequestMember)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RequestMemberImpl requestMemberImpl = new RequestMemberImpl();

		requestMemberImpl.setRequestSeq(getRequestSeq());
		requestMemberImpl.setSimulationProjectId(getSimulationProjectId());
		requestMemberImpl.setUserId(getUserId());
		requestMemberImpl.setRequestDate(getRequestDate());
		requestMemberImpl.setProcessDate(getProcessDate());
		requestMemberImpl.setRequestState(getRequestState());

		requestMemberImpl.resetOriginalValues();

		return requestMemberImpl;
	}

	@Override
	public int compareTo(RequestMember requestMember) {
		RequestMemberPK primaryKey = requestMember.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RequestMember)) {
			return false;
		}

		RequestMember requestMember = (RequestMember)obj;

		RequestMemberPK primaryKey = requestMember.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		RequestMemberModelImpl requestMemberModelImpl = this;

		requestMemberModelImpl._originalSimulationProjectId = requestMemberModelImpl._simulationProjectId;

		requestMemberModelImpl._setOriginalSimulationProjectId = false;

		requestMemberModelImpl._originalUserId = requestMemberModelImpl._userId;

		requestMemberModelImpl._setOriginalUserId = false;

		requestMemberModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RequestMember> toCacheModel() {
		RequestMemberCacheModel requestMemberCacheModel = new RequestMemberCacheModel();

		requestMemberCacheModel.requestSeq = getRequestSeq();

		requestMemberCacheModel.simulationProjectId = getSimulationProjectId();

		requestMemberCacheModel.userId = getUserId();

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			requestMemberCacheModel.requestDate = requestDate.getTime();
		}
		else {
			requestMemberCacheModel.requestDate = Long.MIN_VALUE;
		}

		Date processDate = getProcessDate();

		if (processDate != null) {
			requestMemberCacheModel.processDate = processDate.getTime();
		}
		else {
			requestMemberCacheModel.processDate = Long.MIN_VALUE;
		}

		requestMemberCacheModel.requestState = getRequestState();

		String requestState = requestMemberCacheModel.requestState;

		if ((requestState != null) && (requestState.length() == 0)) {
			requestMemberCacheModel.requestState = null;
		}

		return requestMemberCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{requestSeq=");
		sb.append(getRequestSeq());
		sb.append(", simulationProjectId=");
		sb.append(getSimulationProjectId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", requestDate=");
		sb.append(getRequestDate());
		sb.append(", processDate=");
		sb.append(getProcessDate());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.model.RequestMember");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requestSeq</column-name><column-value><![CDATA[");
		sb.append(getRequestSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationProjectId</column-name><column-value><![CDATA[");
		sb.append(getSimulationProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDate</column-name><column-value><![CDATA[");
		sb.append(getRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processDate</column-name><column-value><![CDATA[");
		sb.append(getProcessDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RequestMember.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RequestMember.class
		};
	private long _requestSeq;
	private long _simulationProjectId;
	private long _originalSimulationProjectId;
	private boolean _setOriginalSimulationProjectId;
	private Long _userId;
	private Long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _requestDate;
	private Date _processDate;
	private String _requestState;
	private long _columnBitmask;
	private RequestMember _escapedModel;
}