/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.model.SimProScienceAppLink;
import org.kisti.edison.service.SimProScienceAppLinkLocalService;
import org.kisti.edison.service.persistence.RequestMemberFinder;
import org.kisti.edison.service.persistence.RequestMemberPersistence;
import org.kisti.edison.service.persistence.SimProScienceAppLinkFinder;
import org.kisti.edison.service.persistence.SimProScienceAppLinkPK;
import org.kisti.edison.service.persistence.SimProScienceAppLinkPersistence;
import org.kisti.edison.service.persistence.SimulationProjectFinder;
import org.kisti.edison.service.persistence.SimulationProjectPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the sim pro science app link local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.service.impl.SimProScienceAppLinkLocalServiceImpl}.
 * </p>
 *
 * @author edison
 * @see org.kisti.edison.service.impl.SimProScienceAppLinkLocalServiceImpl
 * @see org.kisti.edison.service.SimProScienceAppLinkLocalServiceUtil
 * @generated
 */
public abstract class SimProScienceAppLinkLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SimProScienceAppLinkLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.service.SimProScienceAppLinkLocalServiceUtil} to access the sim pro science app link local service.
	 */

	/**
	 * Adds the sim pro science app link to the database. Also notifies the appropriate model listeners.
	 *
	 * @param simProScienceAppLink the sim pro science app link
	 * @return the sim pro science app link that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SimProScienceAppLink addSimProScienceAppLink(
		SimProScienceAppLink simProScienceAppLink) throws SystemException {
		simProScienceAppLink.setNew(true);

		return simProScienceAppLinkPersistence.update(simProScienceAppLink);
	}

	/**
	 * Creates a new sim pro science app link with the primary key. Does not add the sim pro science app link to the database.
	 *
	 * @param simProScienceAppLinkPK the primary key for the new sim pro science app link
	 * @return the new sim pro science app link
	 */
	@Override
	public SimProScienceAppLink createSimProScienceAppLink(
		SimProScienceAppLinkPK simProScienceAppLinkPK) {
		return simProScienceAppLinkPersistence.create(simProScienceAppLinkPK);
	}

	/**
	 * Deletes the sim pro science app link with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param simProScienceAppLinkPK the primary key of the sim pro science app link
	 * @return the sim pro science app link that was removed
	 * @throws PortalException if a sim pro science app link with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SimProScienceAppLink deleteSimProScienceAppLink(
		SimProScienceAppLinkPK simProScienceAppLinkPK)
		throws PortalException, SystemException {
		return simProScienceAppLinkPersistence.remove(simProScienceAppLinkPK);
	}

	/**
	 * Deletes the sim pro science app link from the database. Also notifies the appropriate model listeners.
	 *
	 * @param simProScienceAppLink the sim pro science app link
	 * @return the sim pro science app link that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SimProScienceAppLink deleteSimProScienceAppLink(
		SimProScienceAppLink simProScienceAppLink) throws SystemException {
		return simProScienceAppLinkPersistence.remove(simProScienceAppLink);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SimProScienceAppLink.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return simProScienceAppLinkPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.SimProScienceAppLinkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return simProScienceAppLinkPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.SimProScienceAppLinkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return simProScienceAppLinkPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return simProScienceAppLinkPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return simProScienceAppLinkPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SimProScienceAppLink fetchSimProScienceAppLink(
		SimProScienceAppLinkPK simProScienceAppLinkPK)
		throws SystemException {
		return simProScienceAppLinkPersistence.fetchByPrimaryKey(simProScienceAppLinkPK);
	}

	/**
	 * Returns the sim pro science app link with the primary key.
	 *
	 * @param simProScienceAppLinkPK the primary key of the sim pro science app link
	 * @return the sim pro science app link
	 * @throws PortalException if a sim pro science app link with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SimProScienceAppLink getSimProScienceAppLink(
		SimProScienceAppLinkPK simProScienceAppLinkPK)
		throws PortalException, SystemException {
		return simProScienceAppLinkPersistence.findByPrimaryKey(simProScienceAppLinkPK);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return simProScienceAppLinkPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the sim pro science app links.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.model.impl.SimProScienceAppLinkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of sim pro science app links
	 * @param end the upper bound of the range of sim pro science app links (not inclusive)
	 * @return the range of sim pro science app links
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SimProScienceAppLink> getSimProScienceAppLinks(int start,
		int end) throws SystemException {
		return simProScienceAppLinkPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of sim pro science app links.
	 *
	 * @return the number of sim pro science app links
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSimProScienceAppLinksCount() throws SystemException {
		return simProScienceAppLinkPersistence.countAll();
	}

	/**
	 * Updates the sim pro science app link in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param simProScienceAppLink the sim pro science app link
	 * @return the sim pro science app link that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SimProScienceAppLink updateSimProScienceAppLink(
		SimProScienceAppLink simProScienceAppLink) throws SystemException {
		return simProScienceAppLinkPersistence.update(simProScienceAppLink);
	}

	/**
	 * Returns the request member local service.
	 *
	 * @return the request member local service
	 */
	public org.kisti.edison.service.RequestMemberLocalService getRequestMemberLocalService() {
		return requestMemberLocalService;
	}

	/**
	 * Sets the request member local service.
	 *
	 * @param requestMemberLocalService the request member local service
	 */
	public void setRequestMemberLocalService(
		org.kisti.edison.service.RequestMemberLocalService requestMemberLocalService) {
		this.requestMemberLocalService = requestMemberLocalService;
	}

	/**
	 * Returns the request member remote service.
	 *
	 * @return the request member remote service
	 */
	public org.kisti.edison.service.RequestMemberService getRequestMemberService() {
		return requestMemberService;
	}

	/**
	 * Sets the request member remote service.
	 *
	 * @param requestMemberService the request member remote service
	 */
	public void setRequestMemberService(
		org.kisti.edison.service.RequestMemberService requestMemberService) {
		this.requestMemberService = requestMemberService;
	}

	/**
	 * Returns the request member persistence.
	 *
	 * @return the request member persistence
	 */
	public RequestMemberPersistence getRequestMemberPersistence() {
		return requestMemberPersistence;
	}

	/**
	 * Sets the request member persistence.
	 *
	 * @param requestMemberPersistence the request member persistence
	 */
	public void setRequestMemberPersistence(
		RequestMemberPersistence requestMemberPersistence) {
		this.requestMemberPersistence = requestMemberPersistence;
	}

	/**
	 * Returns the request member finder.
	 *
	 * @return the request member finder
	 */
	public RequestMemberFinder getRequestMemberFinder() {
		return requestMemberFinder;
	}

	/**
	 * Sets the request member finder.
	 *
	 * @param requestMemberFinder the request member finder
	 */
	public void setRequestMemberFinder(RequestMemberFinder requestMemberFinder) {
		this.requestMemberFinder = requestMemberFinder;
	}

	/**
	 * Returns the sim pro science app link local service.
	 *
	 * @return the sim pro science app link local service
	 */
	public org.kisti.edison.service.SimProScienceAppLinkLocalService getSimProScienceAppLinkLocalService() {
		return simProScienceAppLinkLocalService;
	}

	/**
	 * Sets the sim pro science app link local service.
	 *
	 * @param simProScienceAppLinkLocalService the sim pro science app link local service
	 */
	public void setSimProScienceAppLinkLocalService(
		org.kisti.edison.service.SimProScienceAppLinkLocalService simProScienceAppLinkLocalService) {
		this.simProScienceAppLinkLocalService = simProScienceAppLinkLocalService;
	}

	/**
	 * Returns the sim pro science app link remote service.
	 *
	 * @return the sim pro science app link remote service
	 */
	public org.kisti.edison.service.SimProScienceAppLinkService getSimProScienceAppLinkService() {
		return simProScienceAppLinkService;
	}

	/**
	 * Sets the sim pro science app link remote service.
	 *
	 * @param simProScienceAppLinkService the sim pro science app link remote service
	 */
	public void setSimProScienceAppLinkService(
		org.kisti.edison.service.SimProScienceAppLinkService simProScienceAppLinkService) {
		this.simProScienceAppLinkService = simProScienceAppLinkService;
	}

	/**
	 * Returns the sim pro science app link persistence.
	 *
	 * @return the sim pro science app link persistence
	 */
	public SimProScienceAppLinkPersistence getSimProScienceAppLinkPersistence() {
		return simProScienceAppLinkPersistence;
	}

	/**
	 * Sets the sim pro science app link persistence.
	 *
	 * @param simProScienceAppLinkPersistence the sim pro science app link persistence
	 */
	public void setSimProScienceAppLinkPersistence(
		SimProScienceAppLinkPersistence simProScienceAppLinkPersistence) {
		this.simProScienceAppLinkPersistence = simProScienceAppLinkPersistence;
	}

	/**
	 * Returns the sim pro science app link finder.
	 *
	 * @return the sim pro science app link finder
	 */
	public SimProScienceAppLinkFinder getSimProScienceAppLinkFinder() {
		return simProScienceAppLinkFinder;
	}

	/**
	 * Sets the sim pro science app link finder.
	 *
	 * @param simProScienceAppLinkFinder the sim pro science app link finder
	 */
	public void setSimProScienceAppLinkFinder(
		SimProScienceAppLinkFinder simProScienceAppLinkFinder) {
		this.simProScienceAppLinkFinder = simProScienceAppLinkFinder;
	}

	/**
	 * Returns the simulation project local service.
	 *
	 * @return the simulation project local service
	 */
	public org.kisti.edison.service.SimulationProjectLocalService getSimulationProjectLocalService() {
		return simulationProjectLocalService;
	}

	/**
	 * Sets the simulation project local service.
	 *
	 * @param simulationProjectLocalService the simulation project local service
	 */
	public void setSimulationProjectLocalService(
		org.kisti.edison.service.SimulationProjectLocalService simulationProjectLocalService) {
		this.simulationProjectLocalService = simulationProjectLocalService;
	}

	/**
	 * Returns the simulation project remote service.
	 *
	 * @return the simulation project remote service
	 */
	public org.kisti.edison.service.SimulationProjectService getSimulationProjectService() {
		return simulationProjectService;
	}

	/**
	 * Sets the simulation project remote service.
	 *
	 * @param simulationProjectService the simulation project remote service
	 */
	public void setSimulationProjectService(
		org.kisti.edison.service.SimulationProjectService simulationProjectService) {
		this.simulationProjectService = simulationProjectService;
	}

	/**
	 * Returns the simulation project persistence.
	 *
	 * @return the simulation project persistence
	 */
	public SimulationProjectPersistence getSimulationProjectPersistence() {
		return simulationProjectPersistence;
	}

	/**
	 * Sets the simulation project persistence.
	 *
	 * @param simulationProjectPersistence the simulation project persistence
	 */
	public void setSimulationProjectPersistence(
		SimulationProjectPersistence simulationProjectPersistence) {
		this.simulationProjectPersistence = simulationProjectPersistence;
	}

	/**
	 * Returns the simulation project finder.
	 *
	 * @return the simulation project finder
	 */
	public SimulationProjectFinder getSimulationProjectFinder() {
		return simulationProjectFinder;
	}

	/**
	 * Sets the simulation project finder.
	 *
	 * @param simulationProjectFinder the simulation project finder
	 */
	public void setSimulationProjectFinder(
		SimulationProjectFinder simulationProjectFinder) {
		this.simulationProjectFinder = simulationProjectFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.model.SimProScienceAppLink",
			simProScienceAppLinkLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.model.SimProScienceAppLink");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SimProScienceAppLink.class;
	}

	protected String getModelClassName() {
		return SimProScienceAppLink.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = simProScienceAppLinkPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.service.RequestMemberLocalService.class)
	protected org.kisti.edison.service.RequestMemberLocalService requestMemberLocalService;
	@BeanReference(type = org.kisti.edison.service.RequestMemberService.class)
	protected org.kisti.edison.service.RequestMemberService requestMemberService;
	@BeanReference(type = RequestMemberPersistence.class)
	protected RequestMemberPersistence requestMemberPersistence;
	@BeanReference(type = RequestMemberFinder.class)
	protected RequestMemberFinder requestMemberFinder;
	@BeanReference(type = org.kisti.edison.service.SimProScienceAppLinkLocalService.class)
	protected org.kisti.edison.service.SimProScienceAppLinkLocalService simProScienceAppLinkLocalService;
	@BeanReference(type = org.kisti.edison.service.SimProScienceAppLinkService.class)
	protected org.kisti.edison.service.SimProScienceAppLinkService simProScienceAppLinkService;
	@BeanReference(type = SimProScienceAppLinkPersistence.class)
	protected SimProScienceAppLinkPersistence simProScienceAppLinkPersistence;
	@BeanReference(type = SimProScienceAppLinkFinder.class)
	protected SimProScienceAppLinkFinder simProScienceAppLinkFinder;
	@BeanReference(type = org.kisti.edison.service.SimulationProjectLocalService.class)
	protected org.kisti.edison.service.SimulationProjectLocalService simulationProjectLocalService;
	@BeanReference(type = org.kisti.edison.service.SimulationProjectService.class)
	protected org.kisti.edison.service.SimulationProjectService simulationProjectService;
	@BeanReference(type = SimulationProjectPersistence.class)
	protected SimulationProjectPersistence simulationProjectPersistence;
	@BeanReference(type = SimulationProjectFinder.class)
	protected SimulationProjectFinder simulationProjectFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SimProScienceAppLinkLocalServiceClpInvoker _clpInvoker = new SimProScienceAppLinkLocalServiceClpInvoker();
}