/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.model.SimProScienceAppLink;
import org.kisti.edison.model.SimProScienceAppLinkModel;
import org.kisti.edison.model.SimProScienceAppLinkSoap;
import org.kisti.edison.service.persistence.SimProScienceAppLinkPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SimProScienceAppLink service. Represents a row in the &quot;EDSIMPRO_SimProScienceAppLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.model.SimProScienceAppLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimProScienceAppLinkImpl}.
 * </p>
 *
 * @author edison
 * @see SimProScienceAppLinkImpl
 * @see org.kisti.edison.model.SimProScienceAppLink
 * @see org.kisti.edison.model.SimProScienceAppLinkModel
 * @generated
 */
@JSON(strict = true)
public class SimProScienceAppLinkModelImpl extends BaseModelImpl<SimProScienceAppLink>
	implements SimProScienceAppLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sim pro science app link model instance should use the {@link org.kisti.edison.model.SimProScienceAppLink} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIMPRO_SimProScienceAppLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "simProScienceAppLinkId", Types.BIGINT },
			{ "simulationProjectId", Types.BIGINT },
			{ "scienceAppId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIMPRO_SimProScienceAppLink (simProScienceAppLinkId LONG not null,simulationProjectId LONG not null,scienceAppId LONG,primary key (simProScienceAppLinkId, simulationProjectId))";
	public static final String TABLE_SQL_DROP = "drop table EDSIMPRO_SimProScienceAppLink";
	public static final String ORDER_BY_JPQL = " ORDER BY simProScienceAppLink.id.simProScienceAppLinkId ASC, simProScienceAppLink.id.simulationProjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIMPRO_SimProScienceAppLink.simProScienceAppLinkId ASC, EDSIMPRO_SimProScienceAppLink.simulationProjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.model.SimProScienceAppLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.model.SimProScienceAppLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.model.SimProScienceAppLink"),
			true);
	public static long SIMULATIONPROJECTID_COLUMN_BITMASK = 1L;
	public static long SIMPROSCIENCEAPPLINKID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SimProScienceAppLink toModel(
		SimProScienceAppLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SimProScienceAppLink model = new SimProScienceAppLinkImpl();

		model.setSimProScienceAppLinkId(soapModel.getSimProScienceAppLinkId());
		model.setSimulationProjectId(soapModel.getSimulationProjectId());
		model.setScienceAppId(soapModel.getScienceAppId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SimProScienceAppLink> toModels(
		SimProScienceAppLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SimProScienceAppLink> models = new ArrayList<SimProScienceAppLink>(soapModels.length);

		for (SimProScienceAppLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.model.SimProScienceAppLink"));

	public SimProScienceAppLinkModelImpl() {
	}

	@Override
	public SimProScienceAppLinkPK getPrimaryKey() {
		return new SimProScienceAppLinkPK(_simProScienceAppLinkId,
			_simulationProjectId);
	}

	@Override
	public void setPrimaryKey(SimProScienceAppLinkPK primaryKey) {
		setSimProScienceAppLinkId(primaryKey.simProScienceAppLinkId);
		setSimulationProjectId(primaryKey.simulationProjectId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SimProScienceAppLinkPK(_simProScienceAppLinkId,
			_simulationProjectId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SimProScienceAppLinkPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SimProScienceAppLink.class;
	}

	@Override
	public String getModelClassName() {
		return SimProScienceAppLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("simProScienceAppLinkId", getSimProScienceAppLinkId());
		attributes.put("simulationProjectId", getSimulationProjectId());
		attributes.put("scienceAppId", getScienceAppId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long simProScienceAppLinkId = (Long)attributes.get(
				"simProScienceAppLinkId");

		if (simProScienceAppLinkId != null) {
			setSimProScienceAppLinkId(simProScienceAppLinkId);
		}

		Long simulationProjectId = (Long)attributes.get("simulationProjectId");

		if (simulationProjectId != null) {
			setSimulationProjectId(simulationProjectId);
		}

		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}
	}

	@JSON
	@Override
	public long getSimProScienceAppLinkId() {
		return _simProScienceAppLinkId;
	}

	@Override
	public void setSimProScienceAppLinkId(long simProScienceAppLinkId) {
		_simProScienceAppLinkId = simProScienceAppLinkId;
	}

	@JSON
	@Override
	public long getSimulationProjectId() {
		return _simulationProjectId;
	}

	@Override
	public void setSimulationProjectId(long simulationProjectId) {
		_columnBitmask |= SIMULATIONPROJECTID_COLUMN_BITMASK;

		if (!_setOriginalSimulationProjectId) {
			_setOriginalSimulationProjectId = true;

			_originalSimulationProjectId = _simulationProjectId;
		}

		_simulationProjectId = simulationProjectId;
	}

	public long getOriginalSimulationProjectId() {
		return _originalSimulationProjectId;
	}

	@JSON
	@Override
	public Long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(Long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public SimProScienceAppLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SimProScienceAppLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimProScienceAppLinkImpl simProScienceAppLinkImpl = new SimProScienceAppLinkImpl();

		simProScienceAppLinkImpl.setSimProScienceAppLinkId(getSimProScienceAppLinkId());
		simProScienceAppLinkImpl.setSimulationProjectId(getSimulationProjectId());
		simProScienceAppLinkImpl.setScienceAppId(getScienceAppId());

		simProScienceAppLinkImpl.resetOriginalValues();

		return simProScienceAppLinkImpl;
	}

	@Override
	public int compareTo(SimProScienceAppLink simProScienceAppLink) {
		SimProScienceAppLinkPK primaryKey = simProScienceAppLink.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SimProScienceAppLink)) {
			return false;
		}

		SimProScienceAppLink simProScienceAppLink = (SimProScienceAppLink)obj;

		SimProScienceAppLinkPK primaryKey = simProScienceAppLink.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		SimProScienceAppLinkModelImpl simProScienceAppLinkModelImpl = this;

		simProScienceAppLinkModelImpl._originalSimulationProjectId = simProScienceAppLinkModelImpl._simulationProjectId;

		simProScienceAppLinkModelImpl._setOriginalSimulationProjectId = false;

		simProScienceAppLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SimProScienceAppLink> toCacheModel() {
		SimProScienceAppLinkCacheModel simProScienceAppLinkCacheModel = new SimProScienceAppLinkCacheModel();

		simProScienceAppLinkCacheModel.simProScienceAppLinkId = getSimProScienceAppLinkId();

		simProScienceAppLinkCacheModel.simulationProjectId = getSimulationProjectId();

		simProScienceAppLinkCacheModel.scienceAppId = getScienceAppId();

		return simProScienceAppLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{simProScienceAppLinkId=");
		sb.append(getSimProScienceAppLinkId());
		sb.append(", simulationProjectId=");
		sb.append(getSimulationProjectId());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.model.SimProScienceAppLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>simProScienceAppLinkId</column-name><column-value><![CDATA[");
		sb.append(getSimProScienceAppLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationProjectId</column-name><column-value><![CDATA[");
		sb.append(getSimulationProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SimProScienceAppLink.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SimProScienceAppLink.class
		};
	private long _simProScienceAppLinkId;
	private long _simulationProjectId;
	private long _originalSimulationProjectId;
	private boolean _setOriginalSimulationProjectId;
	private Long _scienceAppId;
	private long _columnBitmask;
	private SimProScienceAppLink _escapedModel;
}