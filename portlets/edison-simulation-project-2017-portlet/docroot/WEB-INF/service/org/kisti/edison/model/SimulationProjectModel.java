/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the SimulationProject service. Represents a row in the &quot;EDSIMPRO_SimulationProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.model.impl.SimulationProjectModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.model.impl.SimulationProjectImpl}.
 * </p>
 *
 * @author edison
 * @see SimulationProject
 * @see org.kisti.edison.model.impl.SimulationProjectImpl
 * @see org.kisti.edison.model.impl.SimulationProjectModelImpl
 * @generated
 */
public interface SimulationProjectModel extends BaseModel<SimulationProject> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a simulation project model instance should use the {@link SimulationProject} interface instead.
	 */

	/**
	 * Returns the primary key of this simulation project.
	 *
	 * @return the primary key of this simulation project
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this simulation project.
	 *
	 * @param primaryKey the primary key of this simulation project
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the simulation project ID of this simulation project.
	 *
	 * @return the simulation project ID of this simulation project
	 */
	public long getSimulationProjectId();

	/**
	 * Sets the simulation project ID of this simulation project.
	 *
	 * @param simulationProjectId the simulation project ID of this simulation project
	 */
	public void setSimulationProjectId(long simulationProjectId);

	/**
	 * Returns the title of this simulation project.
	 *
	 * @return the title of this simulation project
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this simulation project in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this simulation project
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this simulation project in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this simulation project. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this simulation project in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this simulation project
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this simulation project in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this simulation project
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this simulation project.
	 *
	 * @return the locales and localized titles of this simulation project
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this simulation project.
	 *
	 * @param title the title of this simulation project
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this simulation project in the language.
	 *
	 * @param title the localized title of this simulation project
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this simulation project in the language, and sets the default locale.
	 *
	 * @param title the localized title of this simulation project
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this simulation project from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this simulation project
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this simulation project from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this simulation project
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the service language of this simulation project.
	 *
	 * @return the service language of this simulation project
	 */
	@AutoEscape
	public String getServiceLanguage();

	/**
	 * Sets the service language of this simulation project.
	 *
	 * @param serviceLanguage the service language of this simulation project
	 */
	public void setServiceLanguage(String serviceLanguage);

	/**
	 * Returns the project open yn of this simulation project.
	 *
	 * @return the project open yn of this simulation project
	 */
	public boolean getProjectOpenYn();

	/**
	 * Returns <code>true</code> if this simulation project is project open yn.
	 *
	 * @return <code>true</code> if this simulation project is project open yn; <code>false</code> otherwise
	 */
	public boolean isProjectOpenYn();

	/**
	 * Sets whether this simulation project is project open yn.
	 *
	 * @param projectOpenYn the project open yn of this simulation project
	 */
	public void setProjectOpenYn(boolean projectOpenYn);

	/**
	 * Returns the explain of this simulation project.
	 *
	 * @return the explain of this simulation project
	 */
	public String getExplain();

	/**
	 * Returns the localized explain of this simulation project in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized explain of this simulation project
	 */
	@AutoEscape
	public String getExplain(Locale locale);

	/**
	 * Returns the localized explain of this simulation project in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized explain of this simulation project. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getExplain(Locale locale, boolean useDefault);

	/**
	 * Returns the localized explain of this simulation project in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized explain of this simulation project
	 */
	@AutoEscape
	public String getExplain(String languageId);

	/**
	 * Returns the localized explain of this simulation project in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized explain of this simulation project
	 */
	@AutoEscape
	public String getExplain(String languageId, boolean useDefault);

	@AutoEscape
	public String getExplainCurrentLanguageId();

	@AutoEscape
	public String getExplainCurrentValue();

	/**
	 * Returns a map of the locales and localized explains of this simulation project.
	 *
	 * @return the locales and localized explains of this simulation project
	 */
	public Map<Locale, String> getExplainMap();

	/**
	 * Sets the explain of this simulation project.
	 *
	 * @param explain the explain of this simulation project
	 */
	public void setExplain(String explain);

	/**
	 * Sets the localized explain of this simulation project in the language.
	 *
	 * @param explain the localized explain of this simulation project
	 * @param locale the locale of the language
	 */
	public void setExplain(String explain, Locale locale);

	/**
	 * Sets the localized explain of this simulation project in the language, and sets the default locale.
	 *
	 * @param explain the localized explain of this simulation project
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setExplain(String explain, Locale locale, Locale defaultLocale);

	public void setExplainCurrentLanguageId(String languageId);

	/**
	 * Sets the localized explains of this simulation project from the map of locales and localized explains.
	 *
	 * @param explainMap the locales and localized explains of this simulation project
	 */
	public void setExplainMap(Map<Locale, String> explainMap);

	/**
	 * Sets the localized explains of this simulation project from the map of locales and localized explains, and sets the default locale.
	 *
	 * @param explainMap the locales and localized explains of this simulation project
	 * @param defaultLocale the default locale
	 */
	public void setExplainMap(Map<Locale, String> explainMap,
		Locale defaultLocale);

	/**
	 * Returns the icon ID of this simulation project.
	 *
	 * @return the icon ID of this simulation project
	 */
	public long getIconId();

	/**
	 * Sets the icon ID of this simulation project.
	 *
	 * @param iconId the icon ID of this simulation project
	 */
	public void setIconId(long iconId);

	/**
	 * Returns the image folder ID of this simulation project.
	 *
	 * @return the image folder ID of this simulation project
	 */
	public long getImageFolderId();

	/**
	 * Sets the image folder ID of this simulation project.
	 *
	 * @param imageFolderId the image folder ID of this simulation project
	 */
	public void setImageFolderId(long imageFolderId);

	/**
	 * Returns the owner ID of this simulation project.
	 *
	 * @return the owner ID of this simulation project
	 */
	public long getOwnerId();

	/**
	 * Sets the owner ID of this simulation project.
	 *
	 * @param ownerId the owner ID of this simulation project
	 */
	public void setOwnerId(long ownerId);

	/**
	 * Returns the insert ID of this simulation project.
	 *
	 * @return the insert ID of this simulation project
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this simulation project.
	 *
	 * @param insertId the insert ID of this simulation project
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the insert date of this simulation project.
	 *
	 * @return the insert date of this simulation project
	 */
	public Date getInsertDate();

	/**
	 * Sets the insert date of this simulation project.
	 *
	 * @param insertDate the insert date of this simulation project
	 */
	public void setInsertDate(Date insertDate);

	/**
	 * Returns the update ID of this simulation project.
	 *
	 * @return the update ID of this simulation project
	 */
	public long getUpdateId();

	/**
	 * Sets the update ID of this simulation project.
	 *
	 * @param updateId the update ID of this simulation project
	 */
	public void setUpdateId(long updateId);

	/**
	 * Returns the update date of this simulation project.
	 *
	 * @return the update date of this simulation project
	 */
	public Date getUpdateDate();

	/**
	 * Sets the update date of this simulation project.
	 *
	 * @param updateDate the update date of this simulation project
	 */
	public void setUpdateDate(Date updateDate);

	/**
	 * Returns the templet ID of this simulation project.
	 *
	 * @return the templet ID of this simulation project
	 */
	public long getTempletId();

	/**
	 * Sets the templet ID of this simulation project.
	 *
	 * @param templetId the templet ID of this simulation project
	 */
	public void setTempletId(long templetId);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.model.SimulationProject simulationProject);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.model.SimulationProject> toCacheModel();

	@Override
	public org.kisti.edison.model.SimulationProject toEscapedModel();

	@Override
	public org.kisti.edison.model.SimulationProject toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}