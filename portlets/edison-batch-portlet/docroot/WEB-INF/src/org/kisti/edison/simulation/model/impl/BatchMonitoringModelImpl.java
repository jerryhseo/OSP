/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.simulation.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.simulation.model.BatchMonitoring;
import org.kisti.edison.simulation.model.BatchMonitoringModel;
import org.kisti.edison.simulation.model.BatchMonitoringSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the BatchMonitoring service. Represents a row in the &quot;EDBAT_BatchMonitoring&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.simulation.model.BatchMonitoringModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BatchMonitoringImpl}.
 * </p>
 *
 * @author edison
 * @see BatchMonitoringImpl
 * @see org.kisti.edison.simulation.model.BatchMonitoring
 * @see org.kisti.edison.simulation.model.BatchMonitoringModel
 * @generated
 */
@JSON(strict = true)
public class BatchMonitoringModelImpl extends BaseModelImpl<BatchMonitoring>
	implements BatchMonitoringModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a batch monitoring model instance should use the {@link org.kisti.edison.simulation.model.BatchMonitoring} interface instead.
	 */
	public static final String TABLE_NAME = "EDBAT_BatchMonitoring";
	public static final Object[][] TABLE_COLUMNS = {
			{ "batSeqNo", Types.BIGINT },
			{ "batDiv", Types.VARCHAR },
			{ "manualYN", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "insertId", Types.BIGINT },
			{ "exeDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDBAT_BatchMonitoring (batSeqNo LONG not null primary key,batDiv VARCHAR(75) null,manualYN VARCHAR(75) null,status VARCHAR(75) null,message STRING null,insertId LONG,exeDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table EDBAT_BatchMonitoring";
	public static final String ORDER_BY_JPQL = " ORDER BY batchMonitoring.batSeqNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDBAT_BatchMonitoring.batSeqNo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.simulation.model.BatchMonitoring"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.simulation.model.BatchMonitoring"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BatchMonitoring toModel(BatchMonitoringSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BatchMonitoring model = new BatchMonitoringImpl();

		model.setBatSeqNo(soapModel.getBatSeqNo());
		model.setBatDiv(soapModel.getBatDiv());
		model.setManualYN(soapModel.getManualYN());
		model.setStatus(soapModel.getStatus());
		model.setMessage(soapModel.getMessage());
		model.setInsertId(soapModel.getInsertId());
		model.setExeDate(soapModel.getExeDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BatchMonitoring> toModels(
		BatchMonitoringSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BatchMonitoring> models = new ArrayList<BatchMonitoring>(soapModels.length);

		for (BatchMonitoringSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.simulation.model.BatchMonitoring"));

	public BatchMonitoringModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _batSeqNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBatSeqNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _batSeqNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BatchMonitoring.class;
	}

	@Override
	public String getModelClassName() {
		return BatchMonitoring.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("batSeqNo", getBatSeqNo());
		attributes.put("batDiv", getBatDiv());
		attributes.put("manualYN", getManualYN());
		attributes.put("status", getStatus());
		attributes.put("message", getMessage());
		attributes.put("insertId", getInsertId());
		attributes.put("exeDate", getExeDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long batSeqNo = (Long)attributes.get("batSeqNo");

		if (batSeqNo != null) {
			setBatSeqNo(batSeqNo);
		}

		String batDiv = (String)attributes.get("batDiv");

		if (batDiv != null) {
			setBatDiv(batDiv);
		}

		String manualYN = (String)attributes.get("manualYN");

		if (manualYN != null) {
			setManualYN(manualYN);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Date exeDate = (Date)attributes.get("exeDate");

		if (exeDate != null) {
			setExeDate(exeDate);
		}
	}

	@JSON
	@Override
	public long getBatSeqNo() {
		return _batSeqNo;
	}

	@Override
	public void setBatSeqNo(long batSeqNo) {
		_batSeqNo = batSeqNo;
	}

	@JSON
	@Override
	public String getBatDiv() {
		if (_batDiv == null) {
			return StringPool.BLANK;
		}
		else {
			return _batDiv;
		}
	}

	@Override
	public void setBatDiv(String batDiv) {
		_batDiv = batDiv;
	}

	@JSON
	@Override
	public String getManualYN() {
		if (_manualYN == null) {
			return StringPool.BLANK;
		}
		else {
			return _manualYN;
		}
	}

	@Override
	public void setManualYN(String manualYN) {
		_manualYN = manualYN;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public String getMessage(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMessage(languageId);
	}

	@Override
	public String getMessage(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMessage(languageId, useDefault);
	}

	@Override
	public String getMessage(String languageId) {
		return LocalizationUtil.getLocalization(getMessage(), languageId);
	}

	@Override
	public String getMessage(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getMessage(), languageId,
			useDefault);
	}

	@Override
	public String getMessageCurrentLanguageId() {
		return _messageCurrentLanguageId;
	}

	@JSON
	@Override
	public String getMessageCurrentValue() {
		Locale locale = getLocale(_messageCurrentLanguageId);

		return getMessage(locale);
	}

	@Override
	public Map<Locale, String> getMessageMap() {
		return LocalizationUtil.getLocalizationMap(getMessage());
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@Override
	public void setMessage(String message, Locale locale) {
		setMessage(message, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setMessage(String message, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(message)) {
			setMessage(LocalizationUtil.updateLocalization(getMessage(),
					"Message", message, languageId, defaultLanguageId));
		}
		else {
			setMessage(LocalizationUtil.removeLocalization(getMessage(),
					"Message", languageId));
		}
	}

	@Override
	public void setMessageCurrentLanguageId(String languageId) {
		_messageCurrentLanguageId = languageId;
	}

	@Override
	public void setMessageMap(Map<Locale, String> messageMap) {
		setMessageMap(messageMap, LocaleUtil.getDefault());
	}

	@Override
	public void setMessageMap(Map<Locale, String> messageMap,
		Locale defaultLocale) {
		if (messageMap == null) {
			return;
		}

		setMessage(LocalizationUtil.updateLocalization(messageMap,
				getMessage(), "Message", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public Date getExeDate() {
		return _exeDate;
	}

	@Override
	public void setExeDate(Date exeDate) {
		_exeDate = exeDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BatchMonitoring.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> messageMap = getMessageMap();

		for (Map.Entry<Locale, String> entry : messageMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getMessage();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String message = getMessage(defaultLocale);

		if (Validator.isNull(message)) {
			setMessage(getMessage(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setMessage(getMessage(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public BatchMonitoring toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BatchMonitoring)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BatchMonitoringImpl batchMonitoringImpl = new BatchMonitoringImpl();

		batchMonitoringImpl.setBatSeqNo(getBatSeqNo());
		batchMonitoringImpl.setBatDiv(getBatDiv());
		batchMonitoringImpl.setManualYN(getManualYN());
		batchMonitoringImpl.setStatus(getStatus());
		batchMonitoringImpl.setMessage(getMessage());
		batchMonitoringImpl.setInsertId(getInsertId());
		batchMonitoringImpl.setExeDate(getExeDate());

		batchMonitoringImpl.resetOriginalValues();

		return batchMonitoringImpl;
	}

	@Override
	public int compareTo(BatchMonitoring batchMonitoring) {
		long primaryKey = batchMonitoring.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BatchMonitoring)) {
			return false;
		}

		BatchMonitoring batchMonitoring = (BatchMonitoring)obj;

		long primaryKey = batchMonitoring.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BatchMonitoring> toCacheModel() {
		BatchMonitoringCacheModel batchMonitoringCacheModel = new BatchMonitoringCacheModel();

		batchMonitoringCacheModel.batSeqNo = getBatSeqNo();

		batchMonitoringCacheModel.batDiv = getBatDiv();

		String batDiv = batchMonitoringCacheModel.batDiv;

		if ((batDiv != null) && (batDiv.length() == 0)) {
			batchMonitoringCacheModel.batDiv = null;
		}

		batchMonitoringCacheModel.manualYN = getManualYN();

		String manualYN = batchMonitoringCacheModel.manualYN;

		if ((manualYN != null) && (manualYN.length() == 0)) {
			batchMonitoringCacheModel.manualYN = null;
		}

		batchMonitoringCacheModel.status = getStatus();

		String status = batchMonitoringCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			batchMonitoringCacheModel.status = null;
		}

		batchMonitoringCacheModel.message = getMessage();

		String message = batchMonitoringCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			batchMonitoringCacheModel.message = null;
		}

		batchMonitoringCacheModel.insertId = getInsertId();

		Date exeDate = getExeDate();

		if (exeDate != null) {
			batchMonitoringCacheModel.exeDate = exeDate.getTime();
		}
		else {
			batchMonitoringCacheModel.exeDate = Long.MIN_VALUE;
		}

		return batchMonitoringCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{batSeqNo=");
		sb.append(getBatSeqNo());
		sb.append(", batDiv=");
		sb.append(getBatDiv());
		sb.append(", manualYN=");
		sb.append(getManualYN());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", exeDate=");
		sb.append(getExeDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.simulation.model.BatchMonitoring");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>batSeqNo</column-name><column-value><![CDATA[");
		sb.append(getBatSeqNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>batDiv</column-name><column-value><![CDATA[");
		sb.append(getBatDiv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manualYN</column-name><column-value><![CDATA[");
		sb.append(getManualYN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exeDate</column-name><column-value><![CDATA[");
		sb.append(getExeDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BatchMonitoring.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BatchMonitoring.class
		};
	private long _batSeqNo;
	private String _batDiv;
	private String _manualYN;
	private String _status;
	private String _message;
	private String _messageCurrentLanguageId;
	private long _insertId;
	private Date _exeDate;
	private BatchMonitoring _escapedModel;
}