/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.simulation.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.kisti.edison.simulation.model.BatchMonitoring;
import org.kisti.edison.simulation.service.BatchMonitoringLocalService;
import org.kisti.edison.simulation.service.persistence.BatchMonitoringFinder;
import org.kisti.edison.simulation.service.persistence.BatchMonitoringPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the batch monitoring local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.kisti.edison.simulation.service.impl.BatchMonitoringLocalServiceImpl}.
 * </p>
 *
 * @author edison
 * @see org.kisti.edison.simulation.service.impl.BatchMonitoringLocalServiceImpl
 * @see org.kisti.edison.simulation.service.BatchMonitoringLocalServiceUtil
 * @generated
 */
public abstract class BatchMonitoringLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BatchMonitoringLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.kisti.edison.simulation.service.BatchMonitoringLocalServiceUtil} to access the batch monitoring local service.
	 */

	/**
	 * Adds the batch monitoring to the database. Also notifies the appropriate model listeners.
	 *
	 * @param batchMonitoring the batch monitoring
	 * @return the batch monitoring that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BatchMonitoring addBatchMonitoring(BatchMonitoring batchMonitoring)
		throws SystemException {
		batchMonitoring.setNew(true);

		return batchMonitoringPersistence.update(batchMonitoring);
	}

	/**
	 * Creates a new batch monitoring with the primary key. Does not add the batch monitoring to the database.
	 *
	 * @param batSeqNo the primary key for the new batch monitoring
	 * @return the new batch monitoring
	 */
	@Override
	public BatchMonitoring createBatchMonitoring(long batSeqNo) {
		return batchMonitoringPersistence.create(batSeqNo);
	}

	/**
	 * Deletes the batch monitoring with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param batSeqNo the primary key of the batch monitoring
	 * @return the batch monitoring that was removed
	 * @throws PortalException if a batch monitoring with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BatchMonitoring deleteBatchMonitoring(long batSeqNo)
		throws PortalException, SystemException {
		return batchMonitoringPersistence.remove(batSeqNo);
	}

	/**
	 * Deletes the batch monitoring from the database. Also notifies the appropriate model listeners.
	 *
	 * @param batchMonitoring the batch monitoring
	 * @return the batch monitoring that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BatchMonitoring deleteBatchMonitoring(
		BatchMonitoring batchMonitoring) throws SystemException {
		return batchMonitoringPersistence.remove(batchMonitoring);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BatchMonitoring.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return batchMonitoringPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.simulation.model.impl.BatchMonitoringModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return batchMonitoringPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.simulation.model.impl.BatchMonitoringModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return batchMonitoringPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return batchMonitoringPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return batchMonitoringPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BatchMonitoring fetchBatchMonitoring(long batSeqNo)
		throws SystemException {
		return batchMonitoringPersistence.fetchByPrimaryKey(batSeqNo);
	}

	/**
	 * Returns the batch monitoring with the primary key.
	 *
	 * @param batSeqNo the primary key of the batch monitoring
	 * @return the batch monitoring
	 * @throws PortalException if a batch monitoring with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BatchMonitoring getBatchMonitoring(long batSeqNo)
		throws PortalException, SystemException {
		return batchMonitoringPersistence.findByPrimaryKey(batSeqNo);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return batchMonitoringPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the batch monitorings.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.kisti.edison.simulation.model.impl.BatchMonitoringModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of batch monitorings
	 * @param end the upper bound of the range of batch monitorings (not inclusive)
	 * @return the range of batch monitorings
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BatchMonitoring> getBatchMonitorings(int start, int end)
		throws SystemException {
		return batchMonitoringPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of batch monitorings.
	 *
	 * @return the number of batch monitorings
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBatchMonitoringsCount() throws SystemException {
		return batchMonitoringPersistence.countAll();
	}

	/**
	 * Updates the batch monitoring in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param batchMonitoring the batch monitoring
	 * @return the batch monitoring that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BatchMonitoring updateBatchMonitoring(
		BatchMonitoring batchMonitoring) throws SystemException {
		return batchMonitoringPersistence.update(batchMonitoring);
	}

	/**
	 * Returns the batch monitoring local service.
	 *
	 * @return the batch monitoring local service
	 */
	public org.kisti.edison.simulation.service.BatchMonitoringLocalService getBatchMonitoringLocalService() {
		return batchMonitoringLocalService;
	}

	/**
	 * Sets the batch monitoring local service.
	 *
	 * @param batchMonitoringLocalService the batch monitoring local service
	 */
	public void setBatchMonitoringLocalService(
		org.kisti.edison.simulation.service.BatchMonitoringLocalService batchMonitoringLocalService) {
		this.batchMonitoringLocalService = batchMonitoringLocalService;
	}

	/**
	 * Returns the batch monitoring remote service.
	 *
	 * @return the batch monitoring remote service
	 */
	public org.kisti.edison.simulation.service.BatchMonitoringService getBatchMonitoringService() {
		return batchMonitoringService;
	}

	/**
	 * Sets the batch monitoring remote service.
	 *
	 * @param batchMonitoringService the batch monitoring remote service
	 */
	public void setBatchMonitoringService(
		org.kisti.edison.simulation.service.BatchMonitoringService batchMonitoringService) {
		this.batchMonitoringService = batchMonitoringService;
	}

	/**
	 * Returns the batch monitoring persistence.
	 *
	 * @return the batch monitoring persistence
	 */
	public BatchMonitoringPersistence getBatchMonitoringPersistence() {
		return batchMonitoringPersistence;
	}

	/**
	 * Sets the batch monitoring persistence.
	 *
	 * @param batchMonitoringPersistence the batch monitoring persistence
	 */
	public void setBatchMonitoringPersistence(
		BatchMonitoringPersistence batchMonitoringPersistence) {
		this.batchMonitoringPersistence = batchMonitoringPersistence;
	}

	/**
	 * Returns the batch monitoring finder.
	 *
	 * @return the batch monitoring finder
	 */
	public BatchMonitoringFinder getBatchMonitoringFinder() {
		return batchMonitoringFinder;
	}

	/**
	 * Sets the batch monitoring finder.
	 *
	 * @param batchMonitoringFinder the batch monitoring finder
	 */
	public void setBatchMonitoringFinder(
		BatchMonitoringFinder batchMonitoringFinder) {
		this.batchMonitoringFinder = batchMonitoringFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.kisti.edison.simulation.model.BatchMonitoring",
			batchMonitoringLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.kisti.edison.simulation.model.BatchMonitoring");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BatchMonitoring.class;
	}

	protected String getModelClassName() {
		return BatchMonitoring.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = batchMonitoringPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.kisti.edison.simulation.service.BatchMonitoringLocalService.class)
	protected org.kisti.edison.simulation.service.BatchMonitoringLocalService batchMonitoringLocalService;
	@BeanReference(type = org.kisti.edison.simulation.service.BatchMonitoringService.class)
	protected org.kisti.edison.simulation.service.BatchMonitoringService batchMonitoringService;
	@BeanReference(type = BatchMonitoringPersistence.class)
	protected BatchMonitoringPersistence batchMonitoringPersistence;
	@BeanReference(type = BatchMonitoringFinder.class)
	protected BatchMonitoringFinder batchMonitoringFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BatchMonitoringLocalServiceClpInvoker _clpInvoker = new BatchMonitoringLocalServiceClpInvoker();
}