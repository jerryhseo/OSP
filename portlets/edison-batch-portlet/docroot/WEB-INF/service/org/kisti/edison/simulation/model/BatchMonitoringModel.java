/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.simulation.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the BatchMonitoring service. Represents a row in the &quot;EDBAT_BatchMonitoring&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.simulation.model.impl.BatchMonitoringModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.simulation.model.impl.BatchMonitoringImpl}.
 * </p>
 *
 * @author edison
 * @see BatchMonitoring
 * @see org.kisti.edison.simulation.model.impl.BatchMonitoringImpl
 * @see org.kisti.edison.simulation.model.impl.BatchMonitoringModelImpl
 * @generated
 */
public interface BatchMonitoringModel extends BaseModel<BatchMonitoring> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a batch monitoring model instance should use the {@link BatchMonitoring} interface instead.
	 */

	/**
	 * Returns the primary key of this batch monitoring.
	 *
	 * @return the primary key of this batch monitoring
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this batch monitoring.
	 *
	 * @param primaryKey the primary key of this batch monitoring
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the bat seq no of this batch monitoring.
	 *
	 * @return the bat seq no of this batch monitoring
	 */
	public long getBatSeqNo();

	/**
	 * Sets the bat seq no of this batch monitoring.
	 *
	 * @param batSeqNo the bat seq no of this batch monitoring
	 */
	public void setBatSeqNo(long batSeqNo);

	/**
	 * Returns the bat div of this batch monitoring.
	 *
	 * @return the bat div of this batch monitoring
	 */
	@AutoEscape
	public String getBatDiv();

	/**
	 * Sets the bat div of this batch monitoring.
	 *
	 * @param batDiv the bat div of this batch monitoring
	 */
	public void setBatDiv(String batDiv);

	/**
	 * Returns the manual y n of this batch monitoring.
	 *
	 * @return the manual y n of this batch monitoring
	 */
	@AutoEscape
	public String getManualYN();

	/**
	 * Sets the manual y n of this batch monitoring.
	 *
	 * @param manualYN the manual y n of this batch monitoring
	 */
	public void setManualYN(String manualYN);

	/**
	 * Returns the status of this batch monitoring.
	 *
	 * @return the status of this batch monitoring
	 */
	@AutoEscape
	public String getStatus();

	/**
	 * Sets the status of this batch monitoring.
	 *
	 * @param status the status of this batch monitoring
	 */
	public void setStatus(String status);

	/**
	 * Returns the message of this batch monitoring.
	 *
	 * @return the message of this batch monitoring
	 */
	public String getMessage();

	/**
	 * Returns the localized message of this batch monitoring in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized message of this batch monitoring
	 */
	@AutoEscape
	public String getMessage(Locale locale);

	/**
	 * Returns the localized message of this batch monitoring in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized message of this batch monitoring. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getMessage(Locale locale, boolean useDefault);

	/**
	 * Returns the localized message of this batch monitoring in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized message of this batch monitoring
	 */
	@AutoEscape
	public String getMessage(String languageId);

	/**
	 * Returns the localized message of this batch monitoring in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized message of this batch monitoring
	 */
	@AutoEscape
	public String getMessage(String languageId, boolean useDefault);

	@AutoEscape
	public String getMessageCurrentLanguageId();

	@AutoEscape
	public String getMessageCurrentValue();

	/**
	 * Returns a map of the locales and localized messages of this batch monitoring.
	 *
	 * @return the locales and localized messages of this batch monitoring
	 */
	public Map<Locale, String> getMessageMap();

	/**
	 * Sets the message of this batch monitoring.
	 *
	 * @param message the message of this batch monitoring
	 */
	public void setMessage(String message);

	/**
	 * Sets the localized message of this batch monitoring in the language.
	 *
	 * @param message the localized message of this batch monitoring
	 * @param locale the locale of the language
	 */
	public void setMessage(String message, Locale locale);

	/**
	 * Sets the localized message of this batch monitoring in the language, and sets the default locale.
	 *
	 * @param message the localized message of this batch monitoring
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setMessage(String message, Locale locale, Locale defaultLocale);

	public void setMessageCurrentLanguageId(String languageId);

	/**
	 * Sets the localized messages of this batch monitoring from the map of locales and localized messages.
	 *
	 * @param messageMap the locales and localized messages of this batch monitoring
	 */
	public void setMessageMap(Map<Locale, String> messageMap);

	/**
	 * Sets the localized messages of this batch monitoring from the map of locales and localized messages, and sets the default locale.
	 *
	 * @param messageMap the locales and localized messages of this batch monitoring
	 * @param defaultLocale the default locale
	 */
	public void setMessageMap(Map<Locale, String> messageMap,
		Locale defaultLocale);

	/**
	 * Returns the insert ID of this batch monitoring.
	 *
	 * @return the insert ID of this batch monitoring
	 */
	public long getInsertId();

	/**
	 * Sets the insert ID of this batch monitoring.
	 *
	 * @param insertId the insert ID of this batch monitoring
	 */
	public void setInsertId(long insertId);

	/**
	 * Returns the exe date of this batch monitoring.
	 *
	 * @return the exe date of this batch monitoring
	 */
	public Date getExeDate();

	/**
	 * Sets the exe date of this batch monitoring.
	 *
	 * @param exeDate the exe date of this batch monitoring
	 */
	public void setExeDate(Date exeDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.simulation.model.BatchMonitoring batchMonitoring);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.simulation.model.BatchMonitoring> toCacheModel();

	@Override
	public org.kisti.edison.simulation.model.BatchMonitoring toEscapedModel();

	@Override
	public org.kisti.edison.simulation.model.BatchMonitoring toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}