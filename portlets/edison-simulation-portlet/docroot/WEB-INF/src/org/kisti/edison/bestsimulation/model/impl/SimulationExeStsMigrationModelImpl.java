/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.SimulationExeStsMigration;
import org.kisti.edison.bestsimulation.model.SimulationExeStsMigrationModel;
import org.kisti.edison.bestsimulation.model.SimulationExeStsMigrationSoap;
import org.kisti.edison.bestsimulation.service.persistence.SimulationExeStsMigrationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SimulationExeStsMigration service. Represents a row in the &quot;EDSIM_SimulationExeStsMigration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.SimulationExeStsMigrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimulationExeStsMigrationImpl}.
 * </p>
 *
 * @author EDISON
 * @see SimulationExeStsMigrationImpl
 * @see org.kisti.edison.bestsimulation.model.SimulationExeStsMigration
 * @see org.kisti.edison.bestsimulation.model.SimulationExeStsMigrationModel
 * @generated
 */
@JSON(strict = true)
public class SimulationExeStsMigrationModelImpl extends BaseModelImpl<SimulationExeStsMigration>
	implements SimulationExeStsMigrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a simulation exe sts migration model instance should use the {@link org.kisti.edison.bestsimulation.model.SimulationExeStsMigration} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_SimulationExeStsMigration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scienceAppId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "submitDate", Types.VARCHAR },
			{ "userCnt", Types.BIGINT },
			{ "jobCnt", Types.BIGINT },
			{ "runtime", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_SimulationExeStsMigration (scienceAppId LONG not null,groupId LONG not null,submitDate VARCHAR(75) not null,userCnt LONG,jobCnt LONG,runtime LONG,primary key (scienceAppId, groupId, submitDate))";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_SimulationExeStsMigration";
	public static final String ORDER_BY_JPQL = " ORDER BY simulationExeStsMigration.id.scienceAppId ASC, simulationExeStsMigration.id.groupId ASC, simulationExeStsMigration.id.submitDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_SimulationExeStsMigration.scienceAppId ASC, EDSIM_SimulationExeStsMigration.groupId ASC, EDSIM_SimulationExeStsMigration.submitDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationExeStsMigration"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationExeStsMigration"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SimulationExeStsMigration toModel(
		SimulationExeStsMigrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SimulationExeStsMigration model = new SimulationExeStsMigrationImpl();

		model.setScienceAppId(soapModel.getScienceAppId());
		model.setGroupId(soapModel.getGroupId());
		model.setSubmitDate(soapModel.getSubmitDate());
		model.setUserCnt(soapModel.getUserCnt());
		model.setJobCnt(soapModel.getJobCnt());
		model.setRuntime(soapModel.getRuntime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SimulationExeStsMigration> toModels(
		SimulationExeStsMigrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SimulationExeStsMigration> models = new ArrayList<SimulationExeStsMigration>(soapModels.length);

		for (SimulationExeStsMigrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.SimulationExeStsMigration"));

	public SimulationExeStsMigrationModelImpl() {
	}

	@Override
	public SimulationExeStsMigrationPK getPrimaryKey() {
		return new SimulationExeStsMigrationPK(_scienceAppId, _groupId,
			_submitDate);
	}

	@Override
	public void setPrimaryKey(SimulationExeStsMigrationPK primaryKey) {
		setScienceAppId(primaryKey.scienceAppId);
		setGroupId(primaryKey.groupId);
		setSubmitDate(primaryKey.submitDate);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SimulationExeStsMigrationPK(_scienceAppId, _groupId,
			_submitDate);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SimulationExeStsMigrationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SimulationExeStsMigration.class;
	}

	@Override
	public String getModelClassName() {
		return SimulationExeStsMigration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("groupId", getGroupId());
		attributes.put("submitDate", getSubmitDate());
		attributes.put("userCnt", getUserCnt());
		attributes.put("jobCnt", getJobCnt());
		attributes.put("runtime", getRuntime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String submitDate = (String)attributes.get("submitDate");

		if (submitDate != null) {
			setSubmitDate(submitDate);
		}

		Long userCnt = (Long)attributes.get("userCnt");

		if (userCnt != null) {
			setUserCnt(userCnt);
		}

		Long jobCnt = (Long)attributes.get("jobCnt");

		if (jobCnt != null) {
			setJobCnt(jobCnt);
		}

		Long runtime = (Long)attributes.get("runtime");

		if (runtime != null) {
			setRuntime(runtime);
		}
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getSubmitDate() {
		if (_submitDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _submitDate;
		}
	}

	@Override
	public void setSubmitDate(String submitDate) {
		_submitDate = submitDate;
	}

	@JSON
	@Override
	public long getUserCnt() {
		return _userCnt;
	}

	@Override
	public void setUserCnt(long userCnt) {
		_userCnt = userCnt;
	}

	@JSON
	@Override
	public long getJobCnt() {
		return _jobCnt;
	}

	@Override
	public void setJobCnt(long jobCnt) {
		_jobCnt = jobCnt;
	}

	@JSON
	@Override
	public long getRuntime() {
		return _runtime;
	}

	@Override
	public void setRuntime(long runtime) {
		_runtime = runtime;
	}

	@Override
	public SimulationExeStsMigration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SimulationExeStsMigration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimulationExeStsMigrationImpl simulationExeStsMigrationImpl = new SimulationExeStsMigrationImpl();

		simulationExeStsMigrationImpl.setScienceAppId(getScienceAppId());
		simulationExeStsMigrationImpl.setGroupId(getGroupId());
		simulationExeStsMigrationImpl.setSubmitDate(getSubmitDate());
		simulationExeStsMigrationImpl.setUserCnt(getUserCnt());
		simulationExeStsMigrationImpl.setJobCnt(getJobCnt());
		simulationExeStsMigrationImpl.setRuntime(getRuntime());

		simulationExeStsMigrationImpl.resetOriginalValues();

		return simulationExeStsMigrationImpl;
	}

	@Override
	public int compareTo(SimulationExeStsMigration simulationExeStsMigration) {
		SimulationExeStsMigrationPK primaryKey = simulationExeStsMigration.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SimulationExeStsMigration)) {
			return false;
		}

		SimulationExeStsMigration simulationExeStsMigration = (SimulationExeStsMigration)obj;

		SimulationExeStsMigrationPK primaryKey = simulationExeStsMigration.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SimulationExeStsMigration> toCacheModel() {
		SimulationExeStsMigrationCacheModel simulationExeStsMigrationCacheModel = new SimulationExeStsMigrationCacheModel();

		simulationExeStsMigrationCacheModel.scienceAppId = getScienceAppId();

		simulationExeStsMigrationCacheModel.groupId = getGroupId();

		simulationExeStsMigrationCacheModel.submitDate = getSubmitDate();

		String submitDate = simulationExeStsMigrationCacheModel.submitDate;

		if ((submitDate != null) && (submitDate.length() == 0)) {
			simulationExeStsMigrationCacheModel.submitDate = null;
		}

		simulationExeStsMigrationCacheModel.userCnt = getUserCnt();

		simulationExeStsMigrationCacheModel.jobCnt = getJobCnt();

		simulationExeStsMigrationCacheModel.runtime = getRuntime();

		return simulationExeStsMigrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", submitDate=");
		sb.append(getSubmitDate());
		sb.append(", userCnt=");
		sb.append(getUserCnt());
		sb.append(", jobCnt=");
		sb.append(getJobCnt());
		sb.append(", runtime=");
		sb.append(getRuntime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"org.kisti.edison.bestsimulation.model.SimulationExeStsMigration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitDate</column-name><column-value><![CDATA[");
		sb.append(getSubmitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCnt</column-name><column-value><![CDATA[");
		sb.append(getUserCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobCnt</column-name><column-value><![CDATA[");
		sb.append(getJobCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>runtime</column-name><column-value><![CDATA[");
		sb.append(getRuntime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SimulationExeStsMigration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SimulationExeStsMigration.class
		};
	private long _scienceAppId;
	private long _groupId;
	private String _submitDate;
	private long _userCnt;
	private long _jobCnt;
	private long _runtime;
	private SimulationExeStsMigration _escapedModel;
}