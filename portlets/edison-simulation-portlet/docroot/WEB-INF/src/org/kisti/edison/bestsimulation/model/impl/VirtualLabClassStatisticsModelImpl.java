/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics;
import org.kisti.edison.bestsimulation.model.VirtualLabClassStatisticsModel;
import org.kisti.edison.bestsimulation.model.VirtualLabClassStatisticsSoap;
import org.kisti.edison.bestsimulation.service.persistence.VirtualLabClassStatisticsPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the VirtualLabClassStatistics service. Represents a row in the &quot;EDSIM_VirtualLabClassStatistics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.VirtualLabClassStatisticsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VirtualLabClassStatisticsImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLabClassStatisticsImpl
 * @see org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics
 * @see org.kisti.edison.bestsimulation.model.VirtualLabClassStatisticsModel
 * @generated
 */
@JSON(strict = true)
public class VirtualLabClassStatisticsModelImpl extends BaseModelImpl<VirtualLabClassStatistics>
	implements VirtualLabClassStatisticsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a virtual lab class statistics model instance should use the {@link org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_VirtualLabClassStatistics";
	public static final Object[][] TABLE_COLUMNS = {
			{ "virtualLabId", Types.BIGINT },
			{ "classId", Types.VARCHAR },
			{ "virtualLabTitle", Types.VARCHAR },
			{ "classTitle", Types.VARCHAR },
			{ "virtualLabPersonName", Types.VARCHAR },
			{ "registerStudentCnt", Types.BIGINT },
			{ "virtualLabUsersId", Types.VARCHAR },
			{ "scienceAppId", Types.VARCHAR },
			{ "executeUserCnt", Types.BIGINT },
			{ "executeCnt", Types.BIGINT },
			{ "cputime", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "university", Types.BIGINT },
			{ "classCreateDt", Types.TIMESTAMP },
			{ "virtualLabUseYn", Types.VARCHAR },
			{ "classUseYn", Types.VARCHAR },
			{ "lastModifiedDt", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_VirtualLabClassStatistics (virtualLabId LONG not null,classId VARCHAR(75) not null,virtualLabTitle STRING null,classTitle STRING null,virtualLabPersonName VARCHAR(75) null,registerStudentCnt LONG,virtualLabUsersId VARCHAR(75) null,scienceAppId VARCHAR(75) null,executeUserCnt LONG,executeCnt LONG,cputime VARCHAR(75) null,groupId LONG,university LONG,classCreateDt DATE null,virtualLabUseYn VARCHAR(75) null,classUseYn VARCHAR(75) null,lastModifiedDt DATE null,primary key (virtualLabId, classId))";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_VirtualLabClassStatistics";
	public static final String ORDER_BY_JPQL = " ORDER BY virtualLabClassStatistics.classCreateDt DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_VirtualLabClassStatistics.classCreateDt DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics"),
			true);
	public static long CLASSID_COLUMN_BITMASK = 1L;
	public static long VIRTUALLABID_COLUMN_BITMASK = 2L;
	public static long CLASSCREATEDT_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VirtualLabClassStatistics toModel(
		VirtualLabClassStatisticsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VirtualLabClassStatistics model = new VirtualLabClassStatisticsImpl();

		model.setVirtualLabId(soapModel.getVirtualLabId());
		model.setClassId(soapModel.getClassId());
		model.setVirtualLabTitle(soapModel.getVirtualLabTitle());
		model.setClassTitle(soapModel.getClassTitle());
		model.setVirtualLabPersonName(soapModel.getVirtualLabPersonName());
		model.setRegisterStudentCnt(soapModel.getRegisterStudentCnt());
		model.setVirtualLabUsersId(soapModel.getVirtualLabUsersId());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setExecuteUserCnt(soapModel.getExecuteUserCnt());
		model.setExecuteCnt(soapModel.getExecuteCnt());
		model.setCputime(soapModel.getCputime());
		model.setGroupId(soapModel.getGroupId());
		model.setUniversity(soapModel.getUniversity());
		model.setClassCreateDt(soapModel.getClassCreateDt());
		model.setVirtualLabUseYn(soapModel.getVirtualLabUseYn());
		model.setClassUseYn(soapModel.getClassUseYn());
		model.setLastModifiedDt(soapModel.getLastModifiedDt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VirtualLabClassStatistics> toModels(
		VirtualLabClassStatisticsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VirtualLabClassStatistics> models = new ArrayList<VirtualLabClassStatistics>(soapModels.length);

		for (VirtualLabClassStatisticsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics"));

	public VirtualLabClassStatisticsModelImpl() {
	}

	@Override
	public VirtualLabClassStatisticsPK getPrimaryKey() {
		return new VirtualLabClassStatisticsPK(_virtualLabId, _classId);
	}

	@Override
	public void setPrimaryKey(VirtualLabClassStatisticsPK primaryKey) {
		setVirtualLabId(primaryKey.virtualLabId);
		setClassId(primaryKey.classId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new VirtualLabClassStatisticsPK(_virtualLabId, _classId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((VirtualLabClassStatisticsPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VirtualLabClassStatistics.class;
	}

	@Override
	public String getModelClassName() {
		return VirtualLabClassStatistics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("virtualLabId", getVirtualLabId());
		attributes.put("classId", getClassId());
		attributes.put("virtualLabTitle", getVirtualLabTitle());
		attributes.put("classTitle", getClassTitle());
		attributes.put("virtualLabPersonName", getVirtualLabPersonName());
		attributes.put("registerStudentCnt", getRegisterStudentCnt());
		attributes.put("virtualLabUsersId", getVirtualLabUsersId());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("executeUserCnt", getExecuteUserCnt());
		attributes.put("executeCnt", getExecuteCnt());
		attributes.put("cputime", getCputime());
		attributes.put("groupId", getGroupId());
		attributes.put("university", getUniversity());
		attributes.put("classCreateDt", getClassCreateDt());
		attributes.put("virtualLabUseYn", getVirtualLabUseYn());
		attributes.put("classUseYn", getClassUseYn());
		attributes.put("lastModifiedDt", getLastModifiedDt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long virtualLabId = (Long)attributes.get("virtualLabId");

		if (virtualLabId != null) {
			setVirtualLabId(virtualLabId);
		}

		String classId = (String)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		String virtualLabTitle = (String)attributes.get("virtualLabTitle");

		if (virtualLabTitle != null) {
			setVirtualLabTitle(virtualLabTitle);
		}

		String classTitle = (String)attributes.get("classTitle");

		if (classTitle != null) {
			setClassTitle(classTitle);
		}

		String virtualLabPersonName = (String)attributes.get(
				"virtualLabPersonName");

		if (virtualLabPersonName != null) {
			setVirtualLabPersonName(virtualLabPersonName);
		}

		Long registerStudentCnt = (Long)attributes.get("registerStudentCnt");

		if (registerStudentCnt != null) {
			setRegisterStudentCnt(registerStudentCnt);
		}

		String virtualLabUsersId = (String)attributes.get("virtualLabUsersId");

		if (virtualLabUsersId != null) {
			setVirtualLabUsersId(virtualLabUsersId);
		}

		String scienceAppId = (String)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long executeUserCnt = (Long)attributes.get("executeUserCnt");

		if (executeUserCnt != null) {
			setExecuteUserCnt(executeUserCnt);
		}

		Long executeCnt = (Long)attributes.get("executeCnt");

		if (executeCnt != null) {
			setExecuteCnt(executeCnt);
		}

		String cputime = (String)attributes.get("cputime");

		if (cputime != null) {
			setCputime(cputime);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long university = (Long)attributes.get("university");

		if (university != null) {
			setUniversity(university);
		}

		Date classCreateDt = (Date)attributes.get("classCreateDt");

		if (classCreateDt != null) {
			setClassCreateDt(classCreateDt);
		}

		String virtualLabUseYn = (String)attributes.get("virtualLabUseYn");

		if (virtualLabUseYn != null) {
			setVirtualLabUseYn(virtualLabUseYn);
		}

		String classUseYn = (String)attributes.get("classUseYn");

		if (classUseYn != null) {
			setClassUseYn(classUseYn);
		}

		Date lastModifiedDt = (Date)attributes.get("lastModifiedDt");

		if (lastModifiedDt != null) {
			setLastModifiedDt(lastModifiedDt);
		}
	}

	@JSON
	@Override
	public long getVirtualLabId() {
		return _virtualLabId;
	}

	@Override
	public void setVirtualLabId(long virtualLabId) {
		_columnBitmask |= VIRTUALLABID_COLUMN_BITMASK;

		if (!_setOriginalVirtualLabId) {
			_setOriginalVirtualLabId = true;

			_originalVirtualLabId = _virtualLabId;
		}

		_virtualLabId = virtualLabId;
	}

	public long getOriginalVirtualLabId() {
		return _originalVirtualLabId;
	}

	@JSON
	@Override
	public String getClassId() {
		if (_classId == null) {
			return StringPool.BLANK;
		}
		else {
			return _classId;
		}
	}

	@Override
	public void setClassId(String classId) {
		_columnBitmask |= CLASSID_COLUMN_BITMASK;

		if (_originalClassId == null) {
			_originalClassId = _classId;
		}

		_classId = classId;
	}

	public String getOriginalClassId() {
		return GetterUtil.getString(_originalClassId);
	}

	@JSON
	@Override
	public String getVirtualLabTitle() {
		if (_virtualLabTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabTitle;
		}
	}

	@Override
	public String getVirtualLabTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId);
	}

	@Override
	public String getVirtualLabTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitle(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(), languageId);
	}

	@Override
	public String getVirtualLabTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitleCurrentLanguageId() {
		return _virtualLabTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabTitleCurrentValue() {
		Locale locale = getLocale(_virtualLabTitleCurrentLanguageId);

		return getVirtualLabTitle(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabTitleMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabTitle());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle) {
		_virtualLabTitle = virtualLabTitle;
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale) {
		setVirtualLabTitle(virtualLabTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabTitle)) {
			setVirtualLabTitle(LocalizationUtil.updateLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", virtualLabTitle,
					languageId, defaultLanguageId));
		}
		else {
			setVirtualLabTitle(LocalizationUtil.removeLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", languageId));
		}
	}

	@Override
	public void setVirtualLabTitleCurrentLanguageId(String languageId) {
		_virtualLabTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap) {
		setVirtualLabTitleMap(virtualLabTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap,
		Locale defaultLocale) {
		if (virtualLabTitleMap == null) {
			return;
		}

		setVirtualLabTitle(LocalizationUtil.updateLocalization(
				virtualLabTitleMap, getVirtualLabTitle(), "VirtualLabTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getClassTitle() {
		if (_classTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _classTitle;
		}
	}

	@Override
	public String getClassTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId);
	}

	@Override
	public String getClassTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId, useDefault);
	}

	@Override
	public String getClassTitle(String languageId) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId);
	}

	@Override
	public String getClassTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId,
			useDefault);
	}

	@Override
	public String getClassTitleCurrentLanguageId() {
		return _classTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getClassTitleCurrentValue() {
		Locale locale = getLocale(_classTitleCurrentLanguageId);

		return getClassTitle(locale);
	}

	@Override
	public Map<Locale, String> getClassTitleMap() {
		return LocalizationUtil.getLocalizationMap(getClassTitle());
	}

	@Override
	public void setClassTitle(String classTitle) {
		_classTitle = classTitle;
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale) {
		setClassTitle(classTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(classTitle)) {
			setClassTitle(LocalizationUtil.updateLocalization(getClassTitle(),
					"ClassTitle", classTitle, languageId, defaultLanguageId));
		}
		else {
			setClassTitle(LocalizationUtil.removeLocalization(getClassTitle(),
					"ClassTitle", languageId));
		}
	}

	@Override
	public void setClassTitleCurrentLanguageId(String languageId) {
		_classTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap) {
		setClassTitleMap(classTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap,
		Locale defaultLocale) {
		if (classTitleMap == null) {
			return;
		}

		setClassTitle(LocalizationUtil.updateLocalization(classTitleMap,
				getClassTitle(), "ClassTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVirtualLabPersonName() {
		if (_virtualLabPersonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabPersonName;
		}
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName) {
		_virtualLabPersonName = virtualLabPersonName;
	}

	@JSON
	@Override
	public long getRegisterStudentCnt() {
		return _registerStudentCnt;
	}

	@Override
	public void setRegisterStudentCnt(long registerStudentCnt) {
		_registerStudentCnt = registerStudentCnt;
	}

	@JSON
	@Override
	public String getVirtualLabUsersId() {
		if (_virtualLabUsersId == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabUsersId;
		}
	}

	@Override
	public void setVirtualLabUsersId(String virtualLabUsersId) {
		_virtualLabUsersId = virtualLabUsersId;
	}

	@JSON
	@Override
	public String getScienceAppId() {
		if (_scienceAppId == null) {
			return StringPool.BLANK;
		}
		else {
			return _scienceAppId;
		}
	}

	@Override
	public void setScienceAppId(String scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public long getExecuteUserCnt() {
		return _executeUserCnt;
	}

	@Override
	public void setExecuteUserCnt(long executeUserCnt) {
		_executeUserCnt = executeUserCnt;
	}

	@JSON
	@Override
	public long getExecuteCnt() {
		return _executeCnt;
	}

	@Override
	public void setExecuteCnt(long executeCnt) {
		_executeCnt = executeCnt;
	}

	@JSON
	@Override
	public String getCputime() {
		if (_cputime == null) {
			return StringPool.BLANK;
		}
		else {
			return _cputime;
		}
	}

	@Override
	public void setCputime(String cputime) {
		_cputime = cputime;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUniversity() {
		return _university;
	}

	@Override
	public void setUniversity(long university) {
		_university = university;
	}

	@JSON
	@Override
	public Date getClassCreateDt() {
		return _classCreateDt;
	}

	@Override
	public void setClassCreateDt(Date classCreateDt) {
		_columnBitmask = -1L;

		_classCreateDt = classCreateDt;
	}

	@JSON
	@Override
	public String getVirtualLabUseYn() {
		if (_virtualLabUseYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabUseYn;
		}
	}

	@Override
	public void setVirtualLabUseYn(String virtualLabUseYn) {
		_virtualLabUseYn = virtualLabUseYn;
	}

	@JSON
	@Override
	public String getClassUseYn() {
		if (_classUseYn == null) {
			return StringPool.BLANK;
		}
		else {
			return _classUseYn;
		}
	}

	@Override
	public void setClassUseYn(String classUseYn) {
		_classUseYn = classUseYn;
	}

	@JSON
	@Override
	public Date getLastModifiedDt() {
		return _lastModifiedDt;
	}

	@Override
	public void setLastModifiedDt(Date lastModifiedDt) {
		_lastModifiedDt = lastModifiedDt;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> virtualLabTitleMap = getVirtualLabTitleMap();

		for (Map.Entry<Locale, String> entry : virtualLabTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> classTitleMap = getClassTitleMap();

		for (Map.Entry<Locale, String> entry : classTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getVirtualLabTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String virtualLabTitle = getVirtualLabTitle(defaultLocale);

		if (Validator.isNull(virtualLabTitle)) {
			setVirtualLabTitle(getVirtualLabTitle(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setVirtualLabTitle(getVirtualLabTitle(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String classTitle = getClassTitle(defaultLocale);

		if (Validator.isNull(classTitle)) {
			setClassTitle(getClassTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setClassTitle(getClassTitle(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public VirtualLabClassStatistics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VirtualLabClassStatistics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VirtualLabClassStatisticsImpl virtualLabClassStatisticsImpl = new VirtualLabClassStatisticsImpl();

		virtualLabClassStatisticsImpl.setVirtualLabId(getVirtualLabId());
		virtualLabClassStatisticsImpl.setClassId(getClassId());
		virtualLabClassStatisticsImpl.setVirtualLabTitle(getVirtualLabTitle());
		virtualLabClassStatisticsImpl.setClassTitle(getClassTitle());
		virtualLabClassStatisticsImpl.setVirtualLabPersonName(getVirtualLabPersonName());
		virtualLabClassStatisticsImpl.setRegisterStudentCnt(getRegisterStudentCnt());
		virtualLabClassStatisticsImpl.setVirtualLabUsersId(getVirtualLabUsersId());
		virtualLabClassStatisticsImpl.setScienceAppId(getScienceAppId());
		virtualLabClassStatisticsImpl.setExecuteUserCnt(getExecuteUserCnt());
		virtualLabClassStatisticsImpl.setExecuteCnt(getExecuteCnt());
		virtualLabClassStatisticsImpl.setCputime(getCputime());
		virtualLabClassStatisticsImpl.setGroupId(getGroupId());
		virtualLabClassStatisticsImpl.setUniversity(getUniversity());
		virtualLabClassStatisticsImpl.setClassCreateDt(getClassCreateDt());
		virtualLabClassStatisticsImpl.setVirtualLabUseYn(getVirtualLabUseYn());
		virtualLabClassStatisticsImpl.setClassUseYn(getClassUseYn());
		virtualLabClassStatisticsImpl.setLastModifiedDt(getLastModifiedDt());

		virtualLabClassStatisticsImpl.resetOriginalValues();

		return virtualLabClassStatisticsImpl;
	}

	@Override
	public int compareTo(VirtualLabClassStatistics virtualLabClassStatistics) {
		int value = 0;

		value = DateUtil.compareTo(getClassCreateDt(),
				virtualLabClassStatistics.getClassCreateDt());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VirtualLabClassStatistics)) {
			return false;
		}

		VirtualLabClassStatistics virtualLabClassStatistics = (VirtualLabClassStatistics)obj;

		VirtualLabClassStatisticsPK primaryKey = virtualLabClassStatistics.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		VirtualLabClassStatisticsModelImpl virtualLabClassStatisticsModelImpl = this;

		virtualLabClassStatisticsModelImpl._originalVirtualLabId = virtualLabClassStatisticsModelImpl._virtualLabId;

		virtualLabClassStatisticsModelImpl._setOriginalVirtualLabId = false;

		virtualLabClassStatisticsModelImpl._originalClassId = virtualLabClassStatisticsModelImpl._classId;

		virtualLabClassStatisticsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VirtualLabClassStatistics> toCacheModel() {
		VirtualLabClassStatisticsCacheModel virtualLabClassStatisticsCacheModel = new VirtualLabClassStatisticsCacheModel();

		virtualLabClassStatisticsCacheModel.virtualLabId = getVirtualLabId();

		virtualLabClassStatisticsCacheModel.classId = getClassId();

		String classId = virtualLabClassStatisticsCacheModel.classId;

		if ((classId != null) && (classId.length() == 0)) {
			virtualLabClassStatisticsCacheModel.classId = null;
		}

		virtualLabClassStatisticsCacheModel.virtualLabTitle = getVirtualLabTitle();

		String virtualLabTitle = virtualLabClassStatisticsCacheModel.virtualLabTitle;

		if ((virtualLabTitle != null) && (virtualLabTitle.length() == 0)) {
			virtualLabClassStatisticsCacheModel.virtualLabTitle = null;
		}

		virtualLabClassStatisticsCacheModel.classTitle = getClassTitle();

		String classTitle = virtualLabClassStatisticsCacheModel.classTitle;

		if ((classTitle != null) && (classTitle.length() == 0)) {
			virtualLabClassStatisticsCacheModel.classTitle = null;
		}

		virtualLabClassStatisticsCacheModel.virtualLabPersonName = getVirtualLabPersonName();

		String virtualLabPersonName = virtualLabClassStatisticsCacheModel.virtualLabPersonName;

		if ((virtualLabPersonName != null) &&
				(virtualLabPersonName.length() == 0)) {
			virtualLabClassStatisticsCacheModel.virtualLabPersonName = null;
		}

		virtualLabClassStatisticsCacheModel.registerStudentCnt = getRegisterStudentCnt();

		virtualLabClassStatisticsCacheModel.virtualLabUsersId = getVirtualLabUsersId();

		String virtualLabUsersId = virtualLabClassStatisticsCacheModel.virtualLabUsersId;

		if ((virtualLabUsersId != null) && (virtualLabUsersId.length() == 0)) {
			virtualLabClassStatisticsCacheModel.virtualLabUsersId = null;
		}

		virtualLabClassStatisticsCacheModel.scienceAppId = getScienceAppId();

		String scienceAppId = virtualLabClassStatisticsCacheModel.scienceAppId;

		if ((scienceAppId != null) && (scienceAppId.length() == 0)) {
			virtualLabClassStatisticsCacheModel.scienceAppId = null;
		}

		virtualLabClassStatisticsCacheModel.executeUserCnt = getExecuteUserCnt();

		virtualLabClassStatisticsCacheModel.executeCnt = getExecuteCnt();

		virtualLabClassStatisticsCacheModel.cputime = getCputime();

		String cputime = virtualLabClassStatisticsCacheModel.cputime;

		if ((cputime != null) && (cputime.length() == 0)) {
			virtualLabClassStatisticsCacheModel.cputime = null;
		}

		virtualLabClassStatisticsCacheModel.groupId = getGroupId();

		virtualLabClassStatisticsCacheModel.university = getUniversity();

		Date classCreateDt = getClassCreateDt();

		if (classCreateDt != null) {
			virtualLabClassStatisticsCacheModel.classCreateDt = classCreateDt.getTime();
		}
		else {
			virtualLabClassStatisticsCacheModel.classCreateDt = Long.MIN_VALUE;
		}

		virtualLabClassStatisticsCacheModel.virtualLabUseYn = getVirtualLabUseYn();

		String virtualLabUseYn = virtualLabClassStatisticsCacheModel.virtualLabUseYn;

		if ((virtualLabUseYn != null) && (virtualLabUseYn.length() == 0)) {
			virtualLabClassStatisticsCacheModel.virtualLabUseYn = null;
		}

		virtualLabClassStatisticsCacheModel.classUseYn = getClassUseYn();

		String classUseYn = virtualLabClassStatisticsCacheModel.classUseYn;

		if ((classUseYn != null) && (classUseYn.length() == 0)) {
			virtualLabClassStatisticsCacheModel.classUseYn = null;
		}

		Date lastModifiedDt = getLastModifiedDt();

		if (lastModifiedDt != null) {
			virtualLabClassStatisticsCacheModel.lastModifiedDt = lastModifiedDt.getTime();
		}
		else {
			virtualLabClassStatisticsCacheModel.lastModifiedDt = Long.MIN_VALUE;
		}

		return virtualLabClassStatisticsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{virtualLabId=");
		sb.append(getVirtualLabId());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", virtualLabTitle=");
		sb.append(getVirtualLabTitle());
		sb.append(", classTitle=");
		sb.append(getClassTitle());
		sb.append(", virtualLabPersonName=");
		sb.append(getVirtualLabPersonName());
		sb.append(", registerStudentCnt=");
		sb.append(getRegisterStudentCnt());
		sb.append(", virtualLabUsersId=");
		sb.append(getVirtualLabUsersId());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", executeUserCnt=");
		sb.append(getExecuteUserCnt());
		sb.append(", executeCnt=");
		sb.append(getExecuteCnt());
		sb.append(", cputime=");
		sb.append(getCputime());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", university=");
		sb.append(getUniversity());
		sb.append(", classCreateDt=");
		sb.append(getClassCreateDt());
		sb.append(", virtualLabUseYn=");
		sb.append(getVirtualLabUseYn());
		sb.append(", classUseYn=");
		sb.append(getClassUseYn());
		sb.append(", lastModifiedDt=");
		sb.append(getLastModifiedDt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append(
			"org.kisti.edison.bestsimulation.model.VirtualLabClassStatistics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>virtualLabId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabTitle</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classTitle</column-name><column-value><![CDATA[");
		sb.append(getClassTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabPersonName</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabPersonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerStudentCnt</column-name><column-value><![CDATA[");
		sb.append(getRegisterStudentCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabUsersId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabUsersId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeUserCnt</column-name><column-value><![CDATA[");
		sb.append(getExecuteUserCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeCnt</column-name><column-value><![CDATA[");
		sb.append(getExecuteCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cputime</column-name><column-value><![CDATA[");
		sb.append(getCputime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>university</column-name><column-value><![CDATA[");
		sb.append(getUniversity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classCreateDt</column-name><column-value><![CDATA[");
		sb.append(getClassCreateDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabUseYn</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classUseYn</column-name><column-value><![CDATA[");
		sb.append(getClassUseYn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDt</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VirtualLabClassStatistics.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VirtualLabClassStatistics.class
		};
	private long _virtualLabId;
	private long _originalVirtualLabId;
	private boolean _setOriginalVirtualLabId;
	private String _classId;
	private String _originalClassId;
	private String _virtualLabTitle;
	private String _virtualLabTitleCurrentLanguageId;
	private String _classTitle;
	private String _classTitleCurrentLanguageId;
	private String _virtualLabPersonName;
	private long _registerStudentCnt;
	private String _virtualLabUsersId;
	private String _scienceAppId;
	private long _executeUserCnt;
	private long _executeCnt;
	private String _cputime;
	private long _groupId;
	private long _university;
	private Date _classCreateDt;
	private String _virtualLabUseYn;
	private String _classUseYn;
	private Date _lastModifiedDt;
	private long _columnBitmask;
	private VirtualLabClassStatistics _escapedModel;
}