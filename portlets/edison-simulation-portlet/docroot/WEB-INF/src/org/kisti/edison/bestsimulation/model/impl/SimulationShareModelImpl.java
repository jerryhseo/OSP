/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.SimulationShare;
import org.kisti.edison.bestsimulation.model.SimulationShareModel;
import org.kisti.edison.bestsimulation.model.SimulationShareSoap;
import org.kisti.edison.bestsimulation.service.persistence.SimulationSharePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SimulationShare service. Represents a row in the &quot;EDSIM_SimulationShare&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.SimulationShareModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SimulationShareImpl}.
 * </p>
 *
 * @author EDISON
 * @see SimulationShareImpl
 * @see org.kisti.edison.bestsimulation.model.SimulationShare
 * @see org.kisti.edison.bestsimulation.model.SimulationShareModel
 * @generated
 */
@JSON(strict = true)
public class SimulationShareModelImpl extends BaseModelImpl<SimulationShare>
	implements SimulationShareModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a simulation share model instance should use the {@link org.kisti.edison.bestsimulation.model.SimulationShare} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_SimulationShare";
	public static final Object[][] TABLE_COLUMNS = {
			{ "shareSeqno", Types.BIGINT },
			{ "jobSeqNo", Types.BIGINT },
			{ "jobUuid", Types.VARCHAR },
			{ "simulationUuid", Types.VARCHAR },
			{ "classId", Types.BIGINT },
			{ "customId", Types.BIGINT },
			{ "simulationShareDt", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_SimulationShare (shareSeqno LONG not null,jobSeqNo LONG not null,jobUuid VARCHAR(75) not null,simulationUuid VARCHAR(75) not null,classId LONG,customId LONG,simulationShareDt DATE null,primary key (shareSeqno, jobSeqNo, jobUuid, simulationUuid))";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_SimulationShare";
	public static final String ORDER_BY_JPQL = " ORDER BY simulationShare.id.shareSeqno ASC, simulationShare.id.jobSeqNo ASC, simulationShare.id.jobUuid ASC, simulationShare.id.simulationUuid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_SimulationShare.shareSeqno ASC, EDSIM_SimulationShare.jobSeqNo ASC, EDSIM_SimulationShare.jobUuid ASC, EDSIM_SimulationShare.simulationUuid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationShare"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.SimulationShare"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SimulationShare toModel(SimulationShareSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SimulationShare model = new SimulationShareImpl();

		model.setShareSeqno(soapModel.getShareSeqno());
		model.setJobSeqNo(soapModel.getJobSeqNo());
		model.setJobUuid(soapModel.getJobUuid());
		model.setSimulationUuid(soapModel.getSimulationUuid());
		model.setClassId(soapModel.getClassId());
		model.setCustomId(soapModel.getCustomId());
		model.setSimulationShareDt(soapModel.getSimulationShareDt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SimulationShare> toModels(
		SimulationShareSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SimulationShare> models = new ArrayList<SimulationShare>(soapModels.length);

		for (SimulationShareSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.SimulationShare"));

	public SimulationShareModelImpl() {
	}

	@Override
	public SimulationSharePK getPrimaryKey() {
		return new SimulationSharePK(_shareSeqno, _jobSeqNo, _jobUuid,
			_simulationUuid);
	}

	@Override
	public void setPrimaryKey(SimulationSharePK primaryKey) {
		setShareSeqno(primaryKey.shareSeqno);
		setJobSeqNo(primaryKey.jobSeqNo);
		setJobUuid(primaryKey.jobUuid);
		setSimulationUuid(primaryKey.simulationUuid);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SimulationSharePK(_shareSeqno, _jobSeqNo, _jobUuid,
			_simulationUuid);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SimulationSharePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SimulationShare.class;
	}

	@Override
	public String getModelClassName() {
		return SimulationShare.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("shareSeqno", getShareSeqno());
		attributes.put("jobSeqNo", getJobSeqNo());
		attributes.put("jobUuid", getJobUuid());
		attributes.put("simulationUuid", getSimulationUuid());
		attributes.put("classId", getClassId());
		attributes.put("customId", getCustomId());
		attributes.put("simulationShareDt", getSimulationShareDt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long shareSeqno = (Long)attributes.get("shareSeqno");

		if (shareSeqno != null) {
			setShareSeqno(shareSeqno);
		}

		Long jobSeqNo = (Long)attributes.get("jobSeqNo");

		if (jobSeqNo != null) {
			setJobSeqNo(jobSeqNo);
		}

		String jobUuid = (String)attributes.get("jobUuid");

		if (jobUuid != null) {
			setJobUuid(jobUuid);
		}

		String simulationUuid = (String)attributes.get("simulationUuid");

		if (simulationUuid != null) {
			setSimulationUuid(simulationUuid);
		}

		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		Long customId = (Long)attributes.get("customId");

		if (customId != null) {
			setCustomId(customId);
		}

		Date simulationShareDt = (Date)attributes.get("simulationShareDt");

		if (simulationShareDt != null) {
			setSimulationShareDt(simulationShareDt);
		}
	}

	@JSON
	@Override
	public long getShareSeqno() {
		return _shareSeqno;
	}

	@Override
	public void setShareSeqno(long shareSeqno) {
		_shareSeqno = shareSeqno;
	}

	@JSON
	@Override
	public long getJobSeqNo() {
		return _jobSeqNo;
	}

	@Override
	public void setJobSeqNo(long jobSeqNo) {
		_jobSeqNo = jobSeqNo;
	}

	@JSON
	@Override
	public String getJobUuid() {
		if (_jobUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobUuid;
		}
	}

	@Override
	public void setJobUuid(String jobUuid) {
		_jobUuid = jobUuid;
	}

	@JSON
	@Override
	public String getSimulationUuid() {
		if (_simulationUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _simulationUuid;
		}
	}

	@Override
	public void setSimulationUuid(String simulationUuid) {
		_simulationUuid = simulationUuid;
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_classId = classId;
	}

	@JSON
	@Override
	public long getCustomId() {
		return _customId;
	}

	@Override
	public void setCustomId(long customId) {
		_customId = customId;
	}

	@JSON
	@Override
	public Date getSimulationShareDt() {
		return _simulationShareDt;
	}

	@Override
	public void setSimulationShareDt(Date simulationShareDt) {
		_simulationShareDt = simulationShareDt;
	}

	@Override
	public SimulationShare toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SimulationShare)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SimulationShareImpl simulationShareImpl = new SimulationShareImpl();

		simulationShareImpl.setShareSeqno(getShareSeqno());
		simulationShareImpl.setJobSeqNo(getJobSeqNo());
		simulationShareImpl.setJobUuid(getJobUuid());
		simulationShareImpl.setSimulationUuid(getSimulationUuid());
		simulationShareImpl.setClassId(getClassId());
		simulationShareImpl.setCustomId(getCustomId());
		simulationShareImpl.setSimulationShareDt(getSimulationShareDt());

		simulationShareImpl.resetOriginalValues();

		return simulationShareImpl;
	}

	@Override
	public int compareTo(SimulationShare simulationShare) {
		SimulationSharePK primaryKey = simulationShare.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SimulationShare)) {
			return false;
		}

		SimulationShare simulationShare = (SimulationShare)obj;

		SimulationSharePK primaryKey = simulationShare.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SimulationShare> toCacheModel() {
		SimulationShareCacheModel simulationShareCacheModel = new SimulationShareCacheModel();

		simulationShareCacheModel.shareSeqno = getShareSeqno();

		simulationShareCacheModel.jobSeqNo = getJobSeqNo();

		simulationShareCacheModel.jobUuid = getJobUuid();

		String jobUuid = simulationShareCacheModel.jobUuid;

		if ((jobUuid != null) && (jobUuid.length() == 0)) {
			simulationShareCacheModel.jobUuid = null;
		}

		simulationShareCacheModel.simulationUuid = getSimulationUuid();

		String simulationUuid = simulationShareCacheModel.simulationUuid;

		if ((simulationUuid != null) && (simulationUuid.length() == 0)) {
			simulationShareCacheModel.simulationUuid = null;
		}

		simulationShareCacheModel.classId = getClassId();

		simulationShareCacheModel.customId = getCustomId();

		Date simulationShareDt = getSimulationShareDt();

		if (simulationShareDt != null) {
			simulationShareCacheModel.simulationShareDt = simulationShareDt.getTime();
		}
		else {
			simulationShareCacheModel.simulationShareDt = Long.MIN_VALUE;
		}

		return simulationShareCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{shareSeqno=");
		sb.append(getShareSeqno());
		sb.append(", jobSeqNo=");
		sb.append(getJobSeqNo());
		sb.append(", jobUuid=");
		sb.append(getJobUuid());
		sb.append(", simulationUuid=");
		sb.append(getSimulationUuid());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", customId=");
		sb.append(getCustomId());
		sb.append(", simulationShareDt=");
		sb.append(getSimulationShareDt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.bestsimulation.model.SimulationShare");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>shareSeqno</column-name><column-value><![CDATA[");
		sb.append(getShareSeqno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobSeqNo</column-name><column-value><![CDATA[");
		sb.append(getJobSeqNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobUuid</column-name><column-value><![CDATA[");
		sb.append(getJobUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationUuid</column-name><column-value><![CDATA[");
		sb.append(getSimulationUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customId</column-name><column-value><![CDATA[");
		sb.append(getCustomId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulationShareDt</column-name><column-value><![CDATA[");
		sb.append(getSimulationShareDt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SimulationShare.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SimulationShare.class
		};
	private long _shareSeqno;
	private long _jobSeqNo;
	private String _jobUuid;
	private String _simulationUuid;
	private long _classId;
	private long _customId;
	private Date _simulationShareDt;
	private SimulationShare _escapedModel;
}