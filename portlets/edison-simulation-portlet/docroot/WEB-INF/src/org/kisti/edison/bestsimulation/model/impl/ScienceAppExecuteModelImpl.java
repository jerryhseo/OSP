/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.bestsimulation.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.bestsimulation.model.ScienceAppExecute;
import org.kisti.edison.bestsimulation.model.ScienceAppExecuteModel;
import org.kisti.edison.bestsimulation.model.ScienceAppExecuteSoap;
import org.kisti.edison.bestsimulation.service.persistence.ScienceAppExecutePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ScienceAppExecute service. Represents a row in the &quot;EDSIM_ScienceAppExecute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.bestsimulation.model.ScienceAppExecuteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppExecuteImpl}.
 * </p>
 *
 * @author EDISON
 * @see ScienceAppExecuteImpl
 * @see org.kisti.edison.bestsimulation.model.ScienceAppExecute
 * @see org.kisti.edison.bestsimulation.model.ScienceAppExecuteModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppExecuteModelImpl extends BaseModelImpl<ScienceAppExecute>
	implements ScienceAppExecuteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app execute model instance should use the {@link org.kisti.edison.bestsimulation.model.ScienceAppExecute} interface instead.
	 */
	public static final String TABLE_NAME = "EDSIM_ScienceAppExecute";
	public static final Object[][] TABLE_COLUMNS = {
			{ "executeDate", Types.VARCHAR },
			{ "scienceAppId", Types.BIGINT },
			{ "userCnt", Types.BIGINT },
			{ "avgExeTime", Types.BIGINT },
			{ "exeCnt", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDSIM_ScienceAppExecute (executeDate VARCHAR(75) not null,scienceAppId LONG not null,userCnt LONG,avgExeTime LONG,exeCnt LONG,primary key (executeDate, scienceAppId))";
	public static final String TABLE_SQL_DROP = "drop table EDSIM_ScienceAppExecute";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceAppExecute.id.executeDate ASC, scienceAppExecute.id.scienceAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDSIM_ScienceAppExecute.executeDate ASC, EDSIM_ScienceAppExecute.scienceAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "true";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.bestsimulation.model.ScienceAppExecute"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.bestsimulation.model.ScienceAppExecute"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceAppExecute toModel(ScienceAppExecuteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceAppExecute model = new ScienceAppExecuteImpl();

		model.setExecuteDate(soapModel.getExecuteDate());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setUserCnt(soapModel.getUserCnt());
		model.setAvgExeTime(soapModel.getAvgExeTime());
		model.setExeCnt(soapModel.getExeCnt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceAppExecute> toModels(
		ScienceAppExecuteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceAppExecute> models = new ArrayList<ScienceAppExecute>(soapModels.length);

		for (ScienceAppExecuteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.bestsimulation.model.ScienceAppExecute"));

	public ScienceAppExecuteModelImpl() {
	}

	@Override
	public ScienceAppExecutePK getPrimaryKey() {
		return new ScienceAppExecutePK(_executeDate, _scienceAppId);
	}

	@Override
	public void setPrimaryKey(ScienceAppExecutePK primaryKey) {
		setExecuteDate(primaryKey.executeDate);
		setScienceAppId(primaryKey.scienceAppId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ScienceAppExecutePK(_executeDate, _scienceAppId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ScienceAppExecutePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceAppExecute.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceAppExecute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("executeDate", getExecuteDate());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("userCnt", getUserCnt());
		attributes.put("avgExeTime", getAvgExeTime());
		attributes.put("exeCnt", getExeCnt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String executeDate = (String)attributes.get("executeDate");

		if (executeDate != null) {
			setExecuteDate(executeDate);
		}

		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long userCnt = (Long)attributes.get("userCnt");

		if (userCnt != null) {
			setUserCnt(userCnt);
		}

		Long avgExeTime = (Long)attributes.get("avgExeTime");

		if (avgExeTime != null) {
			setAvgExeTime(avgExeTime);
		}

		Long exeCnt = (Long)attributes.get("exeCnt");

		if (exeCnt != null) {
			setExeCnt(exeCnt);
		}
	}

	@JSON
	@Override
	public String getExecuteDate() {
		if (_executeDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _executeDate;
		}
	}

	@Override
	public void setExecuteDate(String executeDate) {
		_executeDate = executeDate;
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public long getUserCnt() {
		return _userCnt;
	}

	@Override
	public void setUserCnt(long userCnt) {
		_userCnt = userCnt;
	}

	@JSON
	@Override
	public long getAvgExeTime() {
		return _avgExeTime;
	}

	@Override
	public void setAvgExeTime(long avgExeTime) {
		_avgExeTime = avgExeTime;
	}

	@JSON
	@Override
	public long getExeCnt() {
		return _exeCnt;
	}

	@Override
	public void setExeCnt(long exeCnt) {
		_exeCnt = exeCnt;
	}

	@Override
	public ScienceAppExecute toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceAppExecute)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppExecuteImpl scienceAppExecuteImpl = new ScienceAppExecuteImpl();

		scienceAppExecuteImpl.setExecuteDate(getExecuteDate());
		scienceAppExecuteImpl.setScienceAppId(getScienceAppId());
		scienceAppExecuteImpl.setUserCnt(getUserCnt());
		scienceAppExecuteImpl.setAvgExeTime(getAvgExeTime());
		scienceAppExecuteImpl.setExeCnt(getExeCnt());

		scienceAppExecuteImpl.resetOriginalValues();

		return scienceAppExecuteImpl;
	}

	@Override
	public int compareTo(ScienceAppExecute scienceAppExecute) {
		ScienceAppExecutePK primaryKey = scienceAppExecute.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceAppExecute)) {
			return false;
		}

		ScienceAppExecute scienceAppExecute = (ScienceAppExecute)obj;

		ScienceAppExecutePK primaryKey = scienceAppExecute.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ScienceAppExecute> toCacheModel() {
		ScienceAppExecuteCacheModel scienceAppExecuteCacheModel = new ScienceAppExecuteCacheModel();

		scienceAppExecuteCacheModel.executeDate = getExecuteDate();

		String executeDate = scienceAppExecuteCacheModel.executeDate;

		if ((executeDate != null) && (executeDate.length() == 0)) {
			scienceAppExecuteCacheModel.executeDate = null;
		}

		scienceAppExecuteCacheModel.scienceAppId = getScienceAppId();

		scienceAppExecuteCacheModel.userCnt = getUserCnt();

		scienceAppExecuteCacheModel.avgExeTime = getAvgExeTime();

		scienceAppExecuteCacheModel.exeCnt = getExeCnt();

		return scienceAppExecuteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{executeDate=");
		sb.append(getExecuteDate());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", userCnt=");
		sb.append(getUserCnt());
		sb.append(", avgExeTime=");
		sb.append(getAvgExeTime());
		sb.append(", exeCnt=");
		sb.append(getExeCnt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.bestsimulation.model.ScienceAppExecute");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>executeDate</column-name><column-value><![CDATA[");
		sb.append(getExecuteDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCnt</column-name><column-value><![CDATA[");
		sb.append(getUserCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avgExeTime</column-name><column-value><![CDATA[");
		sb.append(getAvgExeTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exeCnt</column-name><column-value><![CDATA[");
		sb.append(getExeCnt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceAppExecute.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceAppExecute.class
		};
	private String _executeDate;
	private long _scienceAppId;
	private long _userCnt;
	private long _avgExeTime;
	private long _exeCnt;
	private ScienceAppExecute _escapedModel;
}