/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration;
import org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigrationModel;
import org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigrationSoap;
import org.kisti.edison.virtuallaboratory.service.persistence.VirtualLabClassStsMigrationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the VirtualLabClassStsMigration service. Represents a row in the &quot;EDVIR_VirtualLabClassStsMigration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VirtualLabClassStsMigrationImpl}.
 * </p>
 *
 * @author EDISON
 * @see VirtualLabClassStsMigrationImpl
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration
 * @see org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigrationModel
 * @generated
 */
@JSON(strict = true)
public class VirtualLabClassStsMigrationModelImpl extends BaseModelImpl<VirtualLabClassStsMigration>
	implements VirtualLabClassStsMigrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a virtual lab class sts migration model instance should use the {@link org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_VirtualLabClassStsMigration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "virtualLabId", Types.BIGINT },
			{ "classId", Types.BIGINT },
			{ "universityField", Types.VARCHAR },
			{ "virtualLabTitle", Types.VARCHAR },
			{ "virtualLabPersonName", Types.VARCHAR },
			{ "classTitle", Types.VARCHAR },
			{ "virtualClassCd", Types.VARCHAR },
			{ "classCreateDt", Types.TIMESTAMP },
			{ "scienceAppId", Types.VARCHAR },
			{ "scienceAppName", Types.VARCHAR },
			{ "registerStudentCnt", Types.BIGINT },
			{ "executeCount", Types.BIGINT },
			{ "executeStudentcount", Types.BIGINT },
			{ "avgerageRuntime", Types.BIGINT },
			{ "cputime", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_VirtualLabClassStsMigration (groupId LONG not null,virtualLabId LONG not null,classId LONG not null,universityField VARCHAR(75) null,virtualLabTitle STRING null,virtualLabPersonName STRING null,classTitle STRING null,virtualClassCd VARCHAR(75) null,classCreateDt DATE null,scienceAppId VARCHAR(75) null,scienceAppName VARCHAR(75) null,registerStudentCnt LONG,executeCount LONG,executeStudentcount LONG,avgerageRuntime LONG,cputime LONG,primary key (groupId, virtualLabId, classId))";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_VirtualLabClassStsMigration";
	public static final String ORDER_BY_JPQL = " ORDER BY virtualLabClassStsMigration.id.groupId ASC, virtualLabClassStsMigration.id.virtualLabId ASC, virtualLabClassStsMigration.id.classId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_VirtualLabClassStsMigration.groupId ASC, EDVIR_VirtualLabClassStsMigration.virtualLabId ASC, EDVIR_VirtualLabClassStsMigration.classId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VirtualLabClassStsMigration toModel(
		VirtualLabClassStsMigrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VirtualLabClassStsMigration model = new VirtualLabClassStsMigrationImpl();

		model.setGroupId(soapModel.getGroupId());
		model.setVirtualLabId(soapModel.getVirtualLabId());
		model.setClassId(soapModel.getClassId());
		model.setUniversityField(soapModel.getUniversityField());
		model.setVirtualLabTitle(soapModel.getVirtualLabTitle());
		model.setVirtualLabPersonName(soapModel.getVirtualLabPersonName());
		model.setClassTitle(soapModel.getClassTitle());
		model.setVirtualClassCd(soapModel.getVirtualClassCd());
		model.setClassCreateDt(soapModel.getClassCreateDt());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setScienceAppName(soapModel.getScienceAppName());
		model.setRegisterStudentCnt(soapModel.getRegisterStudentCnt());
		model.setExecuteCount(soapModel.getExecuteCount());
		model.setExecuteStudentcount(soapModel.getExecuteStudentcount());
		model.setAvgerageRuntime(soapModel.getAvgerageRuntime());
		model.setCputime(soapModel.getCputime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VirtualLabClassStsMigration> toModels(
		VirtualLabClassStsMigrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VirtualLabClassStsMigration> models = new ArrayList<VirtualLabClassStsMigration>(soapModels.length);

		for (VirtualLabClassStsMigrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration"));

	public VirtualLabClassStsMigrationModelImpl() {
	}

	@Override
	public VirtualLabClassStsMigrationPK getPrimaryKey() {
		return new VirtualLabClassStsMigrationPK(_groupId, _virtualLabId,
			_classId);
	}

	@Override
	public void setPrimaryKey(VirtualLabClassStsMigrationPK primaryKey) {
		setGroupId(primaryKey.groupId);
		setVirtualLabId(primaryKey.virtualLabId);
		setClassId(primaryKey.classId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new VirtualLabClassStsMigrationPK(_groupId, _virtualLabId,
			_classId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((VirtualLabClassStsMigrationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return VirtualLabClassStsMigration.class;
	}

	@Override
	public String getModelClassName() {
		return VirtualLabClassStsMigration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("virtualLabId", getVirtualLabId());
		attributes.put("classId", getClassId());
		attributes.put("universityField", getUniversityField());
		attributes.put("virtualLabTitle", getVirtualLabTitle());
		attributes.put("virtualLabPersonName", getVirtualLabPersonName());
		attributes.put("classTitle", getClassTitle());
		attributes.put("virtualClassCd", getVirtualClassCd());
		attributes.put("classCreateDt", getClassCreateDt());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("scienceAppName", getScienceAppName());
		attributes.put("registerStudentCnt", getRegisterStudentCnt());
		attributes.put("executeCount", getExecuteCount());
		attributes.put("executeStudentcount", getExecuteStudentcount());
		attributes.put("avgerageRuntime", getAvgerageRuntime());
		attributes.put("cputime", getCputime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long virtualLabId = (Long)attributes.get("virtualLabId");

		if (virtualLabId != null) {
			setVirtualLabId(virtualLabId);
		}

		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		String universityField = (String)attributes.get("universityField");

		if (universityField != null) {
			setUniversityField(universityField);
		}

		String virtualLabTitle = (String)attributes.get("virtualLabTitle");

		if (virtualLabTitle != null) {
			setVirtualLabTitle(virtualLabTitle);
		}

		String virtualLabPersonName = (String)attributes.get(
				"virtualLabPersonName");

		if (virtualLabPersonName != null) {
			setVirtualLabPersonName(virtualLabPersonName);
		}

		String classTitle = (String)attributes.get("classTitle");

		if (classTitle != null) {
			setClassTitle(classTitle);
		}

		String virtualClassCd = (String)attributes.get("virtualClassCd");

		if (virtualClassCd != null) {
			setVirtualClassCd(virtualClassCd);
		}

		Date classCreateDt = (Date)attributes.get("classCreateDt");

		if (classCreateDt != null) {
			setClassCreateDt(classCreateDt);
		}

		String scienceAppId = (String)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		String scienceAppName = (String)attributes.get("scienceAppName");

		if (scienceAppName != null) {
			setScienceAppName(scienceAppName);
		}

		Long registerStudentCnt = (Long)attributes.get("registerStudentCnt");

		if (registerStudentCnt != null) {
			setRegisterStudentCnt(registerStudentCnt);
		}

		Long executeCount = (Long)attributes.get("executeCount");

		if (executeCount != null) {
			setExecuteCount(executeCount);
		}

		Long executeStudentcount = (Long)attributes.get("executeStudentcount");

		if (executeStudentcount != null) {
			setExecuteStudentcount(executeStudentcount);
		}

		Long avgerageRuntime = (Long)attributes.get("avgerageRuntime");

		if (avgerageRuntime != null) {
			setAvgerageRuntime(avgerageRuntime);
		}

		Long cputime = (Long)attributes.get("cputime");

		if (cputime != null) {
			setCputime(cputime);
		}
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getVirtualLabId() {
		return _virtualLabId;
	}

	@Override
	public void setVirtualLabId(long virtualLabId) {
		_virtualLabId = virtualLabId;
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_classId = classId;
	}

	@JSON
	@Override
	public String getUniversityField() {
		if (_universityField == null) {
			return StringPool.BLANK;
		}
		else {
			return _universityField;
		}
	}

	@Override
	public void setUniversityField(String universityField) {
		_universityField = universityField;
	}

	@JSON
	@Override
	public String getVirtualLabTitle() {
		if (_virtualLabTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabTitle;
		}
	}

	@Override
	public String getVirtualLabTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId);
	}

	@Override
	public String getVirtualLabTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabTitle(languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitle(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(), languageId);
	}

	@Override
	public String getVirtualLabTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabTitle(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabTitleCurrentLanguageId() {
		return _virtualLabTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabTitleCurrentValue() {
		Locale locale = getLocale(_virtualLabTitleCurrentLanguageId);

		return getVirtualLabTitle(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabTitleMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabTitle());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle) {
		_virtualLabTitle = virtualLabTitle;
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale) {
		setVirtualLabTitle(virtualLabTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitle(String virtualLabTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabTitle)) {
			setVirtualLabTitle(LocalizationUtil.updateLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", virtualLabTitle,
					languageId, defaultLanguageId));
		}
		else {
			setVirtualLabTitle(LocalizationUtil.removeLocalization(
					getVirtualLabTitle(), "VirtualLabTitle", languageId));
		}
	}

	@Override
	public void setVirtualLabTitleCurrentLanguageId(String languageId) {
		_virtualLabTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap) {
		setVirtualLabTitleMap(virtualLabTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabTitleMap(Map<Locale, String> virtualLabTitleMap,
		Locale defaultLocale) {
		if (virtualLabTitleMap == null) {
			return;
		}

		setVirtualLabTitle(LocalizationUtil.updateLocalization(
				virtualLabTitleMap, getVirtualLabTitle(), "VirtualLabTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVirtualLabPersonName() {
		if (_virtualLabPersonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualLabPersonName;
		}
	}

	@Override
	public String getVirtualLabPersonName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabPersonName(languageId);
	}

	@Override
	public String getVirtualLabPersonName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getVirtualLabPersonName(languageId, useDefault);
	}

	@Override
	public String getVirtualLabPersonName(String languageId) {
		return LocalizationUtil.getLocalization(getVirtualLabPersonName(),
			languageId);
	}

	@Override
	public String getVirtualLabPersonName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getVirtualLabPersonName(),
			languageId, useDefault);
	}

	@Override
	public String getVirtualLabPersonNameCurrentLanguageId() {
		return _virtualLabPersonNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getVirtualLabPersonNameCurrentValue() {
		Locale locale = getLocale(_virtualLabPersonNameCurrentLanguageId);

		return getVirtualLabPersonName(locale);
	}

	@Override
	public Map<Locale, String> getVirtualLabPersonNameMap() {
		return LocalizationUtil.getLocalizationMap(getVirtualLabPersonName());
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName) {
		_virtualLabPersonName = virtualLabPersonName;
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale) {
		setVirtualLabPersonName(virtualLabPersonName, locale,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabPersonName(String virtualLabPersonName,
		Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(virtualLabPersonName)) {
			setVirtualLabPersonName(LocalizationUtil.updateLocalization(
					getVirtualLabPersonName(), "VirtualLabPersonName",
					virtualLabPersonName, languageId, defaultLanguageId));
		}
		else {
			setVirtualLabPersonName(LocalizationUtil.removeLocalization(
					getVirtualLabPersonName(), "VirtualLabPersonName",
					languageId));
		}
	}

	@Override
	public void setVirtualLabPersonNameCurrentLanguageId(String languageId) {
		_virtualLabPersonNameCurrentLanguageId = languageId;
	}

	@Override
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap) {
		setVirtualLabPersonNameMap(virtualLabPersonNameMap,
			LocaleUtil.getDefault());
	}

	@Override
	public void setVirtualLabPersonNameMap(
		Map<Locale, String> virtualLabPersonNameMap, Locale defaultLocale) {
		if (virtualLabPersonNameMap == null) {
			return;
		}

		setVirtualLabPersonName(LocalizationUtil.updateLocalization(
				virtualLabPersonNameMap, getVirtualLabPersonName(),
				"VirtualLabPersonName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getClassTitle() {
		if (_classTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _classTitle;
		}
	}

	@Override
	public String getClassTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId);
	}

	@Override
	public String getClassTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getClassTitle(languageId, useDefault);
	}

	@Override
	public String getClassTitle(String languageId) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId);
	}

	@Override
	public String getClassTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getClassTitle(), languageId,
			useDefault);
	}

	@Override
	public String getClassTitleCurrentLanguageId() {
		return _classTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getClassTitleCurrentValue() {
		Locale locale = getLocale(_classTitleCurrentLanguageId);

		return getClassTitle(locale);
	}

	@Override
	public Map<Locale, String> getClassTitleMap() {
		return LocalizationUtil.getLocalizationMap(getClassTitle());
	}

	@Override
	public void setClassTitle(String classTitle) {
		_classTitle = classTitle;
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale) {
		setClassTitle(classTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitle(String classTitle, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(classTitle)) {
			setClassTitle(LocalizationUtil.updateLocalization(getClassTitle(),
					"ClassTitle", classTitle, languageId, defaultLanguageId));
		}
		else {
			setClassTitle(LocalizationUtil.removeLocalization(getClassTitle(),
					"ClassTitle", languageId));
		}
	}

	@Override
	public void setClassTitleCurrentLanguageId(String languageId) {
		_classTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap) {
		setClassTitleMap(classTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setClassTitleMap(Map<Locale, String> classTitleMap,
		Locale defaultLocale) {
		if (classTitleMap == null) {
			return;
		}

		setClassTitle(LocalizationUtil.updateLocalization(classTitleMap,
				getClassTitle(), "ClassTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVirtualClassCd() {
		if (_virtualClassCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _virtualClassCd;
		}
	}

	@Override
	public void setVirtualClassCd(String virtualClassCd) {
		_virtualClassCd = virtualClassCd;
	}

	@JSON
	@Override
	public Date getClassCreateDt() {
		return _classCreateDt;
	}

	@Override
	public void setClassCreateDt(Date classCreateDt) {
		_classCreateDt = classCreateDt;
	}

	@JSON
	@Override
	public String getScienceAppId() {
		if (_scienceAppId == null) {
			return StringPool.BLANK;
		}
		else {
			return _scienceAppId;
		}
	}

	@Override
	public void setScienceAppId(String scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public String getScienceAppName() {
		if (_scienceAppName == null) {
			return StringPool.BLANK;
		}
		else {
			return _scienceAppName;
		}
	}

	@Override
	public void setScienceAppName(String scienceAppName) {
		_scienceAppName = scienceAppName;
	}

	@JSON
	@Override
	public long getRegisterStudentCnt() {
		return _registerStudentCnt;
	}

	@Override
	public void setRegisterStudentCnt(long registerStudentCnt) {
		_registerStudentCnt = registerStudentCnt;
	}

	@JSON
	@Override
	public long getExecuteCount() {
		return _executeCount;
	}

	@Override
	public void setExecuteCount(long executeCount) {
		_executeCount = executeCount;
	}

	@JSON
	@Override
	public long getExecuteStudentcount() {
		return _executeStudentcount;
	}

	@Override
	public void setExecuteStudentcount(long executeStudentcount) {
		_executeStudentcount = executeStudentcount;
	}

	@JSON
	@Override
	public long getAvgerageRuntime() {
		return _avgerageRuntime;
	}

	@Override
	public void setAvgerageRuntime(long avgerageRuntime) {
		_avgerageRuntime = avgerageRuntime;
	}

	@JSON
	@Override
	public long getCputime() {
		return _cputime;
	}

	@Override
	public void setCputime(long cputime) {
		_cputime = cputime;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> virtualLabTitleMap = getVirtualLabTitleMap();

		for (Map.Entry<Locale, String> entry : virtualLabTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> virtualLabPersonNameMap = getVirtualLabPersonNameMap();

		for (Map.Entry<Locale, String> entry : virtualLabPersonNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> classTitleMap = getClassTitleMap();

		for (Map.Entry<Locale, String> entry : classTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getVirtualLabTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String virtualLabTitle = getVirtualLabTitle(defaultLocale);

		if (Validator.isNull(virtualLabTitle)) {
			setVirtualLabTitle(getVirtualLabTitle(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setVirtualLabTitle(getVirtualLabTitle(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String virtualLabPersonName = getVirtualLabPersonName(defaultLocale);

		if (Validator.isNull(virtualLabPersonName)) {
			setVirtualLabPersonName(getVirtualLabPersonName(
					modelDefaultLanguageId), defaultLocale);
		}
		else {
			setVirtualLabPersonName(getVirtualLabPersonName(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String classTitle = getClassTitle(defaultLocale);

		if (Validator.isNull(classTitle)) {
			setClassTitle(getClassTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setClassTitle(getClassTitle(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public VirtualLabClassStsMigration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VirtualLabClassStsMigration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VirtualLabClassStsMigrationImpl virtualLabClassStsMigrationImpl = new VirtualLabClassStsMigrationImpl();

		virtualLabClassStsMigrationImpl.setGroupId(getGroupId());
		virtualLabClassStsMigrationImpl.setVirtualLabId(getVirtualLabId());
		virtualLabClassStsMigrationImpl.setClassId(getClassId());
		virtualLabClassStsMigrationImpl.setUniversityField(getUniversityField());
		virtualLabClassStsMigrationImpl.setVirtualLabTitle(getVirtualLabTitle());
		virtualLabClassStsMigrationImpl.setVirtualLabPersonName(getVirtualLabPersonName());
		virtualLabClassStsMigrationImpl.setClassTitle(getClassTitle());
		virtualLabClassStsMigrationImpl.setVirtualClassCd(getVirtualClassCd());
		virtualLabClassStsMigrationImpl.setClassCreateDt(getClassCreateDt());
		virtualLabClassStsMigrationImpl.setScienceAppId(getScienceAppId());
		virtualLabClassStsMigrationImpl.setScienceAppName(getScienceAppName());
		virtualLabClassStsMigrationImpl.setRegisterStudentCnt(getRegisterStudentCnt());
		virtualLabClassStsMigrationImpl.setExecuteCount(getExecuteCount());
		virtualLabClassStsMigrationImpl.setExecuteStudentcount(getExecuteStudentcount());
		virtualLabClassStsMigrationImpl.setAvgerageRuntime(getAvgerageRuntime());
		virtualLabClassStsMigrationImpl.setCputime(getCputime());

		virtualLabClassStsMigrationImpl.resetOriginalValues();

		return virtualLabClassStsMigrationImpl;
	}

	@Override
	public int compareTo(
		VirtualLabClassStsMigration virtualLabClassStsMigration) {
		VirtualLabClassStsMigrationPK primaryKey = virtualLabClassStsMigration.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VirtualLabClassStsMigration)) {
			return false;
		}

		VirtualLabClassStsMigration virtualLabClassStsMigration = (VirtualLabClassStsMigration)obj;

		VirtualLabClassStsMigrationPK primaryKey = virtualLabClassStsMigration.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VirtualLabClassStsMigration> toCacheModel() {
		VirtualLabClassStsMigrationCacheModel virtualLabClassStsMigrationCacheModel =
			new VirtualLabClassStsMigrationCacheModel();

		virtualLabClassStsMigrationCacheModel.groupId = getGroupId();

		virtualLabClassStsMigrationCacheModel.virtualLabId = getVirtualLabId();

		virtualLabClassStsMigrationCacheModel.classId = getClassId();

		virtualLabClassStsMigrationCacheModel.universityField = getUniversityField();

		String universityField = virtualLabClassStsMigrationCacheModel.universityField;

		if ((universityField != null) && (universityField.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.universityField = null;
		}

		virtualLabClassStsMigrationCacheModel.virtualLabTitle = getVirtualLabTitle();

		String virtualLabTitle = virtualLabClassStsMigrationCacheModel.virtualLabTitle;

		if ((virtualLabTitle != null) && (virtualLabTitle.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.virtualLabTitle = null;
		}

		virtualLabClassStsMigrationCacheModel.virtualLabPersonName = getVirtualLabPersonName();

		String virtualLabPersonName = virtualLabClassStsMigrationCacheModel.virtualLabPersonName;

		if ((virtualLabPersonName != null) &&
				(virtualLabPersonName.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.virtualLabPersonName = null;
		}

		virtualLabClassStsMigrationCacheModel.classTitle = getClassTitle();

		String classTitle = virtualLabClassStsMigrationCacheModel.classTitle;

		if ((classTitle != null) && (classTitle.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.classTitle = null;
		}

		virtualLabClassStsMigrationCacheModel.virtualClassCd = getVirtualClassCd();

		String virtualClassCd = virtualLabClassStsMigrationCacheModel.virtualClassCd;

		if ((virtualClassCd != null) && (virtualClassCd.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.virtualClassCd = null;
		}

		Date classCreateDt = getClassCreateDt();

		if (classCreateDt != null) {
			virtualLabClassStsMigrationCacheModel.classCreateDt = classCreateDt.getTime();
		}
		else {
			virtualLabClassStsMigrationCacheModel.classCreateDt = Long.MIN_VALUE;
		}

		virtualLabClassStsMigrationCacheModel.scienceAppId = getScienceAppId();

		String scienceAppId = virtualLabClassStsMigrationCacheModel.scienceAppId;

		if ((scienceAppId != null) && (scienceAppId.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.scienceAppId = null;
		}

		virtualLabClassStsMigrationCacheModel.scienceAppName = getScienceAppName();

		String scienceAppName = virtualLabClassStsMigrationCacheModel.scienceAppName;

		if ((scienceAppName != null) && (scienceAppName.length() == 0)) {
			virtualLabClassStsMigrationCacheModel.scienceAppName = null;
		}

		virtualLabClassStsMigrationCacheModel.registerStudentCnt = getRegisterStudentCnt();

		virtualLabClassStsMigrationCacheModel.executeCount = getExecuteCount();

		virtualLabClassStsMigrationCacheModel.executeStudentcount = getExecuteStudentcount();

		virtualLabClassStsMigrationCacheModel.avgerageRuntime = getAvgerageRuntime();

		virtualLabClassStsMigrationCacheModel.cputime = getCputime();

		return virtualLabClassStsMigrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", virtualLabId=");
		sb.append(getVirtualLabId());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", universityField=");
		sb.append(getUniversityField());
		sb.append(", virtualLabTitle=");
		sb.append(getVirtualLabTitle());
		sb.append(", virtualLabPersonName=");
		sb.append(getVirtualLabPersonName());
		sb.append(", classTitle=");
		sb.append(getClassTitle());
		sb.append(", virtualClassCd=");
		sb.append(getVirtualClassCd());
		sb.append(", classCreateDt=");
		sb.append(getClassCreateDt());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", scienceAppName=");
		sb.append(getScienceAppName());
		sb.append(", registerStudentCnt=");
		sb.append(getRegisterStudentCnt());
		sb.append(", executeCount=");
		sb.append(getExecuteCount());
		sb.append(", executeStudentcount=");
		sb.append(getExecuteStudentcount());
		sb.append(", avgerageRuntime=");
		sb.append(getAvgerageRuntime());
		sb.append(", cputime=");
		sb.append(getCputime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append(
			"org.kisti.edison.virtuallaboratory.model.VirtualLabClassStsMigration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabId</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>universityField</column-name><column-value><![CDATA[");
		sb.append(getUniversityField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabTitle</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualLabPersonName</column-name><column-value><![CDATA[");
		sb.append(getVirtualLabPersonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classTitle</column-name><column-value><![CDATA[");
		sb.append(getClassTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualClassCd</column-name><column-value><![CDATA[");
		sb.append(getVirtualClassCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classCreateDt</column-name><column-value><![CDATA[");
		sb.append(getClassCreateDt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppName</column-name><column-value><![CDATA[");
		sb.append(getScienceAppName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerStudentCnt</column-name><column-value><![CDATA[");
		sb.append(getRegisterStudentCnt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeCount</column-name><column-value><![CDATA[");
		sb.append(getExecuteCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>executeStudentcount</column-name><column-value><![CDATA[");
		sb.append(getExecuteStudentcount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avgerageRuntime</column-name><column-value><![CDATA[");
		sb.append(getAvgerageRuntime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cputime</column-name><column-value><![CDATA[");
		sb.append(getCputime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VirtualLabClassStsMigration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VirtualLabClassStsMigration.class
		};
	private long _groupId;
	private long _virtualLabId;
	private long _classId;
	private String _universityField;
	private String _virtualLabTitle;
	private String _virtualLabTitleCurrentLanguageId;
	private String _virtualLabPersonName;
	private String _virtualLabPersonNameCurrentLanguageId;
	private String _classTitle;
	private String _classTitleCurrentLanguageId;
	private String _virtualClassCd;
	private Date _classCreateDt;
	private String _scienceAppId;
	private String _scienceAppName;
	private long _registerStudentCnt;
	private long _executeCount;
	private long _executeStudentcount;
	private long _avgerageRuntime;
	private long _cputime;
	private VirtualLabClassStsMigration _escapedModel;
}