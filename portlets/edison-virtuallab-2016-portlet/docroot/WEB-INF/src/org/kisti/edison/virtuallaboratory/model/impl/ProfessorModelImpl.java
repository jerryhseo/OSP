/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.Professor;
import org.kisti.edison.virtuallaboratory.model.ProfessorModel;
import org.kisti.edison.virtuallaboratory.model.ProfessorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Professor service. Represents a row in the &quot;EDVIR_Professor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.ProfessorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfessorImpl}.
 * </p>
 *
 * @author EDISON
 * @see ProfessorImpl
 * @see org.kisti.edison.virtuallaboratory.model.Professor
 * @see org.kisti.edison.virtuallaboratory.model.ProfessorModel
 * @generated
 */
@JSON(strict = true)
public class ProfessorModelImpl extends BaseModelImpl<Professor>
	implements ProfessorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a professor model instance should use the {@link org.kisti.edison.virtuallaboratory.model.Professor} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_Professor";
	public static final Object[][] TABLE_COLUMNS = {
			{ "professorSeq", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "record", Types.VARCHAR },
			{ "paper", Types.VARCHAR },
			{ "homepage", Types.VARCHAR },
			{ "introduce", Types.VARCHAR },
			{ "phone", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_Professor (professorSeq LONG not null primary key,userId LONG,record STRING null,paper STRING null,homepage VARCHAR(75) null,introduce STRING null,phone VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_Professor";
	public static final String ORDER_BY_JPQL = " ORDER BY professor.professorSeq ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_Professor.professorSeq ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.Professor"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.Professor"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.virtuallaboratory.model.Professor"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long PROFESSORSEQ_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Professor toModel(ProfessorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Professor model = new ProfessorImpl();

		model.setProfessorSeq(soapModel.getProfessorSeq());
		model.setUserId(soapModel.getUserId());
		model.setRecord(soapModel.getRecord());
		model.setPaper(soapModel.getPaper());
		model.setHomepage(soapModel.getHomepage());
		model.setIntroduce(soapModel.getIntroduce());
		model.setPhone(soapModel.getPhone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Professor> toModels(ProfessorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Professor> models = new ArrayList<Professor>(soapModels.length);

		for (ProfessorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.Professor"));

	public ProfessorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _professorSeq;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProfessorSeq(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _professorSeq;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Professor.class;
	}

	@Override
	public String getModelClassName() {
		return Professor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("professorSeq", getProfessorSeq());
		attributes.put("userId", getUserId());
		attributes.put("record", getRecord());
		attributes.put("paper", getPaper());
		attributes.put("homepage", getHomepage());
		attributes.put("introduce", getIntroduce());
		attributes.put("phone", getPhone());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long professorSeq = (Long)attributes.get("professorSeq");

		if (professorSeq != null) {
			setProfessorSeq(professorSeq);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String record = (String)attributes.get("record");

		if (record != null) {
			setRecord(record);
		}

		String paper = (String)attributes.get("paper");

		if (paper != null) {
			setPaper(paper);
		}

		String homepage = (String)attributes.get("homepage");

		if (homepage != null) {
			setHomepage(homepage);
		}

		String introduce = (String)attributes.get("introduce");

		if (introduce != null) {
			setIntroduce(introduce);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}
	}

	@JSON
	@Override
	public long getProfessorSeq() {
		return _professorSeq;
	}

	@Override
	public void setProfessorSeq(long professorSeq) {
		_professorSeq = professorSeq;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getRecord() {
		if (_record == null) {
			return StringPool.BLANK;
		}
		else {
			return _record;
		}
	}

	@Override
	public String getRecord(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRecord(languageId);
	}

	@Override
	public String getRecord(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getRecord(languageId, useDefault);
	}

	@Override
	public String getRecord(String languageId) {
		return LocalizationUtil.getLocalization(getRecord(), languageId);
	}

	@Override
	public String getRecord(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getRecord(), languageId,
			useDefault);
	}

	@Override
	public String getRecordCurrentLanguageId() {
		return _recordCurrentLanguageId;
	}

	@JSON
	@Override
	public String getRecordCurrentValue() {
		Locale locale = getLocale(_recordCurrentLanguageId);

		return getRecord(locale);
	}

	@Override
	public Map<Locale, String> getRecordMap() {
		return LocalizationUtil.getLocalizationMap(getRecord());
	}

	@Override
	public void setRecord(String record) {
		_record = record;
	}

	@Override
	public void setRecord(String record, Locale locale) {
		setRecord(record, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setRecord(String record, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(record)) {
			setRecord(LocalizationUtil.updateLocalization(getRecord(),
					"Record", record, languageId, defaultLanguageId));
		}
		else {
			setRecord(LocalizationUtil.removeLocalization(getRecord(),
					"Record", languageId));
		}
	}

	@Override
	public void setRecordCurrentLanguageId(String languageId) {
		_recordCurrentLanguageId = languageId;
	}

	@Override
	public void setRecordMap(Map<Locale, String> recordMap) {
		setRecordMap(recordMap, LocaleUtil.getDefault());
	}

	@Override
	public void setRecordMap(Map<Locale, String> recordMap, Locale defaultLocale) {
		if (recordMap == null) {
			return;
		}

		setRecord(LocalizationUtil.updateLocalization(recordMap, getRecord(),
				"Record", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPaper() {
		if (_paper == null) {
			return StringPool.BLANK;
		}
		else {
			return _paper;
		}
	}

	@Override
	public String getPaper(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaper(languageId);
	}

	@Override
	public String getPaper(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPaper(languageId, useDefault);
	}

	@Override
	public String getPaper(String languageId) {
		return LocalizationUtil.getLocalization(getPaper(), languageId);
	}

	@Override
	public String getPaper(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPaper(), languageId,
			useDefault);
	}

	@Override
	public String getPaperCurrentLanguageId() {
		return _paperCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPaperCurrentValue() {
		Locale locale = getLocale(_paperCurrentLanguageId);

		return getPaper(locale);
	}

	@Override
	public Map<Locale, String> getPaperMap() {
		return LocalizationUtil.getLocalizationMap(getPaper());
	}

	@Override
	public void setPaper(String paper) {
		_paper = paper;
	}

	@Override
	public void setPaper(String paper, Locale locale) {
		setPaper(paper, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setPaper(String paper, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(paper)) {
			setPaper(LocalizationUtil.updateLocalization(getPaper(), "Paper",
					paper, languageId, defaultLanguageId));
		}
		else {
			setPaper(LocalizationUtil.removeLocalization(getPaper(), "Paper",
					languageId));
		}
	}

	@Override
	public void setPaperCurrentLanguageId(String languageId) {
		_paperCurrentLanguageId = languageId;
	}

	@Override
	public void setPaperMap(Map<Locale, String> paperMap) {
		setPaperMap(paperMap, LocaleUtil.getDefault());
	}

	@Override
	public void setPaperMap(Map<Locale, String> paperMap, Locale defaultLocale) {
		if (paperMap == null) {
			return;
		}

		setPaper(LocalizationUtil.updateLocalization(paperMap, getPaper(),
				"Paper", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getHomepage() {
		if (_homepage == null) {
			return StringPool.BLANK;
		}
		else {
			return _homepage;
		}
	}

	@Override
	public void setHomepage(String homepage) {
		_homepage = homepage;
	}

	@JSON
	@Override
	public String getIntroduce() {
		if (_introduce == null) {
			return StringPool.BLANK;
		}
		else {
			return _introduce;
		}
	}

	@Override
	public String getIntroduce(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIntroduce(languageId);
	}

	@Override
	public String getIntroduce(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIntroduce(languageId, useDefault);
	}

	@Override
	public String getIntroduce(String languageId) {
		return LocalizationUtil.getLocalization(getIntroduce(), languageId);
	}

	@Override
	public String getIntroduce(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getIntroduce(), languageId,
			useDefault);
	}

	@Override
	public String getIntroduceCurrentLanguageId() {
		return _introduceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getIntroduceCurrentValue() {
		Locale locale = getLocale(_introduceCurrentLanguageId);

		return getIntroduce(locale);
	}

	@Override
	public Map<Locale, String> getIntroduceMap() {
		return LocalizationUtil.getLocalizationMap(getIntroduce());
	}

	@Override
	public void setIntroduce(String introduce) {
		_introduce = introduce;
	}

	@Override
	public void setIntroduce(String introduce, Locale locale) {
		setIntroduce(introduce, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setIntroduce(String introduce, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(introduce)) {
			setIntroduce(LocalizationUtil.updateLocalization(getIntroduce(),
					"Introduce", introduce, languageId, defaultLanguageId));
		}
		else {
			setIntroduce(LocalizationUtil.removeLocalization(getIntroduce(),
					"Introduce", languageId));
		}
	}

	@Override
	public void setIntroduceCurrentLanguageId(String languageId) {
		_introduceCurrentLanguageId = languageId;
	}

	@Override
	public void setIntroduceMap(Map<Locale, String> introduceMap) {
		setIntroduceMap(introduceMap, LocaleUtil.getDefault());
	}

	@Override
	public void setIntroduceMap(Map<Locale, String> introduceMap,
		Locale defaultLocale) {
		if (introduceMap == null) {
			return;
		}

		setIntroduce(LocalizationUtil.updateLocalization(introduceMap,
				getIntroduce(), "Introduce",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Professor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> recordMap = getRecordMap();

		for (Map.Entry<Locale, String> entry : recordMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> paperMap = getPaperMap();

		for (Map.Entry<Locale, String> entry : paperMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> introduceMap = getIntroduceMap();

		for (Map.Entry<Locale, String> entry : introduceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getRecord();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String record = getRecord(defaultLocale);

		if (Validator.isNull(record)) {
			setRecord(getRecord(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setRecord(getRecord(defaultLocale), defaultLocale, defaultLocale);
		}

		String paper = getPaper(defaultLocale);

		if (Validator.isNull(paper)) {
			setPaper(getPaper(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPaper(getPaper(defaultLocale), defaultLocale, defaultLocale);
		}

		String introduce = getIntroduce(defaultLocale);

		if (Validator.isNull(introduce)) {
			setIntroduce(getIntroduce(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setIntroduce(getIntroduce(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Professor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Professor)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProfessorImpl professorImpl = new ProfessorImpl();

		professorImpl.setProfessorSeq(getProfessorSeq());
		professorImpl.setUserId(getUserId());
		professorImpl.setRecord(getRecord());
		professorImpl.setPaper(getPaper());
		professorImpl.setHomepage(getHomepage());
		professorImpl.setIntroduce(getIntroduce());
		professorImpl.setPhone(getPhone());

		professorImpl.resetOriginalValues();

		return professorImpl;
	}

	@Override
	public int compareTo(Professor professor) {
		long primaryKey = professor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Professor)) {
			return false;
		}

		Professor professor = (Professor)obj;

		long primaryKey = professor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProfessorModelImpl professorModelImpl = this;

		professorModelImpl._originalUserId = professorModelImpl._userId;

		professorModelImpl._setOriginalUserId = false;

		professorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Professor> toCacheModel() {
		ProfessorCacheModel professorCacheModel = new ProfessorCacheModel();

		professorCacheModel.professorSeq = getProfessorSeq();

		professorCacheModel.userId = getUserId();

		professorCacheModel.record = getRecord();

		String record = professorCacheModel.record;

		if ((record != null) && (record.length() == 0)) {
			professorCacheModel.record = null;
		}

		professorCacheModel.paper = getPaper();

		String paper = professorCacheModel.paper;

		if ((paper != null) && (paper.length() == 0)) {
			professorCacheModel.paper = null;
		}

		professorCacheModel.homepage = getHomepage();

		String homepage = professorCacheModel.homepage;

		if ((homepage != null) && (homepage.length() == 0)) {
			professorCacheModel.homepage = null;
		}

		professorCacheModel.introduce = getIntroduce();

		String introduce = professorCacheModel.introduce;

		if ((introduce != null) && (introduce.length() == 0)) {
			professorCacheModel.introduce = null;
		}

		professorCacheModel.phone = getPhone();

		String phone = professorCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			professorCacheModel.phone = null;
		}

		return professorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{professorSeq=");
		sb.append(getProfessorSeq());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", record=");
		sb.append(getRecord());
		sb.append(", paper=");
		sb.append(getPaper());
		sb.append(", homepage=");
		sb.append(getHomepage());
		sb.append(", introduce=");
		sb.append(getIntroduce());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.Professor");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>professorSeq</column-name><column-value><![CDATA[");
		sb.append(getProfessorSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>record</column-name><column-value><![CDATA[");
		sb.append(getRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paper</column-name><column-value><![CDATA[");
		sb.append(getPaper());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homepage</column-name><column-value><![CDATA[");
		sb.append(getHomepage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>introduce</column-name><column-value><![CDATA[");
		sb.append(getIntroduce());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Professor.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Professor.class
		};
	private long _professorSeq;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _record;
	private String _recordCurrentLanguageId;
	private String _paper;
	private String _paperCurrentLanguageId;
	private String _homepage;
	private String _introduce;
	private String _introduceCurrentLanguageId;
	private String _phone;
	private long _columnBitmask;
	private Professor _escapedModel;
}