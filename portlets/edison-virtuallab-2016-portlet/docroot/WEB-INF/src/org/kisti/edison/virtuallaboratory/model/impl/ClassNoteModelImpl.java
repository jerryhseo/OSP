/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.kisti.edison.virtuallaboratory.model.ClassNote;
import org.kisti.edison.virtuallaboratory.model.ClassNoteModel;
import org.kisti.edison.virtuallaboratory.model.ClassNoteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ClassNote service. Represents a row in the &quot;EDVIR_ClassNote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.kisti.edison.virtuallaboratory.model.ClassNoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClassNoteImpl}.
 * </p>
 *
 * @author EDISON
 * @see ClassNoteImpl
 * @see org.kisti.edison.virtuallaboratory.model.ClassNote
 * @see org.kisti.edison.virtuallaboratory.model.ClassNoteModel
 * @generated
 */
@JSON(strict = true)
public class ClassNoteModelImpl extends BaseModelImpl<ClassNote>
	implements ClassNoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a class note model instance should use the {@link org.kisti.edison.virtuallaboratory.model.ClassNote} interface instead.
	 */
	public static final String TABLE_NAME = "EDVIR_ClassNote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "classNoteSeq", Types.BIGINT },
			{ "classId", Types.BIGINT },
			{ "contentSeq", Types.BIGINT },
			{ "isContent", Types.VARCHAR },
			{ "fileEntryId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "insertDate", Types.TIMESTAMP },
			{ "updateDate", Types.TIMESTAMP },
			{ "insertId", Types.BIGINT },
			{ "updateId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EDVIR_ClassNote (classNoteSeq LONG not null primary key,classId LONG,contentSeq LONG,isContent VARCHAR(75) null,fileEntryId LONG,description STRING null,insertDate DATE null,updateDate DATE null,insertId LONG,updateId LONG)";
	public static final String TABLE_SQL_DROP = "drop table EDVIR_ClassNote";
	public static final String ORDER_BY_JPQL = " ORDER BY classNote.classNoteSeq ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EDVIR_ClassNote.classNoteSeq ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.kisti.edison.virtuallaboratory.model.ClassNote"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.kisti.edison.virtuallaboratory.model.ClassNote"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.kisti.edison.virtuallaboratory.model.ClassNote"),
			true);
	public static long CLASSID_COLUMN_BITMASK = 1L;
	public static long CONTENTSEQ_COLUMN_BITMASK = 2L;
	public static long ISCONTENT_COLUMN_BITMASK = 4L;
	public static long CLASSNOTESEQ_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ClassNote toModel(ClassNoteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ClassNote model = new ClassNoteImpl();

		model.setClassNoteSeq(soapModel.getClassNoteSeq());
		model.setClassId(soapModel.getClassId());
		model.setContentSeq(soapModel.getContentSeq());
		model.setIsContent(soapModel.getIsContent());
		model.setFileEntryId(soapModel.getFileEntryId());
		model.setDescription(soapModel.getDescription());
		model.setInsertDate(soapModel.getInsertDate());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setInsertId(soapModel.getInsertId());
		model.setUpdateId(soapModel.getUpdateId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ClassNote> toModels(ClassNoteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ClassNote> models = new ArrayList<ClassNote>(soapModels.length);

		for (ClassNoteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.kisti.edison.virtuallaboratory.model.ClassNote"));

	public ClassNoteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _classNoteSeq;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClassNoteSeq(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _classNoteSeq;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClassNote.class;
	}

	@Override
	public String getModelClassName() {
		return ClassNote.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("classNoteSeq", getClassNoteSeq());
		attributes.put("classId", getClassId());
		attributes.put("contentSeq", getContentSeq());
		attributes.put("isContent", getIsContent());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("description", getDescription());
		attributes.put("insertDate", getInsertDate());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("insertId", getInsertId());
		attributes.put("updateId", getUpdateId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long classNoteSeq = (Long)attributes.get("classNoteSeq");

		if (classNoteSeq != null) {
			setClassNoteSeq(classNoteSeq);
		}

		Long classId = (Long)attributes.get("classId");

		if (classId != null) {
			setClassId(classId);
		}

		Long contentSeq = (Long)attributes.get("contentSeq");

		if (contentSeq != null) {
			setContentSeq(contentSeq);
		}

		String isContent = (String)attributes.get("isContent");

		if (isContent != null) {
			setIsContent(isContent);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date insertDate = (Date)attributes.get("insertDate");

		if (insertDate != null) {
			setInsertDate(insertDate);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		Long insertId = (Long)attributes.get("insertId");

		if (insertId != null) {
			setInsertId(insertId);
		}

		Long updateId = (Long)attributes.get("updateId");

		if (updateId != null) {
			setUpdateId(updateId);
		}
	}

	@JSON
	@Override
	public long getClassNoteSeq() {
		return _classNoteSeq;
	}

	@Override
	public void setClassNoteSeq(long classNoteSeq) {
		_classNoteSeq = classNoteSeq;
	}

	@JSON
	@Override
	public long getClassId() {
		return _classId;
	}

	@Override
	public void setClassId(long classId) {
		_columnBitmask |= CLASSID_COLUMN_BITMASK;

		if (!_setOriginalClassId) {
			_setOriginalClassId = true;

			_originalClassId = _classId;
		}

		_classId = classId;
	}

	public long getOriginalClassId() {
		return _originalClassId;
	}

	@JSON
	@Override
	public long getContentSeq() {
		return _contentSeq;
	}

	@Override
	public void setContentSeq(long contentSeq) {
		_columnBitmask |= CONTENTSEQ_COLUMN_BITMASK;

		if (!_setOriginalContentSeq) {
			_setOriginalContentSeq = true;

			_originalContentSeq = _contentSeq;
		}

		_contentSeq = contentSeq;
	}

	public long getOriginalContentSeq() {
		return _originalContentSeq;
	}

	@JSON
	@Override
	public String getIsContent() {
		if (_isContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _isContent;
		}
	}

	@Override
	public void setIsContent(String isContent) {
		_columnBitmask |= ISCONTENT_COLUMN_BITMASK;

		if (_originalIsContent == null) {
			_originalIsContent = _isContent;
		}

		_isContent = isContent;
	}

	public String getOriginalIsContent() {
		return GetterUtil.getString(_originalIsContent);
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getInsertDate() {
		return _insertDate;
	}

	@Override
	public void setInsertDate(Date insertDate) {
		_insertDate = insertDate;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@JSON
	@Override
	public long getInsertId() {
		return _insertId;
	}

	@Override
	public void setInsertId(long insertId) {
		_insertId = insertId;
	}

	@JSON
	@Override
	public long getUpdateId() {
		return _updateId;
	}

	@Override
	public void setUpdateId(long updateId) {
		_updateId = updateId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ClassNote.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public ClassNote toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ClassNote)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClassNoteImpl classNoteImpl = new ClassNoteImpl();

		classNoteImpl.setClassNoteSeq(getClassNoteSeq());
		classNoteImpl.setClassId(getClassId());
		classNoteImpl.setContentSeq(getContentSeq());
		classNoteImpl.setIsContent(getIsContent());
		classNoteImpl.setFileEntryId(getFileEntryId());
		classNoteImpl.setDescription(getDescription());
		classNoteImpl.setInsertDate(getInsertDate());
		classNoteImpl.setUpdateDate(getUpdateDate());
		classNoteImpl.setInsertId(getInsertId());
		classNoteImpl.setUpdateId(getUpdateId());

		classNoteImpl.resetOriginalValues();

		return classNoteImpl;
	}

	@Override
	public int compareTo(ClassNote classNote) {
		long primaryKey = classNote.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ClassNote)) {
			return false;
		}

		ClassNote classNote = (ClassNote)obj;

		long primaryKey = classNote.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ClassNoteModelImpl classNoteModelImpl = this;

		classNoteModelImpl._originalClassId = classNoteModelImpl._classId;

		classNoteModelImpl._setOriginalClassId = false;

		classNoteModelImpl._originalContentSeq = classNoteModelImpl._contentSeq;

		classNoteModelImpl._setOriginalContentSeq = false;

		classNoteModelImpl._originalIsContent = classNoteModelImpl._isContent;

		classNoteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ClassNote> toCacheModel() {
		ClassNoteCacheModel classNoteCacheModel = new ClassNoteCacheModel();

		classNoteCacheModel.classNoteSeq = getClassNoteSeq();

		classNoteCacheModel.classId = getClassId();

		classNoteCacheModel.contentSeq = getContentSeq();

		classNoteCacheModel.isContent = getIsContent();

		String isContent = classNoteCacheModel.isContent;

		if ((isContent != null) && (isContent.length() == 0)) {
			classNoteCacheModel.isContent = null;
		}

		classNoteCacheModel.fileEntryId = getFileEntryId();

		classNoteCacheModel.description = getDescription();

		String description = classNoteCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			classNoteCacheModel.description = null;
		}

		Date insertDate = getInsertDate();

		if (insertDate != null) {
			classNoteCacheModel.insertDate = insertDate.getTime();
		}
		else {
			classNoteCacheModel.insertDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			classNoteCacheModel.updateDate = updateDate.getTime();
		}
		else {
			classNoteCacheModel.updateDate = Long.MIN_VALUE;
		}

		classNoteCacheModel.insertId = getInsertId();

		classNoteCacheModel.updateId = getUpdateId();

		return classNoteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{classNoteSeq=");
		sb.append(getClassNoteSeq());
		sb.append(", classId=");
		sb.append(getClassId());
		sb.append(", contentSeq=");
		sb.append(getContentSeq());
		sb.append(", isContent=");
		sb.append(getIsContent());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", insertDate=");
		sb.append(getInsertDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", insertId=");
		sb.append(getInsertId());
		sb.append(", updateId=");
		sb.append(getUpdateId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.kisti.edison.virtuallaboratory.model.ClassNote");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>classNoteSeq</column-name><column-value><![CDATA[");
		sb.append(getClassNoteSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classId</column-name><column-value><![CDATA[");
		sb.append(getClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentSeq</column-name><column-value><![CDATA[");
		sb.append(getContentSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isContent</column-name><column-value><![CDATA[");
		sb.append(getIsContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertDate</column-name><column-value><![CDATA[");
		sb.append(getInsertDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>insertId</column-name><column-value><![CDATA[");
		sb.append(getInsertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateId</column-name><column-value><![CDATA[");
		sb.append(getUpdateId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ClassNote.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ClassNote.class
		};
	private long _classNoteSeq;
	private long _classId;
	private long _originalClassId;
	private boolean _setOriginalClassId;
	private long _contentSeq;
	private long _originalContentSeq;
	private boolean _setOriginalContentSeq;
	private String _isContent;
	private String _originalIsContent;
	private long _fileEntryId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private Date _insertDate;
	private Date _updateDate;
	private long _insertId;
	private long _updateId;
	private long _columnBitmask;
	private ClassNote _escapedModel;
}