/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.kisti.edison.virtuallaboratory.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Professor service. Represents a row in the &quot;EDVIR_Professor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.kisti.edison.virtuallaboratory.model.impl.ProfessorModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.kisti.edison.virtuallaboratory.model.impl.ProfessorImpl}.
 * </p>
 *
 * @author EDISON
 * @see Professor
 * @see org.kisti.edison.virtuallaboratory.model.impl.ProfessorImpl
 * @see org.kisti.edison.virtuallaboratory.model.impl.ProfessorModelImpl
 * @generated
 */
public interface ProfessorModel extends BaseModel<Professor> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a professor model instance should use the {@link Professor} interface instead.
	 */

	/**
	 * Returns the primary key of this professor.
	 *
	 * @return the primary key of this professor
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this professor.
	 *
	 * @param primaryKey the primary key of this professor
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the professor seq of this professor.
	 *
	 * @return the professor seq of this professor
	 */
	public long getProfessorSeq();

	/**
	 * Sets the professor seq of this professor.
	 *
	 * @param professorSeq the professor seq of this professor
	 */
	public void setProfessorSeq(long professorSeq);

	/**
	 * Returns the user ID of this professor.
	 *
	 * @return the user ID of this professor
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this professor.
	 *
	 * @param userId the user ID of this professor
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this professor.
	 *
	 * @return the user uuid of this professor
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this professor.
	 *
	 * @param userUuid the user uuid of this professor
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the record of this professor.
	 *
	 * @return the record of this professor
	 */
	public String getRecord();

	/**
	 * Returns the localized record of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized record of this professor
	 */
	@AutoEscape
	public String getRecord(Locale locale);

	/**
	 * Returns the localized record of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized record of this professor. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getRecord(Locale locale, boolean useDefault);

	/**
	 * Returns the localized record of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized record of this professor
	 */
	@AutoEscape
	public String getRecord(String languageId);

	/**
	 * Returns the localized record of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized record of this professor
	 */
	@AutoEscape
	public String getRecord(String languageId, boolean useDefault);

	@AutoEscape
	public String getRecordCurrentLanguageId();

	@AutoEscape
	public String getRecordCurrentValue();

	/**
	 * Returns a map of the locales and localized records of this professor.
	 *
	 * @return the locales and localized records of this professor
	 */
	public Map<Locale, String> getRecordMap();

	/**
	 * Sets the record of this professor.
	 *
	 * @param record the record of this professor
	 */
	public void setRecord(String record);

	/**
	 * Sets the localized record of this professor in the language.
	 *
	 * @param record the localized record of this professor
	 * @param locale the locale of the language
	 */
	public void setRecord(String record, Locale locale);

	/**
	 * Sets the localized record of this professor in the language, and sets the default locale.
	 *
	 * @param record the localized record of this professor
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setRecord(String record, Locale locale, Locale defaultLocale);

	public void setRecordCurrentLanguageId(String languageId);

	/**
	 * Sets the localized records of this professor from the map of locales and localized records.
	 *
	 * @param recordMap the locales and localized records of this professor
	 */
	public void setRecordMap(Map<Locale, String> recordMap);

	/**
	 * Sets the localized records of this professor from the map of locales and localized records, and sets the default locale.
	 *
	 * @param recordMap the locales and localized records of this professor
	 * @param defaultLocale the default locale
	 */
	public void setRecordMap(Map<Locale, String> recordMap, Locale defaultLocale);

	/**
	 * Returns the paper of this professor.
	 *
	 * @return the paper of this professor
	 */
	public String getPaper();

	/**
	 * Returns the localized paper of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized paper of this professor
	 */
	@AutoEscape
	public String getPaper(Locale locale);

	/**
	 * Returns the localized paper of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper of this professor. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPaper(Locale locale, boolean useDefault);

	/**
	 * Returns the localized paper of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized paper of this professor
	 */
	@AutoEscape
	public String getPaper(String languageId);

	/**
	 * Returns the localized paper of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized paper of this professor
	 */
	@AutoEscape
	public String getPaper(String languageId, boolean useDefault);

	@AutoEscape
	public String getPaperCurrentLanguageId();

	@AutoEscape
	public String getPaperCurrentValue();

	/**
	 * Returns a map of the locales and localized papers of this professor.
	 *
	 * @return the locales and localized papers of this professor
	 */
	public Map<Locale, String> getPaperMap();

	/**
	 * Sets the paper of this professor.
	 *
	 * @param paper the paper of this professor
	 */
	public void setPaper(String paper);

	/**
	 * Sets the localized paper of this professor in the language.
	 *
	 * @param paper the localized paper of this professor
	 * @param locale the locale of the language
	 */
	public void setPaper(String paper, Locale locale);

	/**
	 * Sets the localized paper of this professor in the language, and sets the default locale.
	 *
	 * @param paper the localized paper of this professor
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPaper(String paper, Locale locale, Locale defaultLocale);

	public void setPaperCurrentLanguageId(String languageId);

	/**
	 * Sets the localized papers of this professor from the map of locales and localized papers.
	 *
	 * @param paperMap the locales and localized papers of this professor
	 */
	public void setPaperMap(Map<Locale, String> paperMap);

	/**
	 * Sets the localized papers of this professor from the map of locales and localized papers, and sets the default locale.
	 *
	 * @param paperMap the locales and localized papers of this professor
	 * @param defaultLocale the default locale
	 */
	public void setPaperMap(Map<Locale, String> paperMap, Locale defaultLocale);

	/**
	 * Returns the homepage of this professor.
	 *
	 * @return the homepage of this professor
	 */
	@AutoEscape
	public String getHomepage();

	/**
	 * Sets the homepage of this professor.
	 *
	 * @param homepage the homepage of this professor
	 */
	public void setHomepage(String homepage);

	/**
	 * Returns the introduce of this professor.
	 *
	 * @return the introduce of this professor
	 */
	public String getIntroduce();

	/**
	 * Returns the localized introduce of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized introduce of this professor
	 */
	@AutoEscape
	public String getIntroduce(Locale locale);

	/**
	 * Returns the localized introduce of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized introduce of this professor. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getIntroduce(Locale locale, boolean useDefault);

	/**
	 * Returns the localized introduce of this professor in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized introduce of this professor
	 */
	@AutoEscape
	public String getIntroduce(String languageId);

	/**
	 * Returns the localized introduce of this professor in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized introduce of this professor
	 */
	@AutoEscape
	public String getIntroduce(String languageId, boolean useDefault);

	@AutoEscape
	public String getIntroduceCurrentLanguageId();

	@AutoEscape
	public String getIntroduceCurrentValue();

	/**
	 * Returns a map of the locales and localized introduces of this professor.
	 *
	 * @return the locales and localized introduces of this professor
	 */
	public Map<Locale, String> getIntroduceMap();

	/**
	 * Sets the introduce of this professor.
	 *
	 * @param introduce the introduce of this professor
	 */
	public void setIntroduce(String introduce);

	/**
	 * Sets the localized introduce of this professor in the language.
	 *
	 * @param introduce the localized introduce of this professor
	 * @param locale the locale of the language
	 */
	public void setIntroduce(String introduce, Locale locale);

	/**
	 * Sets the localized introduce of this professor in the language, and sets the default locale.
	 *
	 * @param introduce the localized introduce of this professor
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setIntroduce(String introduce, Locale locale,
		Locale defaultLocale);

	public void setIntroduceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized introduces of this professor from the map of locales and localized introduces.
	 *
	 * @param introduceMap the locales and localized introduces of this professor
	 */
	public void setIntroduceMap(Map<Locale, String> introduceMap);

	/**
	 * Sets the localized introduces of this professor from the map of locales and localized introduces, and sets the default locale.
	 *
	 * @param introduceMap the locales and localized introduces of this professor
	 * @param defaultLocale the default locale
	 */
	public void setIntroduceMap(Map<Locale, String> introduceMap,
		Locale defaultLocale);

	/**
	 * Returns the phone of this professor.
	 *
	 * @return the phone of this professor
	 */
	@AutoEscape
	public String getPhone();

	/**
	 * Sets the phone of this professor.
	 *
	 * @param phone the phone of this professor
	 */
	public void setPhone(String phone);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.kisti.edison.virtuallaboratory.model.Professor professor);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.kisti.edison.virtuallaboratory.model.Professor> toCacheModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.Professor toEscapedModel();

	@Override
	public org.kisti.edison.virtuallaboratory.model.Professor toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}