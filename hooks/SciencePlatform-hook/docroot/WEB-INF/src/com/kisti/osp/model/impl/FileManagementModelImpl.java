/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.model.impl;

import com.kisti.osp.model.FileManagement;
import com.kisti.osp.model.FileManagementModel;
import com.kisti.osp.model.FileManagementSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FileManagement service. Represents a row in the &quot;OSP_FileManagement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.model.FileManagementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileManagementImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see FileManagementImpl
 * @see com.kisti.osp.model.FileManagement
 * @see com.kisti.osp.model.FileManagementModel
 * @generated
 */
@JSON(strict = true)
public class FileManagementModelImpl extends BaseModelImpl<FileManagement>
	implements FileManagementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a file management model instance should use the {@link com.kisti.osp.model.FileManagement} interface instead.
	 */
	public static final String TABLE_NAME = "OSP_FileManagement";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "assigned", Types.INTEGER },
			{ "used", Types.INTEGER },
			{ "lastModified", Types.TIMESTAMP },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table OSP_FileManagement (userId LONG not null primary key,assigned INTEGER,used INTEGER,lastModified DATE null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OSP_FileManagement";
	public static final String ORDER_BY_JPQL = " ORDER BY fileManagement.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSP_FileManagement.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.model.FileManagement"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.model.FileManagement"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FileManagement toModel(FileManagementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FileManagement model = new FileManagementImpl();

		model.setUserId(soapModel.getUserId());
		model.setAssigned(soapModel.getAssigned());
		model.setUsed(soapModel.getUsed());
		model.setLastModified(soapModel.getLastModified());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FileManagement> toModels(FileManagementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FileManagement> models = new ArrayList<FileManagement>(soapModels.length);

		for (FileManagementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.model.FileManagement"));

	public FileManagementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FileManagement.class;
	}

	@Override
	public String getModelClassName() {
		return FileManagement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("assigned", getAssigned());
		attributes.put("used", getUsed());
		attributes.put("lastModified", getLastModified());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer assigned = (Integer)attributes.get("assigned");

		if (assigned != null) {
			setAssigned(assigned);
		}

		Integer used = (Integer)attributes.get("used");

		if (used != null) {
			setUsed(used);
		}

		Date lastModified = (Date)attributes.get("lastModified");

		if (lastModified != null) {
			setLastModified(lastModified);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public int getAssigned() {
		return _assigned;
	}

	@Override
	public void setAssigned(int assigned) {
		_assigned = assigned;
	}

	@JSON
	@Override
	public int getUsed() {
		return _used;
	}

	@Override
	public void setUsed(int used) {
		_used = used;
	}

	@JSON
	@Override
	public Date getLastModified() {
		return _lastModified;
	}

	@Override
	public void setLastModified(Date lastModified) {
		_lastModified = lastModified;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FileManagement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FileManagement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FileManagement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FileManagementImpl fileManagementImpl = new FileManagementImpl();

		fileManagementImpl.setUserId(getUserId());
		fileManagementImpl.setAssigned(getAssigned());
		fileManagementImpl.setUsed(getUsed());
		fileManagementImpl.setLastModified(getLastModified());
		fileManagementImpl.setStatus(getStatus());

		fileManagementImpl.resetOriginalValues();

		return fileManagementImpl;
	}

	@Override
	public int compareTo(FileManagement fileManagement) {
		long primaryKey = fileManagement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FileManagement)) {
			return false;
		}

		FileManagement fileManagement = (FileManagement)obj;

		long primaryKey = fileManagement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FileManagement> toCacheModel() {
		FileManagementCacheModel fileManagementCacheModel = new FileManagementCacheModel();

		fileManagementCacheModel.userId = getUserId();

		fileManagementCacheModel.assigned = getAssigned();

		fileManagementCacheModel.used = getUsed();

		Date lastModified = getLastModified();

		if (lastModified != null) {
			fileManagementCacheModel.lastModified = lastModified.getTime();
		}
		else {
			fileManagementCacheModel.lastModified = Long.MIN_VALUE;
		}

		fileManagementCacheModel.status = getStatus();

		return fileManagementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", assigned=");
		sb.append(getAssigned());
		sb.append(", used=");
		sb.append(getUsed());
		sb.append(", lastModified=");
		sb.append(getLastModified());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.model.FileManagement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assigned</column-name><column-value><![CDATA[");
		sb.append(getAssigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>used</column-name><column-value><![CDATA[");
		sb.append(getUsed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModified</column-name><column-value><![CDATA[");
		sb.append(getLastModified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FileManagement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FileManagement.class
		};
	private long _userId;
	private String _userUuid;
	private int _assigned;
	private int _used;
	private Date _lastModified;
	private int _status;
	private FileManagement _escapedModel;
}