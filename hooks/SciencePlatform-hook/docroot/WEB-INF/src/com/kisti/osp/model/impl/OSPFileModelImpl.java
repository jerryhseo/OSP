/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.osp.model.impl;

import com.kisti.osp.model.OSPFile;
import com.kisti.osp.model.OSPFileModel;
import com.kisti.osp.model.OSPFileSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OSPFile service. Represents a row in the &quot;OSP_OSPFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.osp.model.OSPFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OSPFileImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see OSPFileImpl
 * @see com.kisti.osp.model.OSPFile
 * @see com.kisti.osp.model.OSPFileModel
 * @generated
 */
@JSON(strict = true)
public class OSPFileModelImpl extends BaseModelImpl<OSPFile>
	implements OSPFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o s p file model instance should use the {@link com.kisti.osp.model.OSPFile} interface instead.
	 */
	public static final String TABLE_NAME = "OSP_OSPFile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "propertyName", Types.VARCHAR },
			{ "propertyValue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table OSP_OSPFile (propertyName VARCHAR(75) not null primary key,propertyValue VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OSP_OSPFile";
	public static final String ORDER_BY_JPQL = " ORDER BY ospFile.propertyName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OSP_OSPFile.propertyName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.osp.model.OSPFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.osp.model.OSPFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OSPFile toModel(OSPFileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OSPFile model = new OSPFileImpl();

		model.setPropertyName(soapModel.getPropertyName());
		model.setPropertyValue(soapModel.getPropertyValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OSPFile> toModels(OSPFileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OSPFile> models = new ArrayList<OSPFile>(soapModels.length);

		for (OSPFileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.osp.model.OSPFile"));

	public OSPFileModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _propertyName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPropertyName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _propertyName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return OSPFile.class;
	}

	@Override
	public String getModelClassName() {
		return OSPFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("propertyName", getPropertyName());
		attributes.put("propertyValue", getPropertyValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String propertyName = (String)attributes.get("propertyName");

		if (propertyName != null) {
			setPropertyName(propertyName);
		}

		String propertyValue = (String)attributes.get("propertyValue");

		if (propertyValue != null) {
			setPropertyValue(propertyValue);
		}
	}

	@JSON
	@Override
	public String getPropertyName() {
		if (_propertyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyName;
		}
	}

	@Override
	public void setPropertyName(String propertyName) {
		_propertyName = propertyName;
	}

	@JSON
	@Override
	public String getPropertyValue() {
		if (_propertyValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyValue;
		}
	}

	@Override
	public void setPropertyValue(String propertyValue) {
		_propertyValue = propertyValue;
	}

	@Override
	public OSPFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OSPFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OSPFileImpl ospFileImpl = new OSPFileImpl();

		ospFileImpl.setPropertyName(getPropertyName());
		ospFileImpl.setPropertyValue(getPropertyValue());

		ospFileImpl.resetOriginalValues();

		return ospFileImpl;
	}

	@Override
	public int compareTo(OSPFile ospFile) {
		String primaryKey = ospFile.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OSPFile)) {
			return false;
		}

		OSPFile ospFile = (OSPFile)obj;

		String primaryKey = ospFile.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OSPFile> toCacheModel() {
		OSPFileCacheModel ospFileCacheModel = new OSPFileCacheModel();

		ospFileCacheModel.propertyName = getPropertyName();

		String propertyName = ospFileCacheModel.propertyName;

		if ((propertyName != null) && (propertyName.length() == 0)) {
			ospFileCacheModel.propertyName = null;
		}

		ospFileCacheModel.propertyValue = getPropertyValue();

		String propertyValue = ospFileCacheModel.propertyValue;

		if ((propertyValue != null) && (propertyValue.length() == 0)) {
			ospFileCacheModel.propertyValue = null;
		}

		return ospFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{propertyName=");
		sb.append(getPropertyName());
		sb.append(", propertyValue=");
		sb.append(getPropertyValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.osp.model.OSPFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>propertyName</column-name><column-value><![CDATA[");
		sb.append(getPropertyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyValue</column-name><column-value><![CDATA[");
		sb.append(getPropertyValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OSPFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OSPFile.class
		};
	private String _propertyName;
	private String _propertyValue;
	private OSPFile _escapedModel;
}